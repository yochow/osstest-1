Database access
===============
$ cat ~/.xen-osstest/db-password 
$ psql -d osstestdb -h osstestdb.db.cam.xci-test.com
<password>

Borrowing a machine
===================

You need a task, create with:
$ ./mg-hosts manual-task-create `whoami`@`uname -n`
e.g.
$ ./mg-hosts manual-task-create ianc@kazak

Borrow, estimating 1 day duration (for the planner):
$ ./mg-allocate -U 1d marilith-n5 

Return (not automatic, even with an estimate given):
$ ./mg-allocate \!marilith-n5 

Removing machines for servicing/outage
======================================

mg-blockage <date-from> <date-to> <hostflag> [<extra-xinfo>]
OSSTEST_CONFIG=production-config ./mg-blockage '2014-05-21 0955' '2014-05-21 1400' equiv-marilith


Keeps running for the duration, so run it in a screen on the osstest VM.

Commisioning a new machine
==========================

Base it on an existing machine:

$ mg-hosts create-like marilith-n5 marilith-n4

Allocate it for the duration of setup
$ mg-allocate HOST

Set up the props and flags
$ mg-hosts setprops ...
$ mg-hosts setflags ...

$ mg-hosts setprops marilith-n4 -- dhcp-watch-method 'leases dhcp3 dns-cam1.uk.xensource.com:5556'
Handles multiple hosts:
$ mg-hosts setprops HOSTA HOSTB -- "PROP" "VALUE"

$ mg-hosts mkpxedir HOSTA HOSTB

Create a flight:
$ FLIGHT=`OSSTEST_CONFIG=production-config ./cs-flight-create commission xen-unstable`
$ echo $FLIGHT
20974

Clone an existing flight, e.g. 20855 was previous successful flight
$ OSSTEST_CONFIG=production-config ./cs-adjust-flight $FLIGHT copy 20855 

"commission" is a blessing, hosts should be blessed with it, e.g.

$ mg-hosts setflags HOSTA HOSTB -- blessed-commission

Can use anything e.g. commission-$classofmachine if doing multiple
commissions in parallel.

Run it, e.g. in a screen session:
OSSTEST_CONFIG=production-config ./mg-execute-flight  -Bcommission -Eian.campbell@citrix.com -f20855 $FLIGHT

Once machines are ready for production use remove the commission
blessing and add the production ones, e.g.

$ mg-hosts setflags HOSTA HOSTB -- \!blessed-commission blessed-{real,play,adhoc}

Shutting down
=============

crontab -r (remove)
crontab < crontab (restore afterwards)

you can create a file "stop" in ~osstest/testing.git or
~osstest/for-blah/something.git to cause that cron job to not start
any new things. Put a note in the stop file to say why...  (in the
former case, disables everything; in the latter, just that "branch")

Creating a new branch
=====================

* Add appropriate code to ap-*
  (For linux-* this is not needed if the tag is in the standard namespace)
  (ap-push should use refs/heads/foo, not just `foo', for the remote
   ref name - so that the initial push works)

* Create any necessary output tree on xenbits:
  As xen@xenbits do   mkdir   and   git init --bare
  If this tree is going to contain push gate input, push something to
  the push gate input ref.

* Create the actual trees and push an initial version
  As osstest@osstest:
  $ cd $HOME/testing.git
  $ OSSTEST_CONFIG=production-config \
    ./mg-branch-setup BRANCH bisect INITIAL-TESTED-VERSION

* Optional testing:
  You can now play in here if you like.  Can push random stuff and run
  "cr-daily-branch --real $branch" as osstest@osstest. e.g.
  $ OSSTEST_EMAIL_HEADER=/home/ianc/osstest-email-ijc \
    OSSTEST_CONFIG=production-config ./cr-daily-branch --real $branch

  If you do this, do not run cr-for-branches -- it will try to update
  all sorts trees etc.

  Before enabling this in cron (eg by pushing the change to BRANCHES
  to production pretest branch), rewind so that osstest can fast
  forward it to the actual production version.  Ie in bisects and
  branches for-$branch.git,
     git fetch origin production
     git reset --hard FETCH_HEAD

$ Add to BRANCHES setting in cr-for-branches

Force pushing a branch
======================

As osstest user on test controller

$ cd ~/branches/for-$branch.git
OR
$ cd ~/testing.git

$ OSSTEST_CONFIG=production-config ./ap-push $branch $revision

NOTE: $revision must be a revision *not* a tag.

Temporarily stopping a branch or the entire system
==================================================

osstest can be paused by dropping a stop file into either the central
$HOME/testing.git or $HOME/branches/for-$branch.git etc.

$HOME/testing.git/stop

  stop everything

$HOME/testing.git/daily.stop

  stops all regular tests

$HOME/testing.git/bisect.stop

  stops all bisections

$HOME/testing.git/$branch.stop

  stop regular tests and bisections of $branch

$HOME/branches/for-$branch.git/stop

  stops regular tests $branch

$HOME/bisects/for-$branch.git/stop

  stops bisections of $branch

$HOME/testing.git/$xenbranch.stop

  stops everything using $xenbranch
