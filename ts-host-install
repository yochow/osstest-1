#!/usr/bin/perl -w

use strict qw(vars);
use DBI;
use POSIX;

use Osstest;
use OsstestDebian;

readconfig();
opendb_state();

my $debconf_priority;

our %xopts;

if (@ARGV && $ARGV[0] =~ m/^--priority(?:=(.*))?$/) {
    $xopts{DebconfPriority}= defined($1) ? $1 : 'low';
    shift @ARGV;
}

our ($whhost) = @ARGV;
$whhost ||= 'host';
our $ho= selecthost($whhost);
exit 0 if $ho->{SharedReady};
die if $ho->{SharedOthers};

our %timeout= qw(ReadPreseed  350
                 Sshd        2400);

sub install () {
    power_state($ho, 0);

    my ($ps_url,$ps_file)= preseed_create
        ($ho, '',
         DiskDevice => $ho->{DiskDevice},
         Properties => $ho->{Properties},
         ExtraPreseed => <<END );
d-i netcfg/get_hostname string $ho->{Name}
d-i netcfg/get_ipaddress string $ho->{Ip}
END

    setup_pxeboot_firstboot($ps_url);
    sleep(5);

    my $logtailer= Osstest::Logtailer->new($c{WebspaceLog});
    power_state($ho, 1);

    await_webspace_fetch_byleaf($timeout{ReadPreseed},1,
                                $logtailer, $ho, $ps_url);
    setup_pxeboot_local($ho);

    await_tcp($timeout{Sshd},14,$ho);

    if ($c{Suite} =~ m/lenny/) {
        target_editfile_root($ho, '/boot/grub/menu.lst', sub {
            while (<EI>) {
                s/^terminal.*/terminal --timeout=10 serial console/;
                print EO or die $!;
            }
        });
    }

    my $lvs= target_cmd_output_root($ho, 'lvdisplay --colon');
    foreach my $l (split /\n/, $lvs) {
        logm("| $l");
        next unless $l =~ m,^\s*(/dev/[^:]+/dummy):,;
        target_cmd_root($ho, "lvremove -f $1");
    }

    my $partitions= target_cmd_output_root($ho, 'cat /proc/partitions');
    foreach my $l (split /\n/, $partitions) {
        logm("| $l");
        next unless $l =~ m/^\s*\d+\s+\d+\s+\d+\s+((?:sd|hd)[b-z])\s*$/;
        my $dev= "/dev/$1";
        target_cmd_root($ho, "pvcreate $dev");
        target_cmd_root($ho, "vgextend $ho->{Name}.$c{TestHostDomain} $dev");
    }

    my $kpath= $c{TestHostKeypairPath};
    my $kleaf= $kpath;
    $kleaf =~ s,.*/,,;
    my $ktarg= $kleaf;
    $ktarg =~ s/^(id_[a-z]+)_.*/$1/;
    foreach my $ext ('', '.pub') {
	target_putfile     ($ho,10, "${kpath}${ext}", ".ssh/${ktarg}${ext}");
	target_putfile_root($ho,10, "${kpath}${ext}", ".ssh/${ktarg}${ext}");
    }
    target_cmd     ($ho, "chmod g-r .ssh/${ktarg}");
    target_cmd_root($ho, "chmod g-r .ssh/${ktarg}");

    target_cmd_root($ho, "update-rc.d osstest-confirm-booted start 99 2 .");

    logm('OK: install completed');
}   

sub setup_pxeboot_firstboot($) {
    my ($ps_url) = @_;
    
    my $d_i= $c{PxeDiBase}.'/'.$r{arch}.'/'.$c{PxeDiVersion};
    
    my @installcmdline= qw(vga=normal);
    push @installcmdline, di_installcmdline_core($ho, $ps_url, %xopts);

    my $initrd= "$d_i/initrd.gz";
    my @firmwares= grep { m/^need-firmware-deb-/ } keys %{ $ho->{Flags} };
    if (@firmwares) {
        s/^need-firmware-deb-// foreach @firmwares;
        my @cmd= (qw(cat --), "$c{Tftp}/$initrd");
        foreach my $fp (@firmwares) {
            my $cpio= "$c{Tftp}/$d_i/$fp.cpio.gz";
            if (stat $cpio) {
                push @cmd, $cpio;
            } elsif ($! == &ENOENT) {
                logm("warning: no firmware cpio found for $fp at $cpio");
            } else {
                die "$fp $cpio $!";
            }
        }
        $initrd= host_pxedir($ho)."/initrd.gz";
        system_checked("@cmd >$c{Tftp}/$initrd");
        logm("using firmware from: @firmwares");
    }
    
    push @installcmdline, ("initrd=$initrd",
                           "domain=$c{TestHostDomain}",

                           "acpi=off",

                           "noapic",
#                           "nolapic",
                           );

    push @installcmdline, qw(--);
    push @installcmdline, "console=ttyS0,$c{Baud}n8";

    my $installcmdline= join ' ', @installcmdline;

    setup_pxeboot($ho, <<END);
serial 0 $c{Baud}
timeout 5
label overwrite
	menu label ^Overwrite
	menu default
	kernel $d_i/linux
	append $installcmdline
default overwrite
END
}

install();
