Introduction
============

OSStest is the Xen Project automated test infrastructure.

Terminology
===========

"flight":

    Each run of osstest is referred to as a "flight". Each flight is
    given a unique ID (a number or name).

"job":

    Each flight consists of one or more "jobs". These are a sequence
    of test steps run in order and correspond to a column in the test
    report grid. They have names like "build-amd64" or
    "test-amd64-amd64-pv". A job can depend on the output of another
    job in the flight -- e.g. most test-* jobs depend on one or more
    build-* jobs.

"step":

    Each job consists of multiple "steps" which is an individual test
    operation, such as "build the hypervisor", "install a guest",
    "start a guest", "migrate a guest", etc. A step corresponds to a
    cell in the results grid. A given step can be reused in multiple
    different jobs, e.g. the "xen build" step is used in several
    different build-* jobs. This reuse can be seen in the rows of the
    results grid.

"runvar":

    A runvar is a named textual variable associated with each job in a
    given flight. They serve as both the inputs and outputs to the
    job.

    For example a Xen build job may have input runvars "tree_xen" (the
    tree to clone) and "revision_xen" (the version to test). As output
    it sets "path_xendist" which is the path to the tarball of the
    resulting binary.

    As a further example a test job may have an input runvar
    "xenbuildjob" which specifies which build job produced the binary
    to be tested. The "xen install" step can then read this runvar in
    order to find the binary to install.

    Other runvars also exist covering things such as:

        * constraints on which machines in the test pool a job can be
          run on (e.g. the architecure, the need for a particular
          processor class, the presence of SR-IOV etc).

        * the parameters of the guest to test (e.g. distro, PV vs HVM
          etc).

Operation
=========

A flight is constructed by the "make-flight" script.

"make-flight" will allocate a new flight number, create a set of jobs
with input runvars depending on the configuration (e.g. branch/version
to test).

A flight is run by the "mg-execute-flight" script, which in turn calls
"sg-execute-flight". "sg-execute-flight" then spawns an instance of
"sg-run-job" for each job in the flight.

"sg-run-job" encodes various recipes (sequences of steps) which are
referenced by each job's configuration. It then runs each of these in
turn, taking into account the prerequisites etc, by calling the
relevant "ts-*" scripts.

When running in standalone mode it is possible to run any of these
steps by hand, ("mg-execute-flight", "sg-run-job", "ts-*") although
you will need to find the correct inputs (some of which are documented
below) and perhaps take care of prerequisites yourself (e.g. running
"./sg-run-job test-armhf-armhf-xl" means you must have done
"./sg-runjob build-armhf" and "build-armhf-pvops" first.

Results
=======

For flights run automatically by the infrastructure an email report is
produced. For most normal flights this is mailed to the xen-devel
mailing list. The report for flight 24438 can be seen at

    http://lists.xen.org/archives/html/xen-devel/2014-01/msg01614.html

The report will link to a set of complete logs. Since these are
regularly expired due to space constraints the logs for flight 24438
have been archived to

    http://xenbits.xen.org/docs/osstest-output-example/24438/

NB: to save space any files larger than 100K have been replaced with a
placeholder.

The results grid contains an overview of the flight's execution.

The results for each job are reached by clicking the header of the
column in the results grid which will lead to reports such as:

    http://xenbits.xen.org/docs/osstest-output-example/24438/test-amd64-amd64-xl/info.html
    http://xenbits.xen.org/docs/osstest-output-example/24438/build-amd64/info.html

The job report contains all of the logs and build outputs associated
with this job.

The logs for a step are reached by clicking the individual cells of
the results grid, or by clicking the list of steps on the job
report. In either case this will lead to a report such as

    http://xenbits.xen.org/docs/osstest-output-example/24438/test-amd64-amd64-xl/4.ts-xen-install.log

Additional details (e.g. serial logs, guest cfg files, etc) will be
available in the complete logs associated with the containing job.

The runvars are listed in the results page for the job as "Test
control variables". e.g. See the end of:

    http://xenbits.xen.org/docs/osstest-output-example/24438/test-amd64-amd64-xl/info.html

In order to find the binaries which went into a test job you should
consult the results page for that job and find the relevant build
job. e.g.

    http://www.chiark.greenend.org.uk/~xensrcts/logs/24438/test-amd64-amd64-xl/info.html

lists "xenbuildjob" as "build-amd64". Therefore the input binaries are
found at

    http://www.chiark.greenend.org.uk/~xensrcts/logs/24438/build-amd64/info.html

which is linked from the top of the relevant column in the overview
grid.

Script Naming Conventions
=========================

Most of the scripts follow a naming convention:

ap-*:   Adhoc push scripts

cr-*:   Cron scripts

cri-*:  Cron scripts (internal)

cs-*:   Control Scripts

mg-*:   Management scripts

ms-*:   Management Services

sg-*:   ?

ts-*:   Test Step scripts.

sa-*:	Standalone mode.


Jobs
====

The names of jobs follow some common patterns:

    build-$ARCH

        Build Xen for $ARCH

    build-$ARCH-xend

        Build Xen for $ARCH, with xend enabled

    build-$ARCH-pvops

        Build an upstream ("pvops") kernel for $ARCH

build-$ARCH-oldkern

        Build the old "linux-2.6.18-xen" tree for $ARCH

test-$XENARCH-$DOM0ARCH-<CASE>

        A test <CASE> running a $XENARCH hypervisor with a $DOM0ARCH
        dom0.

        Some tests also have a -$DOMUARCH suffix indicating the
        obvious thing.

NB: $ARCH (and $XENARCH etc) are Debian arch names, i386, amd64, armhf.

Common/Special Runvars
======================

Many test aspects of the individual test-scripts (ts-*) are configured
via "runvars" and are only of interest to a specific script and to the
make-flight which sets them up.

However there are some runvars which are globally interesting.

- Build Jobs:

    A runvar which ends "buildjob" (more formally, which matches
    /^(?:.*_)?([^_]*)buildjob$/) indicates that the job containing
    that runvar requires the outout of another job in order to run.

    Examples of these are `xenbuildjob', which is the job providing the
    hypervisor; `buildjob', which provides the tools or `kernbuildjob'
    which provides the dom0 (and possibly guest) kernel.

    In production mode osstest will take care of ensuring that any
    required build jobs are complete before running the job. In
    standalone mode this is the user's responsibility.

    A build job runvar can simply (and most commonly) name another job
    within the same flight or it can be of the form "<flight>.<job>"
    to use the output of a job in another flight. The latter is common
    associated with bisection which will attempt to reuse existing
    builds where possible.

- Host Idents:

    Most jobs require one or more hosts to operate on, these are
    passed to the ts-* commands making up the job as command line
    options given the "ident" of the host, which is simply an
    identifier for the role of the host. Most often a job which only
    requires a single host will have a single ident `host`, a
    migration job might involve `src_host' and `dst_host'.

    In general the ident is simply passed to the ts-* scripts by
    sg-run-job or by ./standalone and is then converted to an actual
    host by looking for an identically named runvar.

    This runvar is usually set by ts-hosts-allocate which in
    production mode interacts with the resource planner. However in
    some cases, e.g. bisection, this runvar is configured when the
    flight is constructed (so that bisection happens on the same host).

Standalone Mode
===============

To run osstest in standalone mode:

 - You need to install
     sqlite3
     tcl8.4 tclx8.4 libsqlite3-tcl
     libdbi-perl libdbd-sqlite3-perl
     pax rsync
     curl
     netcat
     chiark-utils-bin

 - Optional:
     ipmitool -- for hosts which use IPMI for power control
     grub-common -- for mg-pxe-loader-update

 - Write a config file
    ~/.xen-osstest/config
   See below.

 - Select the "branch" and job to reproduce.  By default the system
   gives you the "branch" consisting of tests run for the xen-unstable
   push gate.  You need to select a job.  The list of available jobs
   is that shown in the publicly emailed test reports on xen-devel, eg
     http://lists.xen.org/archives/html/xen-devel/2014-01/msg01614.html

   If you don't want to repro one of those and don't know how to
   choose a job, choose one of
      test-amd64-{i386,amd64}-xl       32/64-bit dom0,domU; Debian guest

 - Run ./standalone-reset

   This will call "make-flight" for you to create a flight targetting
   xen-unstable (this can be adjusted by passing parameters to
   standalone-reset). By default the flight identifier is
   "standalone". standalone-reset will also make sure that certain
   bits of static data are available (e.g. Debian installer images)

 - Then you can run
      ./sg-run-job <job>
   to run that job on the default host.  NB in most cases this will
   wipe the test box!  Relevant environment variables here are:
      OSSTEST_HOST_REUSE    if set to 1, does not reinstall the host
      OSSTEST_HOST_HOST     override config file TestHost setting
                             (strictly, the final `_HOST' is the
			      uppercase of the host's `ident' in the job)

   However, as test-amd64-{i386,amd64}-xl and other tests depends on
   some runtime variables generated by build-* jobs, you can run
   build-* jobs before running actual test jobs. If you don't want to do
   so you need to insert those missing runvars into standalone.db with
   sqlite3.

 - Don't forget to set the machine to pxeboot in the BIOS.

 - Currently you need a serial console at 115200 8n1; see TODO.

 - If you have an existing test host and guest set up
   you can run
      OSSTEST_JOB=<job>  ./ts-debian-install host=bedbug
   or some such to install a Debian guest on it.

========================================

Format of config file ~/.xen-osstest/config (you may set OSSTEST_CONFIG to
point to a different file, or :-separates series of files):

Lines containing:
   Name value
or
   Name=  perl expression
or
   Name= <<'END'    or <<END
   blah blah
   END

To set a value to the empty string, say
   Name=''

#-comments and blank lines are ignored.

For an example see  ./standalone-config-example
Values later in the file, or in a later file, take precedence.

You can say `Include <filename>'.  <filename> is relative to the file
doing the including, unless it starts with `/' or `./'.

========================================

Important config settings for standalone mode:

DnsDomain
   DNS domain to suffix to many things.  No default.
   For example, test box hostnames will by default be qualified
   with this name.

NetNameservers
   Space-separated list of nameserver IPv4 addresses

DebianMirrorHost
   Domain name or address of the Debian mirror to use.
   Set DebianMirrorSubpath to the path inside the mirror if
   your mirror isn't at http://<DebianMirrorHost>/debian/ .
   Defaults to ftp.debian.org if DebianMirrorProxy is set.

DebianMirrorProxy
   The apt proxy to specify for Debian (and derivatives),
   eg http://apt-cacher:3142/ .

TestHost <hostname>
TestHost_<ident> <hostname>
   Specifies the test box to use.  Should be a bare hostname,
   not an fqdn.

HostProp_<testbox>_Ether
   MAC address of the box <testbox>.  Only needed if you want
   to use the osstest host and Xen installer.

HostProp_<testbox>_Build_Make_Flags
   Extra flags to pass to "make". e.g. "-j<SOMETHING>"

HostProp_<testbox>_LinuxSerialConsole
   Set to Linux's name for the serial console device on the
   platform. Defaults to ttyS0. If set to "NONE" then the system will
   use VGA console instead.

HostProp_<testbox>_XenSerialConsole
   Set to Xen's name for the serial console device on the
   platform. Defaults to com1.

HostProp_<testbox>_DTUARTPath
   If XenSerialConsole is "dtuart" then this specifies the path in the
   DTB to the device to use. Can also specify an alias defined in the
   platforms DTB.

HostProp_<testbox>_DIFrontend
   Configure the frontend used by Debian installer. Default in osstest
   is a very basic "text" interface but for standalone configurations,
   especially on VGA, "newt" might be preferred.

HostProp_<testbox>_RebootTimeExtra
   Increase the timeout for rebooting the testbox by the given value
   (e.g., 400). This could be useful for machines with loads of RAM,
   where Xen takes really long time to boot (typically because of
   the "Scrubbing free RAM" phase).

HostProp_<testbox>_TftpScope
   Defines the Tftp scope (i.e. subnet) where this host resides. See
   "TftpFoo_<scope> and TftpFoo" below.

HostProp_<testbox>_NtpServer
   NTP server to use.  You should probably have your own local
   NTP server for production use; the default is to use the operating
   system's default (normally, Debian's pool.ntp.org servers).

HostFlags_<testbox>
   Defines a set of flags for the host. Flags is a list separated by
   whitespace, comma or semi-colon. A flag can be unset by prepending
   a !. Only used in standalone mode.

HostGroup_<testbox> <group>
   Defines a group of similar hosts of which <testbox> is a
   member. This can then be used with HostGroupProp and HostGroupFlags

HostGroupProps_<group>_<prop>
   Equivalent to writing HostProp_<testbox>_<prop> for every testbox
   which declares HostGroup_<testbox>_<group>. Allows setting a set of
   common properties for a group of similar machines. These settings
   take precedence over the database provided settings, but are
   themselves overridden by host-specific properties.

HostGroupFlags_<group>
   Equivalent to writing HostFlags_<testbox> for every testbox which
   declares HostGroup_<testbox>_<group>. Allows setting a set of
   common flags for a group of similar machines. These flags are
   merged with the host specific flags. Only used in standalone mode.

DebianPreseed
   Text to add to the debian-installer preseed file.  Optional.

========================================

Config settings relevant only to standalone mode

JobDBStandaloneFilename
   Database file to use to record the "jobs" and their run variables.
   Default: ./standalone.db (sqlite3)

CaptureLogs
   boolean, set to 1 to enable ts-logs-capture

TestHostDomain            defaults to DnsDomain

TestHost_<ident>      where eg <ident> = "host"
TestHost

HostProp_<property>
HostProp_<host>_<property>
HostFlags                flag,flag,flag,...
HostFlags_<host>         flag,!flag,!flag,flag...

HostProp_DhcpWatchMethod
   leases <format> <source>
      where <format> is dhcp3
            <source> is filename (with slash) or <host>:<port>

AuthorizedKeysFiles
     :-separated list of files to concatenate into authorized_keys
AuthorizedKeysAppend
     literal text to add
The keys in ~/.ssh/id_{rsa,dsa}.pub and ~/.ssh/authorized_keys
(if they exist) are copied anyway.

TestHostKeypairPath

Platforms<Arch>
   List of platforms (i.e. distinct host types) to run a basic test on.

HostProp_GenEtherPrefixBase 5e:36:0e:f5
# 	                               :00:01 guest number in job appended
#            in standalone jobdb, ^^^^^ xor'd with low 16 bits of your uid

========================================

General config settings

Stash
Images
Logs

Repos              Full path to a temporary directory where repositories
                   can be cloned. This is needed for anything which uses
                   cr-daily-branch, including "./standalone make-flight"
                   and "standalone-generate-dump-flight-runvars".

DebianSuite
GuestDebianSuite   defaults to DebianSuite

DebianPreseed      added to existing preseed file

DebianNonfreeFirmware
  List of debs of non-free firmware to include in the massaged
  debian-installer.  You will need this if you want to use network
  card which requires non-free firmware.  The default is just
  "firmware-bnx2'.  If your host operating system doesn't have
  grep-dctrl (for example because it's not Debian) then you must set
  this to the empty string, by writing  DebianNonfreeFirmware=''

TftpFoo_<scope> and TftpFoo

    Describes various properties relating to Tftp in a given <scope>,
    where a <scope> is a given subnet, DHCP server etc. Valid
    properties are:

        Path          The path to the root of the directory which is exposed by
                      the tftpserver (e.g. /tftpboot).
        TmpDir        A directory under `Path' to use for temporary files.

        PxeDir        The path under `Path' to the PXE configuration directory
                      (e.g. pxelinux.cfg)
        PxeGroup      The Unix group which should own files under `PxeDir'.
        PxeTemplates  See TftpPxeTemplates
        PxeTemplatesReal

        DiBase        The path under `Path' to the root of the debian
                      installer images.
        GrubBase      The path under `Path' to the root of the grub
                      EFI PXE images.

    For hosts in scope "default", TftpFoo_default (if set) takes
    precedence over TftpFoo.  TftpFoo is used when the setting Foo is
    not defined for the host's scope.

TftpPxeTemplates
    List (space-separated) of template filenames for writing
    The templates contain variable substitutions %var%
    The variables are the runvars plus
        name          hostname (short name as in resource databases etc.)
        ether         host/guest mac address
        etherhyp      ... in lowercase hyphen-separated form (for pxelinux)
	ipaddr        host/guest static ip address
	ipaddrhex     ... in uppercase hex form (for pxelinux)
    Templates containing references to unknown %var%s - particularly,
    the host mac address when not known, or the guest's dynamic
    ip address - are skipped.  The first template all of whose ingredients
    are known is used, with TftpPath and TftpPxeDir prepended.

TftpPxeTemplatesReal
    Template filename which mg-hosts mkpxedir should make be a symlink to
    the TftpPxeTemplates.  Not used otherwise.

Timezone
    Olson TZ name, used by host and guest installers

========================================

Host-specific config settigs

NetNameServers

WebspaceFile
WebspaceUrl
WebspaceCommon
WebspaceLog

========================================

Some of the config settings relevant to the production setup
(`Executive') include:

JobDB
HostDB
   Class name tails for the job and host databases.

ExecutiveDbnamePat
   Pattern for generating PostgreSQL dbname strings for the executive's
   various databases.  Processed as follows:
     1. <\w+> is replaced with variables:
		 <dbname>    database name
     2. <~/path> </path> <./path> are replaced with contents of specified file 
     3. <[> and <]> are replaced with < and >

ExecutiveDbname_<DB>
   PostgreSQL dbname string for the database <DB>.  Default is to use
   ExecutiveDbnamePat.

Adhoc/Custom Flights
====================

Normally a flight is constructed using "make-flight", either via
"./standalone make-flight" or by calling make-flight (or another
make-*-flight) directly.

In production mode this usually happens via cr-for-branches invoking
cr-daily-branch for a given branch, while in standalone mode it is
either done by hand or using the standalone helpers make-flight
operation.

However it can be useful to create a custom flight "by-hand" in order
to repeatedly test one aspect or to facilitate adhoc tests etc.

A fresh empty flight is created by using the "cs-flight-create"
script. It takes as arguments a "blessing" and a "branch" and on
success prints the new flight number.

The blessing should almost always be "adhoc". The branch doesn't
really matter, if you are testing something related to a failure on a
given branch you may as well use that, otherwise "adhoc" or
"xen-unstable" is a reasonably fallback.

Thus the normal way to invoke cs-flight-create is:

    $ flight=`./cs-flight-create adhoc adhoc`

Which results in a $flight which can be used for the remainder of the
configuration.

Once you have an empty flights there are two main ways to populate it
with jobs. Firstly you can create jobs from scratch using
cs-job-create or secondly by copying one or more jobs from an existing
template flight using "cs-adjust-flight copy-jobs". In either case the
job can then be further customised using cs-adjust-flight to add and
remove runvars etc.

cs-job-create requires a flight ($flight from above), a job name (any
string), a recipe (either custom, see below, or from any
run-job/<recipe> in sg-run-job) and then the runvars in key=value
form. Deciding on the runvars in particular can be tricky, it is
usually easiest to copy an existing job.

A job can be copied from a template flight using cs-adjust-flight
copy-jobs e.g.:

    $ ./cs-adjust-flight $flight copy-jobs $template <job-name>

Having created (or copied) a job then you may wish to customise, which
can be done using cs-adjust-flight. In particular you can add or
remove runvars, see the doc comment at the top of the script. Most
commonly you may which to preset the host ident to a specific if you
are tracking down a host specific issue.

You will also want to provide the necessary buildjobs for the job. You
can do so by also copying the build jobs from your template job or by
creating them by hand, or by setting the buildjob to reuse the builds
done by the template, by setting the appropriate buildjob runvar to
"$template.$job" . See "Common/Special Runvars" above for more.

Custom recipes can be placed in sg-run-job-adhoc and will be
automatically included. At a minimum you will need to provide "proc
need-hosts/$recipe" which returns a list of host idents and "proc
run-job/$recipe" which runs the required test steps. There are plenty
of examples in sg-run-job.

Once the flight is created it is run using mg-execute-flight. It is
usual to pass -Badhoc (to set the target blessing) and -Eemail to set
the destination for the test report as well as giving the flight:

    $ ./mg-execute-flight -Badhoc -Eemail@example.com $flight

A worked example, including a custom recipe (in this case to reboot
Xen five times on the host) and .

Custom sg-run-job-adhoc, requires a single host (ident "host") and
runs ts-host-reboot + a ping check 5 times:

----START-------
proc need-hosts/adhoc-xen-boot-x5 {} { return host }
proc run-job/adhoc-xen-boot-x5 {} {
    repeat-ts 5 xen-boot.repeat \
               ts-host-reboot     host \; \
               ts-host-ping-check host
}
----END---------

Commands to populate and run a flight (normally one would put this in
a script):

----START-------
host=<some host which doesn't reliably reboot>
lnxrev=<some revision of Linux which we want to test>

# templates for Xen and Linux builds. Also used for build binaries for
# Xen.
template=123456

# Create the flight
flight=`./cs-flight-create adhoc adhoc`
echo $flight

# Create a test job from scratch, many of the runvars cribbed from a
# random job in a real flight created by make-flight.
job=adhoc-amd64-amd64-xen-boot
./cs-job-create $flight $job adhoc-xen-boot-x5 \
    all_hostflags=arch-amd64,arch-xen-amd64,suite-wheezy,purpose-test \
    arch=amd64 toolstack=xl enable_xsm=false kernkind=pvops \
    host=$host

# Reuse the binaries from the Xen template job for both the hypervisor
# and the tools by pointing the buildjob and xenbuildjob runvars of
# $job at them. XXX assumes the binaries still exist (haven't been
# garbage collected).
./cs-adjust-flight $flight runvar-set $job buildjob $template.build-amd64
./cs-adjust-flight $flight runvar-set $job xenbuildjob $template.build-amd64

# Copy Linux build job from template and reset the revision to build
# what we want.
./cs-adjust-flight $flight copy-jobs $template build-amd64-pvops
./cs-adjust-flight $flight runvar-set build-amd64-pvops revision_linux $lnxrev

# Point $job's kernel buildjob to the above
./cs-adjust-flight $flight runvar-set $job kernbuildjob build-amd64-pvops

# Now run the job.
./mg-execute-flight -Badhoc -Eme@example.com $flight
----END---------
