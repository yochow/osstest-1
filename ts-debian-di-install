#!/usr/bin/perl -w
# This is part of "osstest", an automated testing framework for Xen.
# Copyright (C) 2009-2013 Citrix Inc.
#
# This program is free software: you can redistribute it and/or modify
# it under the terms of the GNU Affero General Public License as published by
# the Free Software Foundation, either version 3 of the License, or
# (at your option) any later version.
#
# This program is distributed in the hope that it will be useful,
# but WITHOUT ANY WARRANTY; without even the implied warranty of
# MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the
# GNU Affero General Public License for more details.
#
# You should have received a copy of the GNU Affero General Public License
# along with this program.  If not, see <http://www.gnu.org/licenses/>.

use strict qw(vars);
use DBI;
use Osstest;
use Osstest::Debian;
use Osstest::TestSupport;

tsreadconfig();

our ($whhost,$gn) = @ARGV;
$whhost ||= 'host';
$gn ||= 'debian';

our $ho= selecthost($whhost);

our $ram_mb=    512;
our $disk_mb= 10000;

our $guesthost= "$gn.guest.osstest";
our $gho;

sub prep () {
    target_install_packages_norec($ho, qw(lvm2));

    $gho= prepareguest($ho, $gn, $guesthost, 22,
                       $disk_mb, 40);

    prepareguest_part_lvmdisk($ho, $gho, $disk_mb);

    target_cmd_root($ho, "umount $gho->{Lvdev} ||:");
}

sub setup_netboot($$$)
{
    my ($didir, $arch, $suite) = @_;

    my $di_ver= $r{"$gho->{Guest}_diver"} || "osstest";

    if ( $di_ver eq "osstest" ) {
	my $di_path = $c{TftpPath}.'/'.$ho->{Tftp}{DiBase}.'/'.$r{arch}.'/'.$c{TftpDiVersion}.'-'.$ho->{Suite};

	my $netboot_kernel = "$di_path/vmlinuz-xen";
	my $netboot_initrd = "$di_path/initrd.gz-xen";

	target_putfile_root($ho, 60, $netboot_kernel, "$didir/kernel_${suite}_${arch}");
	target_putfile_root($ho, 60, $netboot_initrd, "$didir/initrd_${suite}_${arch}");

	store_runvar("$gho->{Guest}_netboot_kernel", $netboot_kernel);
	store_runvar("$gho->{Guest}_netboot_initrd", $netboot_initrd);
    } else {
	my $mirror = "http://$c{DebianMirrorHost}/$c{DebianMirrorSubpath}";

	my $di_url = $suite eq "daily" ?
	    "http://d-i.debian.org/daily-images/$arch/daily/netboot/xen" :
	    "$mirror/dists/$suite/main/installer-$arch/$di_ver/images/netboot/xen";

	my $netboot_kernel = "$di_url/vmlinuz";
	my $netboot_initrd = "$di_url/initrd.gz";

	target_fetchurl($ho, $netboot_kernel, "$didir/kernel_${suite}_${arch}");
	target_fetchurl($ho, $netboot_initrd, "$didir/initrd_${suite}_${arch}");

	store_runvar("$gho->{Guest}_netboot_kernel", $netboot_kernel);
	store_runvar("$gho->{Guest}_netboot_initrd", $netboot_initrd);
    }

    return <<END;
kernel      = "$didir/kernel_${suite}_${arch}"
ramdisk     = "$didir/initrd_${suite}_${arch}"
END
}
sub ginstall () {
    my $arch= $r{"$gho->{Guest}_arch"};
    my $method= $r{"$gho->{Guest}_method"};

    my $bl= $r{"$gho->{Guest}_bootloader"};

    target_cmd_root($ho, <<END);
rm -rf /root/di
mkdir /root/di
END

    my ($method_cfg, $ps_url, $extra_disk);

    if ( $method eq "netboot" )
    {
	my $suite= $r{"$gho->{Guest}_dist"};
	logm("$method $suite/$arch");

	$method_cfg = setup_netboot("/root/di", $arch, $suite);

	$suite = "sid" if $suite eq "daily";

	$ps_url = preseed_create_guest($gho, '', Suite=>$suite, PvMenuLst=>($bl eq "pvgrub"));

	$extra_disk = "";
    }
    else
    {
	die "$method";
    }

    my $cmdline = join(" ", (
			   "debian-installer/exit/always_halt=true",
			   "--",
			   "console=hvc0",
			   "auto-install/enable=true",
			   "hostname=$gho->{Name}",
			   "domain=$c{TestHostDomain}",
			   "url=$ps_url",
			   "DEBIAN_FRONTEND=text",
			   "netcfg/dhcp_timeout=150",
			   "netcfg/choose_interface=eth0",
		       ));

    my %install_xopts = (
	OnPowerOff => "preserve"
    );

    prepareguest_part_xencfg($ho, $gho, $ram_mb, \%install_xopts, <<END);
$method_cfg
extra       = "$cmdline"
#
disk        = [
            $extra_disk 'phy:$gho->{Lvdev},xvda,w'
            ]
END

    my $cmd= toolstack()->{Command}." create ".
        $r{ $gho->{Guest}.'_'. toolstack()->{CfgPathVar} };
    target_cmd_root($ho, $cmd, 300);

    guest_checkrunning($ho, $gho) or die "$gho->{Name} not running";

    guest_await_shutdown($ho,$gho,2000);
    guest_destroy($ho,$gho);

    my $pvgrub = {
	i386 => "/usr/local/lib/xen/boot/pv-grub-x86_32.gz",
	amd64 => "/usr/local/lib/xen/boot/pv-grub-x86_64.gz"
    };
    my $blcfg = $bl eq "pvgrub" ? <<END : <<END;
kernel = "$pvgrub->{$arch}"
extra = "(hd0,0)/boot/grub/menu.lst"
END
bootloader = "pygrub"
END

    prepareguest_part_xencfg($ho, $gho, $ram_mb, {}, <<END);
$blcfg
#
disk        = [
            'phy:$gho->{Lvdev},xvda,w'
            ]
END
    return;
}

prep();
ginstall();
