#!/bin/bash

# This is part of "osstest", an automated testing framework for Xen.
# Copyright (C) 2009-2013 Citrix Inc.
# 
# This program is free software: you can redistribute it and/or modify
# it under the terms of the GNU Affero General Public License as published by
# the Free Software Foundation, either version 3 of the License, or
# (at your option) any later version.
# 
# This program is distributed in the hope that it will be useful,
# but WITHOUT ANY WARRANTY; without even the implied warranty of
# MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the
# GNU Affero General Public License for more details.
# 
# You should have received a copy of the GNU Affero General Public License
# along with this program.  If not, see <http://www.gnu.org/licenses/>.


set -ex

. ./cri-bisect
. ./cri-args-hostlists

branch=$1; shift
select_branch

check_stop bisect.

sticky=bisecting-sticky-branch

anyflagfile=tmp/bisected-any.$branch

with-lock-ex -w $mrof.lock bash -xec "
	if test -e $mrof.in; then
		if test -e $mrof; then mv $mrof $mrof.old; fi
                rm -f $anyflagfile
		mv $mrof.in $mrof
	fi
"

if ! test -f $mrof; then
        rm -f $sticky
        echo "$branch no mro"
        exit 0
fi

if grep '^tolerable$' $mrof >/dev/null 2>&1; then
	# this approach relies on us getting a look-in in between
	# each daily run, which should be OK.
	rm -f tmp/bisected.$branch.*
fi

if test -f $sticky; then
        read <$sticky sticky_branch
        if [ "x$sticky_branch" != "x$branch" ]; then
                echo "$branch but sticky $sticky_branch, skipping"
                exit 0
        fi
fi

compute_state_done_callback () {
        touch $flagfile
        touch $anyflagfile
        rm -f $sticky
}

compute_state_callback () {
	compute_state_core \
		--basis-template=$basisflight \
                --blessings=$OSSTEST_BLESSING,$OSSTEST_BLESSING-bisect \
                "$@" $branch $job $testid
}

perhaps_bisect_step_core_testing_callback () {
#        echo $branch >$sticky.new
#        mv -f $sticky.new $sticky
        export OSSTEST_RESOURCE_WAITSTART=`stat -c%Y $mrof`
        OSSTEST_RESOURCE_WAITSTART=$(( $OSSTEST_RESOURCE_WAITSTART - 6000 ))
}

perhaps_bisect_step () {
        laundered_testid=${testid//\//--}
        flagfile=tmp/bisected.$branch.$job.$laundered_testid
        if test -f $flagfile; then
                echo "already completed $branch $job $testid"
                return
        fi
        perhaps_bisect_step_core $OSSTEST_BLESSING $OSSTEST_BLESSING-bisect
}

subject_prefix="[$branch bisection]"

exec <$mrof
while read keyword job testid basisflight; do
        if [ "x$keyword" = xregression ]; then
                perhaps_bisect_step
        fi
done

echo nothing to do
rm $mrof

exit 0
