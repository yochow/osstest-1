#!/usr/bin/perl -w

use strict qw(vars);
use DBI;
use Osstest;
use File::Path;
use POSIX;

readconfig();
opendb_state();
our ($whhost) = @ARGV;
$whhost ||= 'host';
our $ho= selecthost($whhost);

my $leaf= "build.$flight.$job";
my $homedir = get_host_property($ho, 'homedir', '/home/osstest');
my $builddir= "$homedir/$leaf";

my $makeflags= get_host_property($ho, 'build make flags', '-j4');
    
sub checkout () {
    my $kerns= $r{xen_kernels};
    $kerns='' unless defined $kerns;
    $kerns =~ s/,/ /g;

    target_cmd($ho, "rm -rf $builddir && mkdir $builddir", 60);

    build_clone($ho, 'xen', $builddir, 'xen-unstable');

    my $linux_url_envvar= 'XEN_LINUX_GIT_URL';
    my $linux_rev_envvar= 'XEN_LINUX_GITREV';
    if (length $r{tree_linux} && $r{tree_linux} =~ m/\.hg$/) {
        $linux_url_envvar= 'XEN_LINUX_HGREPO';
        $linux_rev_envvar= 'XEN_LINUX_HGREV';
    }

    my $debug_build = $r{xen_build_debug} || 'y';

    target_cmd_build($ho, 100, $builddir, <<END.
        cd $builddir/xen-unstable
	>.config
	echo >>.config debug=$debug_build
	echo >>.config GIT_HTTP=y
	echo >>.config QEMU_REMOTE='$r{tree_qemu}'
END
               (nonempty($r{revision_qemu}) ? <<END : '').
	echo >>.config QEMU_TAG='$r{revision_qemu}'
END
               (nonempty($r{tree_qemuu}) ? <<END : '').
	echo >>.config QEMU_UPSTREAM_URL='$r{tree_qemuu}'
END
               (nonempty($r{revision_qemuu}) ? <<END : '').
	echo >>.config QEMU_UPSTREAM_REVISION='$r{revision_qemuu}'
END
               (nonempty($r{revision_seabios}) ? <<END : '').
	echo >>.config SEABIOS_UPSTREAM_TAG='$r{revision_seabios}'
END
               (nonempty($r{tree_linux}) ? <<END : '').
	echo >>.config export $linux_url_envvar='$r{tree_linux}'
END
               (nonempty($r{revision_linux}) ? <<END : '').
	echo >>.config export $linux_rev_envvar='$r{revision_linux}'
END
               ($ho->{Suite} =~ m/squeeze/ ? <<END : '').
	echo >>.config PYTHON_PREFIX_ARG=
END
               (nonempty($kerns) ? <<END : <<END)
	echo >>.config KERNELS='$kerns'
END
	echo >>.config KERNELS=''
END
               );
}

sub buildcmd_stamped_logged ($$$$$) {
    my ($timeout, $stampname, $prefix, $cmd, $suffix) = @_;
    target_cmd_build($ho, $timeout, $builddir, <<END);
        cd xen-unstable
        $prefix
        ( $cmd 2>&1 &&             touch ../$stampname-ok-stamp
        ) |tee ../$stampname-log
        test -f ../$stampname-ok-stamp
        $suffix
        echo ok.
END
#/;
}

sub build () {
    target_cmd_build($ho, 1000, $builddir, <<END);
        cd xen-unstable
        perl -i.bak -pe '
		next unless m/^exit 0/;
                print "setopt CONFIG_HIGHPTE n\\n" or die \$!;
                print "setopt CONFIG_TUN y\\n" or die \$!;
                print "setopt CONFIG_BLK_DEV_NBD m\\n" or die \$!;
                print "setopt CONFIG_DEBUG_INFO y\\n" or die \$!;
        ' buildconfigs/enable-xen-config
END
    buildcmd_stamped_logged(300, 'configure', <<END,<<END,<<END);
            if test -f configure; then
END
                ./configure --sysconfdir=/etc
END
            fi
END
#/;
    buildcmd_stamped_logged(9000, 'build', '',<<END,'');
            make $makeflags
END
}

sub collectversion_qemu () {
    my $tools="$builddir/xen-unstable/tools";
    store_revision($ho, 'qemu', "$tools/ioemu-dir", 1);
    store_revision($ho, 'qemu', "$tools/qemu-xen-traditional-dir", 1);
    store_revision($ho, 'qemuu', "$tools/qemu-xen-dir", 1);
    store_revision($ho, 'seabios', "$tools/seabios-dir", 1);
}

sub collectversions_kernel () {
    my $whichkerns= target_cmd_output($ho, <<END);
        set -e
        cd $builddir/xen-unstable
        echo linux*/.{git,hg}
END
    my (@kerndirs,@vcss,@revisions);
    foreach my $kerndir (sort split / /, $whichkerns) {
        next if $kerndir =~ m/\*/;
        die "$kerndir ?" unless $kerndir =~ m/^linux.*\.(git|hg)$/;
        my $vcs= $1;
        push @kerndirs, $kerndir;
        push @vcss, $vcs;
        push @revisions,
            vcs_dir_revision($ho,"$builddir/xen-unstable/$kerndir", $vcs);
    }
    if (@revisions) {
	store_vcs_revision('linux',"@revisions","@vcss");
	store_runvar('built_xen_kerneldirs',"@kerndirs");
    }
}

sub divide () {
    target_cmd_build($ho, 100, $builddir, <<END);
        cd xen-unstable/dist
        mkdir kerninstall xeninstall
	for f in *install; do
	    mkdir -p \$f/lib
	done
        if test -d install/boot; then
            mv install/boot kerninstall/.
            if test -d install/lib/modules; then
                mv install/lib/modules kerninstall/lib/.
            fi
            if test -f kerninstall/boot/xen.gz; then
                mkdir xeninstall/boot
                mv kerninstall/boot/xen* xeninstall/boot/.
            fi
        fi
END
}

sub stash () {
    foreach my $part ('', 'kern', 'xen') {
        built_stash($ho, $builddir,
                    "xen-unstable/dist/${part}install",
                    "${part}dist");
    }
}

sub checkversions () {
    my $chk= $dbh_tests->prepare(<<END);
        SELECT reqd.name, reqd.val, built.val
          FROM runvars reqd, runvars built
         WHERE reqd.flight=? and reqd.job=?
           AND built.flight=? and built.job=?
           AND built.name = 'built_' || reqd.name
END
    $chk->execute($flight,$job,$flight,$job);
    my $mismatches= 0;
    while (my $row= $chk->fetchrow_arrayref()) {
        my ($tree, $reqd, $built) = @$row;
        next unless defined $reqd && defined $built;
        $reqd =~ s/^.*://;
        $built =~ s/^.*://;
        next if substr($reqd,0,length($built))
             eq substr($built,0,length($reqd));
        print STDERR "version mismatch! $tree requested=$reqd built=$built\n";
        $mismatches++;
    }
    broken("version mismatches ($mismatches)") if $mismatches;
    $chk->finish();
}

our @probs;

sub trapping ($) {
    my ($sub) = @_;
    my $tok= eval { $sub->(); 1; };
    if (!$tok) { push @probs, $@; print STDERR "failure (trapped): $@\n"; }
}

checkout();

trapping(\&build);
trapping(\&collectversion_qemu);
trapping(\&collectversions_kernel);

die "*** something failed:\n\n".(join "\n\n",@probs)."\n** something failed"
    if @probs;

divide();
stash();
checkversions();
