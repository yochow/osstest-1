#!/usr/bin/tclsh8.4
# -*- Tcl -*- 
# usage: ./ms-queuedaemon  ... | logger

# This is part of "osstest", an automated testing framework for Xen.
# Copyright (C) 2009-2013 Citrix Inc.
# 
# This program is free software: you can redistribute it and/or modify
# it under the terms of the GNU Affero General Public License as published by
# the Free Software Foundation, either version 3 of the License, or
# (at your option) any later version.
# 
# This program is distributed in the hope that it will be useful,
# but WITHOUT ANY WARRANTY; without even the implied warranty of
# MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the
# GNU Affero General Public License for more details.
# 
# You should have received a copy of the GNU Affero General Public License
# along with this program.  If not, see <http://www.gnu.org/licenses/>.


source ./tcl/daemonlib.tcl


proc chan-destroy-stuff {chan} {
    dequeue-chan $chan destroy
    upvar #0 chan-info/$chan info
    catch { unset info }
}

proc dequeue-chan {chan why} {
    log-event "dequeue-chan $chan $why"

    global queue queue_running thinking
    lremove queue $chan

    if {[info exists queue_running]} { lremove queue_running $chan }
    if {[info exists thinking] &&
        ![string compare $thinking $chan]} {
        queuerun-step-done $why
    }
}

#---------- debug tracing for queues ----------

proc log-event {m} {
    global log_state_after
    log-state $m
    if {![info exists log_state_after]} {
        set log_state_after [after idle {
            unset log_state_after
            log-state idle
        }]
    }
}

proc log-state {m} {
    global need_queue_run queue queue_running thinking

    set lhs [format "N=%d Q=%d (%-11.11s) " \
                 $need_queue_run [llength $queue] $queue]

    if {[info exists queue_running]} {
        append lhs [format "R=%d " [llength $queue_running]]
        if {[info exists thinking]} {
            append lhs [format "T=%s " $thinking]
        } else {
            append lhs [format "        "]
        }
        append lhs [format "(%-11.11s) " $queue_running]
    } else {
        append lhs "                          "
    }
    log "$lhs | $m"
}

#---------- machinery for making sure we run the queue ----------
#
# variables:
#   queue            chans that are waiting for resources
#   queue_running    unset if not running, list of chans if running
#   need_queue_run   0: not needed; 1: needed if more resources; 2: force

proc runneeded-ensure-will {need} {
    global runneeded_holdoff_after c need_queue_run
    log-event "runneeded-ensure-will $need (was $need_queue_run)"

    if {$need > $need_queue_run} { set need_queue_run $need }
    catch { after cancel $runneeded_holdoff_after }
    set runneeded_holdoff_after \
        [after [expr {$c(QueueDaemonHoldoff) * 1000}] \
             runneeded-perhaps-start]
}

proc runneeded-perhaps-start {} {
    log-event runneeded-perhaps-start
    global queue queue_running thinking need_queue_run inhibit
    global runneeded_holdoff_after
    unset runneeded_holdoff_after

    if {$inhibit} return
    if {[info exists queue_running]} return
    if {!$need_queue_run} return

    set needed $need_queue_run
    set need_queue_run 0

    if {![llength $queue]} {
        plan-reset
        report-plan
        return
    }

    jobdb::transaction resources {
        set nrows [pg_execute dbh {
            UPDATE resources
               SET owntaskid= (SELECT taskid FROM tasks
                               WHERE type='magic' AND refkey='allocatable')
         WHERE NOT (SELECT live FROM tasks WHERE taskid=owntaskid)
        }]
    }
    log "runneeded-perhaps-start allocable+=$nrows"

    if {!($nrows || $needed>=2)} return

    jobdb::transaction resources {
        set cleaned [pg_execute dbh {
            DELETE FROM tasks
             WHERE type='ownd'
               AND live='f'
               AND taskid + 10 <
                   (SELECT taskid FROM tasks
                     WHERE live='t' AND type='ownd'
                  ORDER BY taskid ASC
                     LIMIT 1)
        }]
    }
    log "runneeded-perhaps-start starting cleaned=$cleaned"

    runneeded-2-requeue
    queuerun-start
}

proc runneeded-ensure-polling {} {
    log-event runneeded-ensure-polling
    global polling_after queue c

    if {[info exists polling_after]} return
    if {![llength $queue]} return

    set polling_after [after [expr {$c(QueueResourcePollInterval)*1000}] \
                           runneeded-poll-now]
}

proc runneeded-poll-now {} {
    log-event runneeded-poll-now
    global polling_after
    unset polling_after
    runneeded-ensure-will 1
    runneeded-ensure-polling
}

proc runneeded-2-poll {} {
    log-event runneeded-2-poll
    global polling2_after
    unset polling2_after
    runneeded-ensure-will 2
    runneeded-2-requeue
}
proc runneeded-2-requeue {} {
    # (re)schedules forced queue run to QueuePlanUpdateInterval from now
    log-event runneeded-2-queue
    global c polling2_after
    catch { after cancel $polling2_after }
    set polling2_after [after [expr {$c(QueuePlanUpdateInterval)*1000}] \
                            runneeded-2-poll]
}

#---------- machinery for running the queue ----------
#
# variables:
#    queue             chans waiting, read when we start
#    queue_running     chans not yet asked
#    thinking          chan currently asking
#    thinking_after    timeout

proc plan-reset {} {
    exec ./ms-planner reset < /dev/null
}

proc queuerun-start {} {
    log-event queuerun-start
    global queue_running queue
    plan-reset
    set queue_running $queue
    after idle queuerun-perhaps-step
}

proc queuerun-perhaps-step {} {
    log-event queuerun-perhaps-step
    global thinking queue_running thinking_after c

    if {[info exists thinking]} return
    if {![info exists queue_running]} return

    if {![llength $queue_running]} {
        unset queue_running
        runneeded-ensure-will 0
        report-plan
        return
    }

    set thinking [lindex $queue_running 0]
    set queue_running [lrange $queue_running 1 end]
    log-event "queuerun-perhaps-step selected"

    set thinking_after [after [expr {$c(QueueThoughtsTimeout) * 1000}] \
                            queue-thoughts-timedout]
    for-chan $thinking {
        puts-chan $thinking "!OK think"
    }
}

proc report-plan {} {
    global c
    if {[catch {
        exec ./ms-planner show-html > "$c(WebspaceFile)/resource-plan.html"
    } emsg]} {
        log "INTERNAL ERROR showing plan html: $emsg"
    } else {
        log "report-plan OK"
    }
}

proc we-are-thinking {chan} {
    global thinking
    return [expr {[info exists thinking] && ![string compare $thinking $chan]}]
}

proc check-we-are-thinking {chan} {
    if {![we-are-thinking $chan]} {
        puts-chan $chan "ERROR you are not thinking"
        return -code return
    }
}

proc queuerun-step-done {why} {
    log-event "queuerun-step-done $why"
    global queue_running thinking thinking_after
    puts-chan-desc $thinking "queuerun-step-done $thinking $why"
    if {[info exists thinking_after]} {
        after cancel $thinking_after
        unset thinking_after
    }
    unset thinking
    after idle queuerun-perhaps-step
}

proc queue-thoughts-timedout {} {
    log-event queue-thoughts-timedout
    global thinking thinking_after
    set chan $thinking
    unset thinking_after
    queuerun-step-done timeout
    for-chan $chan {
        puts-chan $chan "!ERROR timed out (too pensive)"
    }
}

proc cmd/thought-wait {chan desc} {
    check-we-are-thinking $chan
    queuerun-step-done thought-wait
    puts-chan $chan "OK thought"
}

proc cmd/thought-done {chan desc} {
    check-we-are-thinking $chan
    queuerun-step-done thought-done
    dequeue-chan $chan thought-wait
    puts-chan $chan "OK thought"
}

proc cmd/get-plan {chan desc} {
    global plan
    set plan [exec -keepnewline ./ms-planner get-plan < /dev/null]
    puts-chan-data $chan "OK get-plan" $plan
}

proc cmd/book-resources {chan desc bytes} {
    check-we-are-thinking $chan
    read-chan-data $chan $bytes do-book-resources
}
proc do-book-resources {chan desc data} {
    global plan errorInfo
    check-we-are-thinking $chan
    set info [chan-get-info $chan {"$info(preinfo) "} ""]
    append info [chan-get-info $chan {"job $info(job)"} $desc]
    if {[catch {
	exec ./ms-planner book-resources $info << $data
    } emsg]} {
	set f [exec ./ms-planner-debug $info $data $plan]
	error "$f $emsg" $errorInfo
    }
    puts-chan $chan "OK book-resources"
}

proc cmd/unwait {chan desc} {
    if {[we-are-thinking $chan]} {
        queuerun-step-done unwait
        set res cancel
    } else {
        set res noop
    }
    dequeue-chan $chan "unwait $res"
    puts-chan $chan "OK unwait $res"
}

#---------- general stuff ----------

proc banner {chan} {
    return "OK ms-queuedaemon"
}

proc cmd/set-info {chan desc var val} {
    upvar #0 chan-info/$chan info
    set info($var) $val
    puts-chan $chan "OK set-info"
}
proc cmd/unset-info {chan desc var} {
    upvar #0 chan-info/$chan info
    catch { unset info($var) }
    puts-chan $chan "OK unset-info"
}

proc cmd/time {chan desc} {
    puts-chan $chan "OK time [clock seconds]"
}

proc chan-get-info {chan expr default} {
    upvar #0 chan-info/$chan info
    set val $default
    catch { set val [expr $expr] }
    return $val
}

proc cmd/wait {chan desc} {
    global queue need_queue_run
    lappend queue $chan

    upvar #0 chan-info/$chan info
    set "info(wait-start use)" [chan-get-info $chan {int($info(wait-start))} \
                                    [clock seconds]]

    set sortq {}
    foreach chan $queue { lappend sortq [list [chan-order-key $chan] $chan] }
    set sortq [lsort $sortq]
    set queue {}
    foreach item $sortq { log "QI $item"; lappend queue [lindex $item 1] }

    puts-chan $chan "OK wait"
    runneeded-ensure-polling
    runneeded-ensure-will 2
}

proc chans-compare-ordering {ca cb} {
    return [string compare [chan-ordering-key $cb] - [chan-ordering-key $ca]]
}
proc chan-order-key {chan} {
    upvar #0 chan-info/$chan info

    set priority [chan-get-info $chan {int($info(priority))} 0]
    set subpriority [chan-get-info $chan {int($info(sub-priority))} 0]

    set waitstart "$info(wait-start use)"
    incr waitstart [chan-get-info $chan {int($info(wait-start-adjust))} 0]

    #puts stderr "priority $chan $priority $emsg"
    return [format "%011d.%011d.%011d" \
                [expr {$priority+1000000000}] \
                [expr {$subpriority+1000000000}] \
                $waitstart]
}

proc cmd/prod {chan desc} {
    puts-chan $chan "OK prod"
    runneeded-ensure-will 2
}

proc cmd/inhibit {chan desc seconds why} {
    set seconds [expr {int($seconds)}]
    if {$seconds > 1000} { set seconds 1000 }
    add-inhibit "$desc $why" $seconds
    puts-chan $chan "OK inhibit $seconds"
}

proc cmd/uninhibit {chan desc} {
    global inhibit
    set was $inhibit
    set inhibit 0
    log "inhibition admin cancel!"
    runneeded-ensure-will 2
    puts-chan $chan "OK uninhibit $was"
}

proc cmd/uptime {chan desc seconds} {
    set before [expr {[clock seconds] - $seconds}]
    set descpat "[regsub {\:\d+$} $desc {:%}]"
    transaction resources {
        set keys {}
        pg_execute -array task dbh "
            SELECT * FROM tasks
                    WHERE type = 'ownd'
                      AND ( refkey LIKE [pg_quote $descpat]
                         OR refkey LIKE ('previous ' || [pg_quote $descpat]) )
                      AND live
                      AND refinfo IS NOT NULL
        " {
            set id "$task(taskid) $task(type) $task(refkey) $task(refinfo)"
            if {[catch { set refinfo [expr {int($task(refinfo))}] } emsg]} {
                puts-chan $chan "!WARNING uptime bad-refinfo $id"
                continue
            }
            if {$refinfo > $before} continue
            pg_execute dbh "
                UPDATE tasks
                   SET live = false,
                       refinfo = refinfo || ' stale'
                 WHERE taskid = $task(taskid)
            "
            puts-chan $chan "!OK uptime killed $id"
        }
    }
    puts-chan $chan "OK uptime"
}

proc bgerror {emsg} {
    global errorInfo errorCode
    puts stderr "****ERROR***\n$errorCode\n$emsg\n==========\n$errorInfo\n"
    exit 1
}

proc await-endings-notified {} {
    global owndchan
    while {[gets $owndchan l] > 0} {
        puts-chan-desc $owndchan "<< $l"
        if {![regexp {^!OK await-endings notify} $l]} {
            error "unexpected $l ?"
        }
        if {[eof $owndchan]} {
            error "$owndchan eof"
        }
        runneeded-ensure-will 2
    }
}

proc end-inhibit {why} {
    global inhibit
    incr inhibit -1
    log "inhibition $why: over, now $inhibit"
    if {$inhibit<=0} {
        set inhibit 0
        runneeded-ensure-will 2
    }
}    

proc add-inhibit {why seconds} {
    global inhibit
    after [expr {$seconds * 1000}] [list end-inhibit $why]
    incr inhibit
    log "inhibition $why: starts, ${seconds}s, now $inhibit"
}

main-daemon Queue {
    global owndchan chandesc inhibit plan
    
    jobdb::db-open

    set plan {}
    set queue {}
    set need_queue_run 0
    set inhibit 0

    log-state main-daemon
    # 1: run queue only if new resources available
    # 2: definitely run queue

    set owndchan [socket $c(OwnerDaemonHost) $c(OwnerDaemonPort)]
    fconfigure $owndchan -buffering line -translation lf
    set chandesc($owndchan) ownd
    
    must-gets-chan $owndchan {^OK ms-ownerdaemon}
    puts-chan $owndchan await-endings
    must-gets-chan $owndchan {^OK await-endings}

    fconfigure $owndchan -blocking false
    fileevent $owndchan readable await-endings-notified

    add-inhibit startdelay [expr {$c(QueueDaemonRetry) * 2}]

    runneeded-2-requeue
}
