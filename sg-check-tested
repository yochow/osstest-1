#!/usr/bin/perl -w

# This is part of "osstest", an automated testing framework for Xen.
# Copyright (C) 2009-2013 Citrix Inc.
# 
# This program is free software: you can redistribute it and/or modify
# it under the terms of the GNU Affero General Public License as published by
# the Free Software Foundation, either version 3 of the License, or
# (at your option) any later version.
# 
# This program is distributed in the hope that it will be useful,
# but WITHOUT ANY WARRANTY; without even the implied warranty of
# MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the
# GNU Affero General Public License for more details.
# 
# You should have received a copy of the GNU Affero General Public License
# along with this program.  If not, see <http://www.gnu.org/licenses/>.


use DBI;
use Osstest;

our @conds;
our @conds_vars;
our $prrev;

open DEBUG, ">/dev/null" or die $!;

while (@ARGV && $ARGV[0] =~ m/^-/) {
    $_= shift @ARGV;
    last if m/^--?$/;
    if (m/^--revision-osstest\=([^=]+)$/) {
	push @conds_vars, "$1";
        push @conds, <<END, <<END;
             NOT EXISTS
             (SELECT *
               FROM flights_harness_touched t
               WHERE harness != ?
               AND   t.flight = flights.flight)
END
             EXISTS
             (SELECT *
               FROM flights_harness_touched t
               WHERE t.flight = flights.flight)
END
    } elsif (m/^--revision-([^=]+)\=([^=]+)$/) {
        push @conds_vars, "revision_$1", "built_revision_$1",
	                  $2, "\%:$2",
	                  "built_revision_$1";
        push @conds, <<END, <<END;
             NOT EXISTS
             (SELECT *
               FROM runvars r
               WHERE (name = ? OR name = ?)
               AND   val != ''
               AND   NOT (val = ? OR val LIKE ?)
               AND   r.flight = flights.flight)
END
             EXISTS
             (SELECT *
               FROM runvars r
               WHERE name = ?
               AND   r.flight = flights.flight
               AND   val != '')
END
    } elsif (m/^--branch=(.*)$/) {
        push @conds_vars, $1;
        push @conds, "branch = ?";
    } elsif (m/^--blessings=(.*)$/) {
        my @blessings= split /\,/, $1;
        push @conds_vars, @blessings;
        push @conds, "(". (join " OR ", map { "blessing=?" } @blessings). ")";
    } elsif (m/^--print-revision=(.*)$/) {
        die if $prrev;
        $prrev= $1;
    } elsif (m/^--debug$/) {
        open DEBUG, ">&2" or die $!;
    } else {
        die "$_ ?";
    }
}

die if @ARGV;
die unless @conds;

csreadconfig();

s/^\S/             $&/ foreach @conds;

my $qtxt= <<END. (join <<END, @conds). <<END. (defined $prrev ? '' : <<END);
       SELECT *
        FROM  flights
        WHERE
END

        AND
END

        ORDER BY flight DESC
END
        LIMIT 1
END

sub prepare_execute ($@) {
    my ($qtxt, @vars) = @_;
    print DEBUG "\n==========\n", $qtxt,
                "\n----------\n", (join ' | ', @vars),
                "\n==========\n";
    my $q= $dbh_tests->prepare($qtxt);
    $q->execute(@vars);
    return $q;
}

my $q = prepare_execute($qtxt, @conds_vars);

while (my $row= $q->fetchrow_hashref()) {
    my $flight= $row->{flight};
    if (!defined $prrev) {
	print DEBUG "==========YES\n";
        print $flight,"\n" or die $!;
        exit 0;
    } else {
	my $valsq;
	if ($prrev eq 'osstest') {
	    $valsq= prepare_execute(<<END, $flight);
                SELECT DISTINCT harness AS val
                  FROM flights_harness_touched
                 WHERE flight=?
END
	} else {
            $valsq= prepare_execute(<<END,
		SELECT DISTINCT val
		  FROM runvars
		 WHERE flight=?
		 AND   (name=? OR name=?)
END
                                   $flight,
                                   "revision_$prrev",
                                   "built_revision_$prrev");
	}
        my $row1= $valsq->fetchrow_hashref();
        next unless defined $row1->{val} && length $row1->{val};
        print DEBUG "got $row1->{val}\n";
        my $row2= $valsq->fetchrow_hashref();
        next if defined $row2;
        print "$row1->{val}\n";
        exit 0;
    }
}

print DEBUG "==========NO\n";
exit 0;
