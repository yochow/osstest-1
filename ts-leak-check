#!/usr/bin/perl -w
# This is part of "osstest", an automated testing framework for Xen.
# Copyright (C) 2009-2013 Citrix Inc.
# 
# This program is free software: you can redistribute it and/or modify
# it under the terms of the GNU Affero General Public License as published by
# the Free Software Foundation, either version 3 of the License, or
# (at your option) any later version.
# 
# This program is distributed in the hope that it will be useful,
# but WITHOUT ANY WARRANTY; without even the implied warranty of
# MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the
# GNU Affero General Public License for more details.
# 
# You should have received a copy of the GNU Affero General Public License
# along with this program.  If not, see <http://www.gnu.org/licenses/>.

use strict qw(vars);
use DBI;
use Osstest;
use Osstest::TestSupport;

tsreadconfig();

our ($mode, $whhost) = @ARGV;
our $ho= selecthost($whhost);

die unless grep { $mode eq $_ } qw(print basis check);

sub start_print () { open STDOUT, "|cat -v" or die $!; }
sub item_print {
    my ($type, $key, $val) = @_;
    printf "%-10s %-40s %s\n", $type, $key, $val;
}    
sub finish_print () { close STDOUT or die "$! $?"; }

our $leaks=0;
our $statefh;

my $basisf= "$stash/leak-basis-$ho->{Name}";

sub start_basis () { $statefh= new IO::File "> $basisf" or die $!; }
sub item_basis {
    my ($type, $key, $val) = @_;
    printf $statefh "%s %d\n", $type, length($key) or die $!;
    print $statefh $key or die $!;
    printf $statefh "\n%s\n", $val or die $!;
}
sub finish_basis () {
    print $statefh ".\n" or die $!;
    close $statefh or die $!;
}

our %ok;
our @suppress;

sub start_check () {
    $statefh= new IO::File "< $basisf" or die $!;
    for (;;) {
        $!=0;  $_= <$statefh>;  defined or die $!;
        last if m/^\.$/;
        my ($type, $keylen) = m/^(\w+) (\d+)$/ or die "$_ ?";
        my ($key, $dummy, $val);
        $!=0;  read($statefh, $key, $keylen) == $keylen or die $!;
        read($statefh, $dummy, 1) == 1 or die $!;
        $dummy eq "\n" or die "$dummy ?";
        $!=0; $val= <$statefh>;  defined $val or die $!;
        chomp($val) or die "$val ?";

        $ok{"$type $key"}= 1;
    }
    $statefh->error and die $!;
    close $statefh or die $!;

    while (<DATA>) {
        chomp; s/^\s+//; s/\s+$//;
        next if m/^\#/;
        next unless m/\S/;
        die unless m/^\w+ \S.*/;
        push @suppress, $&;
    }

    my $leaf= "leak-current-$ho->{Name}";
    $statefh= open_unique_stashfile(\$leaf);
}
sub item_check {
    my ($type, $key, $val, $leakcheck) = @_;
    item_basis(@_);
    my $itemid= "$type $key";
    return if $ok{$itemid};
    return if grep { $itemid =~ m/^$_$/ } @suppress;
    return if !$leakcheck;
    logm("LEAKED [$itemid] $type: $val");
    $leaks++;
}
sub finish_check () {
    finish_basis();
}

sub item ($$$$) {
    &{ "item_$mode" }(@_);
}

sub inventory_xenstore () {
    my $xs= target_cmd_output_root($ho, "xenstore-ls -fp");
    foreach (split /\n/, $xs) {
        next unless m/\S/;
        m,^(/[^ =]+) \= , or die "$_ ?";
        item('xenstore', $1, $_, 1);
    }
}

sub inventory_processes () {
    my %procs;
    foreach my $iter (qw(0 1)) {
        my $procs= target_cmd_output_root($ho, "ps -wwef");
        $procs =~ s/^UID.*\n// or die "$procs ?";
        foreach (split /\n/, $procs) {
            m/^\S+\s+(\S+)\s+\S+\s+\S+\s+\S+\s+\S+\s+\S+\s+(\S+)/
                or die "$_ ?";
            push @{ $procs{"$1 $2"} }, $_;
        }
    }
    while (my ($key, $vals) = each %procs) {
        next unless @$vals==2;
        $key =~ m/^\d+ / or die "$key ?";
        $_= $'; #';
        my $suppress= (m/^\[\S+\]$/ ||
                       $_ eq '/sbin/getty');
        item('process', $key, $vals->[1], !$suppress);
    }
}

sub inventory_files ($) {
    my ($dir) = @_;
    my $files= target_cmd_output_root($ho,
               "find $dir ! -type d -print0 -ls -printf '\\0'");
    my @files= split /\0/, $files;
    my ($path, $val);
    while (@files) {
        ($path, $val, @files) = @files;
        chomp($val);
        item('file', $path, $val, 1);
    }
}

sub inventory_domains () {
    my $doms= target_cmd_output_root($ho, "xl list");
    $doms =~ s/^name\s.*\n//mi or die "$doms ?";
    foreach (split /\n/, $doms) {
        m, (\d+) +\S+ +\S+ +\S+ +\S+\s*$, or die "$_ ?";
        item('domain', $1, $_, 1);
    }
}

sub inventory () {
    inventory_domains();
    inventory_processes();
    inventory_xenstore();
    inventory_files('/tmp /var/run /var/tmp /var/lib/xen');
}

if (!eval {
    &{ "start_$mode" }();
    inventory();
    &{ "finish_$mode" }();
    1;
}) {
    broken("listing/checking leakable objects: $@");
}

fail("$leaks leaked object(s)") if $leaks;

__DATA__

xenstore /local/domain/0/device-model
xenstore /local/domain/0/backend
xenstore /local/domain/0/backend/vbd
xenstore /local/domain/0/backend/vif
xenstore /local/domain/0/backend/console

xenstore /local/domain/0/memory
xenstore /local/domain/0/memory/target
xenstore /local/domain/0/memory/static-max
xenstore /local/domain/0/memory/freemem-slack

xenstore /local/domain/0/libxl
xenstore /local/domain/0/libxl/disable_udev

xenstore /vm

xenstore /libxl

process .* udevd

file /var/run/xenstored/db
file /var/run/xenstored/db.debug
