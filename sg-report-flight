#!/usr/bin/perl -w

use strict qw(refs vars);

use DBI;
use Osstest;

@ARGV==1 or die;
my ($specflight)= @ARGV;

csreadconfig();

# formatting settings
our $jl= 30;
our $sl= 30;
our $rl= 9;
our $cw= 75;

sub examineflight ($) {
    my ($flight) = @_;
    my @jobtexts;
    my %fails;
    my %statuscounts;
    my $jobsummary= '';
    
    my $flightinfo= $dbh_tests->selectrow_hashref(<<END);
        SELECT * FROM flights
            WHERE flight=$flight
END

    my $jobs= $dbh_tests->selectall_arrayref(<<END, { Slice => {} });
        SELECT * FROM jobs
            WHERE flight=$flight
            ORDER BY job
END

    foreach my $j (@$jobs) {
	$statuscounts{$j->{status}}++;

	my $jobtext= sprintf "%s:\n", $j->{job};

	my $sth= $dbh_tests->prepare(<<END);
	    SELECT * FROM steps
		WHERE flight=$flight AND job='$j->{job}'
		ORDER BY stepno
END
        $sth->execute();

        $jobsummary .= sprintf " %-${jl}s %-${rl}s\n", $j->{job}, $j->{status};

	while (my $s= $sth->fetchrow_hashref()) {
	    $jobtext .= sprintf "%2d %-${sl}s %-${rl}s\n",
	        $s->{stepno}, $s->{testid}, $s->{status};
            if ($s->{status} ne 'pass') {
                my $failkey= "$j->{job}.$s->{testid}";
                my $failval= {
                    Job => $j,
                    Step => $s
                };
                $fails{$failkey}= $failval;
            }
	}

        my $revh= $dbh_tests->prepare(<<END);
            SELECT * FROM runvars
                WHERE flight=$flight AND job='$j->{job}'
                  AND name like 'built_revision_%'
                ORDER BY name
END
        $revh->execute();
        while (my $r= $revh->fetchrow_hashref()) {
            my $br= $r->{name};
            $br =~ s/^built_revision_// or die "$br ?";
            $jobtext .= sprintf " %-15s %-.20s\n", $br, $r->{val};
        }

	push @jobtexts, [ split /\n/, $jobtext ];
    }

    my $outcomes= join '/', sort keys %statuscounts;
    my $outcome;
    if ($outcomes eq 'pass') {
        $outcome= 'all pass';
    } elsif ($outcomes eq 'fail') {
        $outcome= 'ALL FAIL';
    } elsif ($outcomes =~ m,^(?:blocked/)?(?:fail/)?pass$,) {
        $outcome= 'FAIL';
    } else {
        $outcome= "trouble: $outcomes";
    }

    return {
        Flight => $flight,
        FlightInfo => $flightinfo,
        JobTexts => \@jobtexts,
        Failures => \%fails,
        StatusCounts => \%statuscounts,
        OutcomeSummary => $outcome,
        JobsSummary => $jobsummary,
    };
}

sub printout ($) {
    my ($r) = @_;
    print <<END
oss xen test $r->{Flight}: $r->{OutcomeSummary}

flight $r->{Flight} $r->{FlightInfo}{blessing}

tests which did not succeed:
END
        or die $!;
    foreach my $failk (sort keys %{ $r->{Failures} }) {
        my $s= $r->{Failures}{$failk}{Step};
        my $j= $r->{Failures}{$failk}{Job};
        my $text= (sprintf" %-${jl}s %2d %-${sl}s %s",
                   $j->{job}, $s->{stepno}, $s->{testid}, $s->{status});
        print $text, "\n";
    }

    print "\njobs:\n", $r->{JobsSummary}, "\n" or die $!;

    foreach my $jt (@{ $r->{JobTexts} }) {
	print '-'x$cw or die $!;
        print "\n" or die $!;
        print join "\n", @$jt or die $!;
        print "\n" or die $!;
    }

    my $hostname= `hostname -f`;
    $? and die $?;  chomp $hostname;

    my $logs= $c{Logs};

    print <<END or die $!;

------------------------------------------------------------
sg-report-flight on $hostname
logs: $logs
stash: $c{Stash}
images: $c{Images}

$c{ReportTrailer}
END
}

my $fi= examineflight($specflight);
printout($fi);
