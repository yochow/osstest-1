#!/usr/bin/perl -w
#
# args:
#   <flight> <job> <recipe> <runvar>=<value> ...
#
# If <runvar> ends in ~, the ~ is stripped and the runvar is marked
# `synth'.  (Normally runvars marked `synth' are defined during test
# execution.  They are not taken as part of the runvar set copied
# when cloning flights, eg for bisection.)

# This is part of "osstest", an automated testing framework for Xen.
# Copyright (C) 2009-2013 Citrix Inc.
# 
# This program is free software: you can redistribute it and/or modify
# it under the terms of the GNU Affero General Public License as published by
# the Free Software Foundation, either version 3 of the License, or
# (at your option) any later version.
# 
# This program is distributed in the hope that it will be useful,
# but WITHOUT ANY WARRANTY; without even the implied warranty of
# MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the
# GNU Affero General Public License for more details.
# 
# You should have received a copy of the GNU Affero General Public License
# along with this program.  If not, see <http://www.gnu.org/licenses/>.


use strict qw(vars);
use DBI;
use Osstest;

csreadconfig();

die unless @ARGV >= 2;
my ($flight,$job,$recipe,@runvars) = @ARGV;

my $jobsonly= $ENV{OSSTEST_JOBS_ONLY};

exit 0 if grep { $_ eq 'disable' } @runvars;
exit 0 if defined($jobsonly) &&
    !grep { $job =~ m/^$_$/ } split /[:,]/, $jobsonly;

$dbh_tests->
    selectrow_arrayref("SELECT * FROM flights where flight=?", {}, $flight)
    or die "$flight ?";

our %runvars;
our %suppress;

foreach my $rv (@runvars) {
    if ($rv =~ m/^\!([a-z][0-9a-z_]*)$/) {
        $suppress{$1}= 1;
        next;
    }
    $rv =~ m/^([a-z][0-9a-z_]*)(\~?)\=(.*)$/ or die "$rv ?";
    my ($name,$synth,$val) = ($1,$2,$3);
    $runvars{$name}= [$val,$synth];
}

foreach my $name (keys %suppress) {
    delete $runvars{$name};
}

db_retry($flight,'constructing', $dbh_tests,[qw(flights)], sub {
    $dbh_tests->do(<<END, {}, $flight);
        INSERT INTO jobs VALUES (?,'$job','$recipe','queued')
END
    my $q= $dbh_tests->
        prepare("INSERT INTO runvars VALUES (?,'$job',?,?,?)");
    foreach my $name (keys %runvars) {
        $q->execute($flight, $name, $runvars{$name}[0],
	            $runvars{$name}[1] ? 't' : 'f');
        $q->finish();
    }
});
