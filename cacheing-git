#!/bin/bash
set -e

: ${CACHEING_GIT_CACHE:=/volatile/git-cache}

if ! test -x "$0"; then
        echo >&2 "myself is $0 but not executable ?"
        exit 127
fi

for git in `type -pa git`; do
        if [ -x "$git" ] && ! cmp $git "$0" >/dev/null; then
                REAL_GIT=$git
                break
        fi
done

if [ "x$REAL_GIT" = x ]; then
        echo >&2 "$0: did not find git that wasn't me"
        exit 127
fi

case "$1" in
clone)
	;;
*)
	echo >&2 "running $REAL_GIT $@..."
	exec $REAL_GIT "$@" ;;
esac

echo >&2 "using cache $CACHEING_GIT_CACHE..."

if ! test -d "${CACHEING_GIT_CACHE}"; then
	mkdir "${CACHEING_GIT_CACHE}"
	echo >&2 'cache directory ($CACHEING_GIT_CACHE) does not exist'
	exit 127
fi

if [ "x$CACHEING_GIT_CACHE_LOCKED" != "x$CACHEING_GIT_CACHE" ]; then
	export CACHEING_GIT_CACHE_LOCKED="$CACHEING_GIT_CACHE"
	exec with-lock-ex -w "$CACHEING_GIT_CACHE/lock" "$0" "$@"
fi

echo >&2 "locked cache $CACHEING_GIT_CACHE..."

if ! test -f "$CACHEING_GIT_CACHE"/ok; then
	echo >&2 "initialising cache $CACHEING_GIT_CACHE..."
	rm -rf "$CACHEING_GIT_CACHE"/.git
	(cd "$CACHEING_GIT_CACHE"; git-init-db --shared)
	test $? = 0
	touch "$CACHEING_GIT_CACHE"/ok
fi

subcmd="$1"; shift

case "$subcmd" in
clone)
	echo >&2 "processing $0 $subcmd $@..."
        $REAL_GIT "$subcmd" --reference $CACHEING_GIT_CACHE "$@"

	while [ $# -gt 1 ]; do shift; done
	if ! test -d "$1"; then
		echo >&2 \
 "not updating cache; last arg \`$1' seems not to be dest dir"
		exit 0
	fi
	relevant="$1"
        cacheid=`basename "$1"`
	;;
*)
	echo >&2 "$0: internal error $1"
	exit 1
	;;
esac

echo >&2 "updating cache $CACHEING_GIT_CACHE $cacheid..."

mkdir_p () {
        if test -d "$1"; then return; fi
        mkdir "$1"
}

cache="$CACHEING_GIT_CACHE"/.git

mkdir_p "$cache"/refs
mkdir_p "$cache"/refs/caches
mkdir_p "$cache"/refs/caches/"$cacheid"

if test -d "$relevant"/.git; then
        gitdir="$relevant"/.git
else
        # copes with clone --bare
        gitdir="$relevant"
fi

${RSYNC-rsync} -r "$gitdir"/objects/. "$cache"/objects/.
${RSYNC-rsync} --exclude=HEAD \
               -r "$gitdir"/refs/.    "$cache"/refs/caches/"$cacheid"/.
