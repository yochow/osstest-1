#!/usr/bin/tclsh8.4
# -*- Tcl -*- 
# usage: ./sg-run-builds <flight>

source osstestlib.tcl

readconfig

proc main {} {
    global flight jobinfo builds anyfailed argv

    set-flight
    db-open
    become-task "$flight $argv"
    
    set builds {}

    set to_run {}
    pg_execute -array jobinfo dbh "
        SELECT job, recipe FROM jobs
			WHERE	flight=$flight
			AND	job like 'build%'
			AND   ( status = 'queued'
			  OR	status = 'preparing'
			  OR	status = 'retriable' )
                        [specific-job-constraint]
		ORDER BY job
    " {
        lappend to_run [list $jobinfo(job) $jobinfo(recipe)]
    }

    foreach jobitem $to_run {
        lassign $jobitem jobinfo(job) jobinfo(recipe)
        perhaps-start-job
    }

    set anyfailed 0
    foreach reap $builds {
	set job [lindex $reap 0]
        if {![reap-ts [lindex $reap 1] 1]} {
            set anyfailed 1
	    job-set-status $flight $job fail
	} else {
	    job-set-status $flight $job pass
        }
        db-close
    }

    if {$anyfailed} {
        logputs stderr "at least one build failed"
    }
}

proc prepare-host {} {
    global prepared jobinfo
    if {[info exists prepared]} return

    run-ts broken = ts-hosts-allocate + host
    run-ts broken host-install(*) ts-host-install-twice
    run-ts . host-build-prep ts-xen-build-prep

    set prepared 1
}

proc perhaps-start-job {} {
    global jobinfo c builds flight doingarch

    pg_execute -array archinfo dbh "
        SELECT * FROM runvars
            WHERE flight=$flight AND job='$jobinfo(job)' AND name='arch'
    "
    if {[info exists doingarch]} {
        if {[string compare $doingarch $archinfo(val)]} {
	    logputs stdout "skipping $jobinfo(job) (arch $doingarch)"
	    return
	}
    }

    if {![prepare-job $jobinfo(job)]} return

    if {![info exists doingarch]} {
        logputs stdout "selected arch $archinfo(val)"
        set doingarch $archinfo(val)
    }

    setstatus preparing
    if {[catch {
        prepare-host
    } emsg]} {
        global errorInfo errorCode
        set ei $errorInfo
        set ec $errorCode
        run-ts broken * ts-logs-capture
        setstatus broken
        return
    }

    setstatus running
    lappend builds [list $jobinfo(job) [spawn-job/$jobinfo(recipe)]]
}

proc spawn-job/build {} {
    return [spawn-ts . = ts-xen-build]
}
proc spawn-job/build-kern {} {
    return [spawn-ts . = ts-kernel-build]
}

main
