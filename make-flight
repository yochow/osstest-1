#!/bin/bash

# This is part of "osstest", an automated testing framework for Xen.
# Copyright (C) 2009-2013 Citrix Inc.
# 
# This program is free software: you can redistribute it and/or modify
# it under the terms of the GNU Affero General Public License as published by
# the Free Software Foundation, either version 3 of the License, or
# (at your option) any later version.
# 
# This program is distributed in the hope that it will be useful,
# but WITHOUT ANY WARRANTY; without even the implied warranty of
# MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the
# GNU Affero General Public License for more details.
# 
# You should have received a copy of the GNU Affero General Public License
# along with this program.  If not, see <http://www.gnu.org/licenses/>.


set -e -o posix

branch=$1
xenbranch=$2
blessing=$3
buildflight=$4

flight=`./cs-flight-create $blessing $branch`

. ./cri-common
. ./cri-getplatforms
. ./ap-common
. ./mfi-common

defsuite=`getconfig DebianSuite`
defguestsuite=`getconfig GuestDebianSuite`

case "$branch" in
xen-unstable-smoke)
	global_runvars+=" hostalloc_maxbonus_variation~=0 "
	global_runvars+=" hostalloc_bonus_previousfail~=0 "
        ;;
esac

job_create_build_filter_callback () {
  local job=$1; shift
  case "$branch" in
    xen-unstable-smoke)
      case "$job" in
        build-amd64)		;;
        build-amd64-pvops)	;;
        build-amd64-libvirt)	;;
        build-armhf)		;;
        build-armhf-pvops)	;;
        *)			return 1 ;;
      esac
    ;;
  esac
  return 0
}

job_create_test_filter_callback () {
  local job=$1; shift
  local recipe=$1; shift
  local toolstack=$1; shift
  local xenarch=$1; shift
  local dom0arch=$1; shift

  case "$branch" in
    xen-unstable-smoke)
      case "$job" in
        test-amd64-amd64-libvirt)                  return 0 ;;
        test-armhf-armhf-xl)                       return 0 ;;
        test-amd64-amd64-xl-qemuu-debianhvm-i386)  return 0 ;;
        *)                                         return 1 ;;
      esac
      ;;
    qemu-upstream-4.2-testing)
      case " $* " in
        *" device_model_version=qemu-xen "*)
          ;;
        *)
          : "suppressed $job"
          return 1;;
      esac
      ;;
    libvirt)
      if [ x$toolstack != xlibvirt ] ; then return 1; fi
      ;;
    rumpuserxen)
      case "$job" in
      *-rumpuserxen-*)
          ;;
      *)
          : "suppressed $job"
          return 1;;
      esac
      ;;
    seabios)
      case $xenarch in
          amd64|i386) ;;
          *) return 1;;
      esac
      case $job in
          *-qemuu-*) ;;
          *) return 1;;
      esac
      ;;
    ovmf)
      case $xenarch in
          amd64|i386) ;;
          *) return 1;;
      esac
      case $job in
          *-qemuu-*) ;;
          *) return 1;;
      esac
      case " $* " in
        *" bios=ovmf "*) ;;
        *) return 1;;
      esac
      ;;
    *)
      case "$job" in
        *-qemuu-*)
          if [ x$toolstack != xxl -a x$toolstack != xlibvirt ];then
              return 1;
          fi
          ;;
      esac
      ;;
  esac

  return 0;
}

test_matrix_branch_filter_callback () {
  case "$xenarch" in
  armhf)
        case "$branch" in
        linux-3.0) return 1;;
        linux-3.4) return 1;;
        linux-3.10) return 1;;
        linux-3.14) return 1;;
        linux-mingo-tip-master) return 1;;
        linux-*) ;;
        qemu-upstream-4.2-testing) return 1;;
        qemu-upstream-4.3-testing) return 1;;
        qemu-upstream-4.4-testing) return 1;;
        esac
        ;;
  i386|amd64)
        case "$branch" in
        linux-arm-xen) return 1;;
        esac
        ;;
  esac

  return 0
}

do_rumpkernel_tests () {
  branch_wants_rumpkernel_tests || return 0

  rumparch=$dom0arch
  job_create_test test-$xenarch$kern-$dom0arch-rumpuserxen-$rumparch \
                      test-rumpuserxen xl \
            $xenarch $dom0arch                                       \
            guests_rumpuserxenbuildjob=build-$rumparch-rumpuserxen   \
     rump_builtimage=rumpuserxen:/usr/local/lib/xen/rump-kernel/rump-kernel \
            rump_cmdline=3                                           \
            xenstorels_builtimage=:/usr/local/bin/xenstore           \
            xenstorels_cmdline='ls -fp device'                       \
            all_hostflags=$most_hostflags
}

do_freebsd_tests () {

  if [ $xenarch != amd64 -o $dom0arch != i386 -o "$kern" != "" ]; then
    return
  fi

  for freebsdarch in amd64 i386; do

 job_create_test test-$xenarch$kern-$dom0arch$qemuu_suffix-freebsd10-$freebsdarch \
                        test-freebsd xl $xenarch $dom0arch \
                        freebsd_arch=$freebsdarch \
 freebsd_image=${FREEBSD_IMAGE_PREFIX-FreeBSD-10.1-CUSTOM-}$freebsdarch${FREEBSD_IMAGE_SUFFIX--20150525.raw.xz} \
                        all_hostflags=$most_hostflags

  done
}

do_hvm_winxp_tests () {
  for vcpus in '' 1; do
    case "$vcpus" in
      '') vcpus_runvars=''; vcpus_suffix='' ;;
      *) vcpus_runvars=guests_vcpus=$vcpus; vcpus_suffix=-vcpus$vcpus ;;
    esac

    if [ "x$vcpus" != x ] && \
       [ "$xenarch$kern-$dom0arch" != "amd64-i386" ]; then
      continue
    fi

    if [ x$test_xend != xy ] ; then
      toolstack="xl"
    else
      toolstack=
    fi

    if [ x$toolstack = x ] ; then
      stripy toolstack xend xl \
            "$vcpus" 1 \
            "$kern" '' \
            "$xenarch" i386 \
            "$dom0arch" i386
    fi

    toolstack_runvars="toolstack=$toolstack"

    job_create_test \
            test-$xenarch$kern-$dom0arch-$toolstack$qemuu_suffix-winxpsp3$vcpus_suffix \
            test-win $toolstack $xenarch $dom0arch $qemuu_runvar \
            win_image=winxpsp3.iso $vcpus_runvars   \
            win_acpi_shutdown=true \
            all_hostflags=$most_hostflags,hvm

  done
}

do_hvm_win7_x64_tests () {
  if [ $xenarch != amd64 ]; then
    return
  fi

  job_create_test test-$xenarch$kern-$dom0arch-xl$qemuu_suffix-win7-amd64 \
            test-win xl $xenarch $dom0arch $qemuu_runvar \
            win_image=win7-x64.iso \
            win_acpi_shutdown=true \
            all_hostflags=$most_hostflags,hvm
}

do_hvm_debian_nested_tests () {
  bios=$1

  if [ $xenarch != amd64 -o $dom0arch != amd64 \
      -o "x$qemuu_suffix" != "x-qemuu" ]; then
    return
  fi

  case $xenbranch in
    xen-3.*-testing)      return;;
    xen-4.0-testing)      return;;
    xen-4.1-testing)      return;;
    xen-4.2-testing)      return;;
    xen-4.3-testing)      return;;
  esac

  for cpuvendor in amd intel; do

    job_create_test test-$xenarch$kern-$dom0arch$qemuu_suffix-nested-$cpuvendor \
            test-nested xl $xenarch $dom0arch $qemuu_runvar        \
            l1_image=$(usual_debianhvm_image amd64)                \
            l1_vifmodel='e1000'                                    \
            l1_memsize='3072'                                      \
            l1_enable_nestedhvm='true'                             \
            l2_image=$(usual_debianhvm_image amd64)                \
            bios=$bios                                             \
            all_hostflags=$most_hostflags,hvm-$cpuvendor

  done
}

branch_debianhvm_arch () {
  case $branch in
    xen-unstable-smoke) echo i386;;
    *) echo amd64;;
  esac
}

do_hvm_debian_test_one () {
  testname=$1
  toolstack=$2
  bios=$3
  xsm=$4 # 'false' or 'true'
  stubdom=$5 # '' (or unset) or 'true'

  local arch=$(branch_debianhvm_arch)
  local testvars

  case "$arch" in
    amd64) iso_dir='install.amd' ;;
    i386)  iso_dir='install.386'
           testvars+=' debianhvm_install_timeoutfactor=1.5'
           testvars+=' debianhvm_diskdevice=/dev/sda' ;;
    *)     iso_dir="install.$arch" ;;
  esac

  stubdom_suffix=""
  stubdom_runvar=""
  if [ x$stubdom = xtrue ]; then
      stubdom_suffix="-stubdom"
      stubdom_runvar="debianhvm_stubdom=$stubdom"
  fi

  job_create_test test-$xenarch$kern-$dom0arch-$toolstack$qemuu_suffix$stubdom_suffix-$testname-$arch\
    test-debianhvm $toolstack $xenarch $dom0arch $qemuu_runvar \
    enable_xsm=$xsm                             \
    $stubdom_runvar $testvars                   \
    debianhvm_image=$(usual_debianhvm_image $arch) \
    debianhvm_iso_kernel=/$iso_dir/vmlinuz \
    debianhvm_iso_ramdisk=/$iso_dir/initrd.gz \
    bios=$bios \
    all_hostflags=$most_hostflags,hvm
}

do_hvm_debian_tests() {
  xsms=$(xenbranch_xsm_variants)

  if [ $xenarch != amd64 ]; then
    return
  fi

  # QEMU upstream supports
  #   1. ovmf + xl
  #   2. seabios + xl
  #   3. seabios + libvirt
  # For libvirt we only generate -xsm test case.
  if [ "x$qemuu_suffix" == "x-qemuu" ]; then
    do_hvm_debian_test_one ovmf xl ovmf false
    for xsm in $xsms ; do
      do_hvm_debian_test_one debianhvm xl seabios $xsm
      if [ x$xsm = xtrue ]; then
          do_hvm_debian_test_one debianhvm libvirt seabios $xsm
      fi
    done
  fi

  # QEMU traditional supports rombios and stubdom
  # Only test xl with QEMU traditional
  if [ "x$qemuu_suffix" == "x-qemut" ]; then
    for xsm in $xsms ; do
      do_hvm_debian_test_one debianhvm xl rombios $xsm
      if [ x$xsm = xtrue -a x$toolstack = xxl ]; then
          do_hvm_debian_test_one debianhvm xl rombios $xsm true
      fi
    done
  fi
}

do_hvm_rhel6_tests () {
  if [ $xenarch != amd64 -o $dom0arch != i386 -o "$kern" != "" ]; then
    return
  fi

  for cpuvendor in amd intel; do

    job_create_test test-$xenarch$kern-$dom0arch$qemuu_suffix-rhel6hvm-$cpuvendor \
                                            test-rhelhvm xl $xenarch $dom0arch \
            redhat_image=rhel-server-6.1-i386-dvd.iso \
            all_hostflags=$most_hostflags,hvm-$cpuvendor \
            $qemuu_runvar

  done
}

do_credit2_tests () {
  if [ $xenarch != $dom0arch ]; then
    return
  fi

  job_create_test test-$xenarch$kern-$dom0arch-xl-credit2             \
       test-debian xl $xenarch $dom0arch                              \
            guests_vcpus=4 xen_boot_append='sched=credit2'            \
            $debian_runvars all_hostflags=$most_hostflags
}

do_rtds_tests () {
  if [ $xenarch != $dom0arch -o x$test_rtds != xy ]; then
    return
  fi

  job_create_test test-$xenarch$kern-$dom0arch-xl-rtds                \
       test-debian xl $xenarch $dom0arch                              \
            guests_vcpus=4 xen_boot_append='sched=rtds'               \
            $debian_runvars all_hostflags=$most_hostflags
}

do_multivcpu_tests () {
  if [ $xenarch != $dom0arch ]; then
    return
  fi

  job_create_test test-$xenarch$kern-$dom0arch-xl-multivcpu \
                    test-debian xl $xenarch $dom0arch guests_vcpus=4  \
                    $debian_runvars all_hostflags=$most_hostflags
}

do_passthrough_tests () {
  if [ $xenarch != amd64 -o $dom0arch != amd64 -o "$kern" != "" ]; then
    return
  fi

  for cpuvendor in intel; do
    job_create_test test-$xenarch$kern-$dom0arch-xl-pcipt-intel       \
                    test-debian-nomigr xl $xenarch $dom0arch          \
            guests_vcpus=4                                            \
            $debian_runvars debian_pcipassthrough_nic=host            \
            all_hostflags=$most_hostflags,hvm-$cpuvendor,pcipassthrough-nic

  done
}

do_pygrub_tests () {
  if [ $xenarch != amd64 -o $dom0arch != amd64 -o "$kern" != "" ]; then
    return
  fi

  job_create_test test-$xenarch$kern-$dom0arch-pygrub   \
    test-debian-di xl $xenarch $dom0arch                \
      debian_arch=amd64                                 \
      debian_suite=$guestsuite                          \
      debian_method=netboot                             \
      debian_bootloader=pygrub                          \
      all_hostflags=$most_hostflags
}

do_pvgrub_tests () {
  if [ $xenarch != amd64 -o $dom0arch != amd64 -o "$kern" != "" ]; then
    return
  fi

  job_create_test test-$xenarch$kern-$dom0arch-amd64-pvgrub     \
    test-debian-di xl $xenarch $dom0arch                        \
      debian_arch=amd64                                         \
      debian_suite=$guestsuite                                  \
      debian_method=netboot                                     \
      debian_bootloader=pvgrub                                  \
      all_hostflags=$most_hostflags                             \

  job_create_test test-$xenarch$kern-$dom0arch-i386-pvgrub      \
    test-debian-di xl $xenarch $dom0arch                        \
      debian_arch=i386                                          \
      debian_suite=$guestsuite                                  \
      debian_method=netboot                                     \
      debian_bootloader=pvgrub                                  \
      all_hostflags=$most_hostflags
}

do_pv_debian_test_one () {
  testname=$1; shift
  recipe_sfx=$1; shift
  toolstack=$1; shift
  platform=$1; shift

  suffix=${platform:+-$platform}
  hostflags=${most_hostflags}${platform:+,platform-$platform}

  job_create_test test-$xenarch$kern-$dom0arch-$testname$suffix \
     test-debian$recipe_sfx $toolstack                          \
            $xenarch $dom0arch                                  \
            $debian_runvars all_hostflags=$hostflags $@
}

do_pv_debian_tests () {
  xsms=$(xenbranch_xsm_variants)

  for xsm in $xsms ; do
    # Basic PV Linux test with xl
    for platform in '' `getplatforms $xenarch` ; do

      # xsm test is not platform specific
      if [ x$xsm = xtrue -a x$platform != x ]; then
          continue
      fi

      do_pv_debian_test_one xl '' xl "$platform" enable_xsm=$xsm

    done
  done

  for xsm in $xsms ; do
    do_pv_debian_test_one libvirt '' libvirt '' enable_xsm=$xsm
  done

  # We compute a desired architecture for each combination of ts and fmt
  # Within each fmt we rotate through the list of arches
  # The starting list rotates once per ts, so that we try to
  # exercise each fmt on each arch family.
  local fmtarches_outer="i386 armhf amd64 armhf"
  local endfmt="do_pv_debian_tests-missing-ts-fmt-for-dom0arch="

  for ts in xl libvirt ; do

    local fmtarches=$fmtarches_outer
    fmtarches_outer="${fmtarches_outer#* } ${fmtarches_outer%% *}"

    for fmt in raw vhd qcow2 ; do

      local fmtarch="${fmtarches%% *}"
      fmtarches="${fmtarches#* } $fmtarch"

      if [ "x$fmtarch" != "x$dom0arch" ]; then
        continue
      else
        endfmt=": "
      fi

      fmt_runvar="debian_diskfmt=$fmt"

      do_pv_debian_test_one $ts-$fmt '-di' $ts '' \
          debian_arch=$dom0arch                 \
          debian_suite=$guestsuite              \
          debian_method=netboot                 \
          debian_bootloader=pygrub              \
          $fmt_runvar

    done
  done

  $endfmt$dom0arch
}

test_matrix_do_one () {

  do_pv_debian_tests

  do_multivcpu_tests

  # RTDS came in 4.5
  case "$xenbranch" in
  xen-3.*-testing) test_rtds=n ;;
  xen-4.0-testing) test_rtds=n ;;
  xen-4.1-testing) test_rtds=n ;;
  xen-4.2-testing) test_rtds=n ;;
  xen-4.3-testing) test_rtds=n ;;
  xen-4.4-testing) test_rtds=n ;;
  xen-4.5-testing) test_rtds=y ;;
  *)               test_rtds=y ;;
  esac

  do_rtds_tests
  do_credit2_tests

  # No further arm tests at the moment
  if [ $dom0arch = armhf ]; then
      return
  fi

  # xend tests for versions <= 4.4 only
  case "$xenbranch" in
  xen-3.*-testing) test_xend=y ;;
  xen-4.0-testing) test_xend=y ;;
  xen-4.1-testing) test_xend=y ;;
  xen-4.2-testing) test_xend=y ;;
  xen-4.3-testing) test_xend=y ;;
  xen-4.4-testing) test_xend=y ;;
  *)               test_xend=n ;;
  esac

  # PVH tests for versions >= 4.5 only
  case "$xenbranch" in
  xen-3.*-testing) test_pvh=n ;;
  xen-4.0-testing) test_pvh=n ;;
  xen-4.1-testing) test_pvh=n ;;
  xen-4.2-testing) test_pvh=n ;;
  xen-4.3-testing) test_pvh=n ;;
  xen-4.4-testing) test_pvh=n ;;
  *)               test_pvh=y ;;
  esac

  do_rumpkernel_tests

  # xend PV guest test on x86 only
  if [ x$test_xend = xy -a \( $dom0arch = "i386" -o $dom0arch = "amd64" \) ]; then
    job_create_test test-$xenarch$kern-$dom0arch-pv test-debian xend \
            $xenarch $dom0arch                                       \
            $debian_runvars all_hostflags=$most_hostflags
  fi

  do_freebsd_tests

  for qemuu_suffix in '' -qemut -qemuu; do
    case "$qemuu_suffix" in
    '')
          case $xenbranch in
          xen-3.*-testing) ;;
          xen-4.0-testing) ;;
          xen-4.1-testing) ;;
          xen-4.2-testing) ;;
          *) continue ;;
          esac
          qemuu_runvar=''
          ;;
    -qemut)
          qemuu_runvar=device_model_version=qemu-xen-traditional
          case $branch in
          qemu-mainline*) continue ;;
          qemu-upstream*) continue ;;
          esac
          ;;
    -qemuu)
          case $xenbranch in
          xen-3.*-testing) continue;;
          xen-4.0-testing) continue;;
          xen-4.1-testing) continue;;
          esac
          qemuu_runvar=device_model_version=qemu-xen
          ;;
    esac

    do_hvm_winxp_tests
    do_hvm_win7_x64_tests
    do_hvm_rhel6_tests

    do_hvm_debian_tests
    do_hvm_debian_nested_tests seabios

  done # qemuu_suffix

  # Test live migration
  for toolstack in $pairtoolstack; do
    # Don't change test case name for old test cases with xl and xend
    if [ x$toolstack = xxl -o x$toolstack = xxend ]; then
      toolstack_suffix=""
    else
      toolstack_suffix="-$toolstack"
    fi
    job_create_test test-$xenarch$kern-$dom0arch$toolstack_suffix-pair \
            test-pair \
            $toolstack $xenarch $dom0arch \
            !host !host_hostflags \
            $debian_runvars \
            all_hostflags=$most_hostflags,equiv-1
  done

  if branch_wants_migrupgrade_tests ; then
      # x86 only for now
      if [ x$xenarch = xamd64 ] ; then
      job_create_test test-$xenarch$kern-$dom0arch-migrupgrade test-pair-oneway \
                      xl $xenarch $dom0arch \
                      !host !host_hostflags \
                      src_host_buildjob=${bfi}build-$dom0arch-prev \
                      src_host_xenbuildjob=${bfi}build-$xenarch-prev \
                      $debian_runvars \
                      all_hostflags=$most_hostflags,equiv-1
      fi
      # TODO it would be nice to test i386->amd64 tools migration too (for
      # Xen >= 4.6), but currently $r{arch} is used in several places,
      # which would need looking at.
  fi

  if [ x$test_pvh = xy -a $xenarch = amd64 -a $dom0arch = amd64 ]; then

    for cpuvendor in amd intel; do

      job_create_test test-$xenarch$kern-$dom0arch-xl-pvh-$cpuvendor \
                test-debian xl $xenarch $dom0arch \
                debian_pvh=1 $debian_runvars \
                all_hostflags=$most_hostflags,hvm-$cpuvendor

    done

  fi
  #do_passthrough_tests

  do_pygrub_tests
  do_pvgrub_tests
}

if [ x$buildflight = x ]; then

  create_build_jobs

else

  bfi=$buildflight.

fi

test_matrix_iterate

echo $flight

# Local variables:
# mode: sh
# sh-basic-offset: 2
# indent-tabs-mode: nil
# End:
