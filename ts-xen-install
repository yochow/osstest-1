#!/usr/bin/perl -w

use strict qw(vars);
use DBI;
use Osstest;
use File::Path;
use POSIX;

my $checkmode= 0;

if (@ARGV and $ARGV[0] eq '--check') {
    $checkmode= 1;
    shift @ARGV;
}

readconfig();
opendb_state();
our $ho= selecthost($r{host});

my %distpath;

sub packages () {
    target_install_packages($ho,
                            qw(bridge-utils vncsnapshot
                               libsdl1.2debian));
    if ($r{arch} eq 'i386') {
	target_install_packages($ho, 'libc6-xen');
    }
}

sub extract_one ($$$) {
    my ($part, $path, $job) = @_;
    $distpath{$part}= get_stashed($path, $job);
    return if $checkmode;
    my $local= $path;  $local =~ s/path_//;
    my $distcopy= "/root/extract_$local.tar.gz";
    target_putfile_root($ho, 300, $distpath{$part}, $distcopy);
    target_cmd_root($ho, "cd / && tar zxf $distcopy", 300);
}

sub extract () {
    foreach my $part ('', 'kern', 'xen') {
        extract_one($part, "path_${part}dist", $r{"${part}buildjob"});
    }
}

sub setupboot () {
    my $rmenu= "/boot/grub/menu.lst";
    my $lmenu= "$stash/menu.lst";

    target_kernkind_check($ho);
    target_kernkind_console_inittab($ho,$ho,"/");

    my $xenhopt= "com1=$c{Baud},8n1 console=com1,vga gdb=com1 conswitch=x";

    my $console= $r{console};
    if (defined $console && length $console) {
        $console= "console=$console";
    } else {
        $console= "xencons=ttyS console=ttyS0,$c{Baud}n8";
    }

    target_getfile($ho, 60, $rmenu, $lmenu);
    open M, "$lmenu" or die "$lmenu: $!";
    open N, "> $lmenu.new" or die "$lmenu.new: $!";
    while (<M>) {
        if (m/^## ## Start Default/ ..
            m/^## ## End Default/) {
            s/^# xenhopt=.*/# xenhopt= $xenhopt/;
            s/^# xenkopt=.*/# xenkopt= $console/;
        }
        print N or die $!;
    }
    M->error and die $!;
    close M or die $!;
    close N or die $!;
    target_putfile_root($ho, 60, "$lmenu.new", $rmenu);

    target_cmd_root($ho, "update-grub");

    $lmenu .= ".out";
    target_getfile($ho, 60, $rmenu, $lmenu);
    my $f= new IO::File $lmenu, 'r' or die "$lmenu $?";
    my $def;
    while (<$f>) {
        die if m/^\s*title\b/;
        next unless m/^\s*default\b/;
        die "$_ ?" unless m/^\s*default\s+(\d+)\s*$/;
        $def= $1;
        last;
    }
    my $ix= -1;
    die unless defined $def;
    logm("boot check: grub default is option $def");
    my $kern;
    while (<$f>) {
        s/^\s*//; s/\s+$//;
        if (m/^title\b/) {
            $ix++;
            if ($ix==$def) {
                logm("boot check: title $'");
            }
            next;
        }
        next unless $ix==$def;
        if (m/^kernel\b/) {
            die "$_ ?" unless
                m,^kernel\s+/(?:boot/)?(xen\-[-+.0-9a-z]+\.gz)(?:\s.*)?$,;
            logm("boot check: xen: $1");
        }
        if (m/^module\b/) {
            die "$_ ?" unless m,^module\s+/((?:boot/)?\S+)(?:\s.*)?$,;
            $kern= $1;
            logm("boot check: kernel: $kern");
            last;
        }
    }
    die "$def $ix" unless defined $kern;
    system "tar zvtf $distpath{kern} boot/$kern"; $? and die $?;

    my $kernver= $kern;
    $kernver =~ s,^/?(?:boot/)?(?:vmlinu[xz]-)?,, or die "$kernver ?";

    my $kernpath= $kern;
    $kernpath =~ s,^(?:boot/)?,/boot/,;

    target_cmd_root($ho,
                    "update-initramfs -k $kernver -c ||".
                    " update-initramfs -k $kernver -u",
                    200);
    target_cmd_root($ho, "update-grub");
    store_runvar('xen_kernel_path',$kernpath);
    store_runvar('xen_kernel_ver',$kernver);

    logm("ready to boot Xen");
}

sub setupinitd () {
    target_cmd_root($ho, "update-rc.d xend start 92 2 .");
}

sub nodhcp () {
    my $rifs= "/etc/network/interfaces";
    my $lifs= "$stash/etc-network-interfaces";

    target_getfile($ho, 60, $rifs, $lifs);
    open M, "$lifs" or die "$lifs: $!";
    open N, "> $lifs.new" or die "$lifs.new: $!";
    while (<M>) {
        if (m/^\s* iface \s+ eth0 \s+ inet \s+ dhcp \s/x) {
            $_= <<END;
iface eth0 inet static
    address $ho->{Ip}
    netmask $c{NetNetmask}
    gateway $c{NetGateway}
END
        }
        print N or die $!;
    }
    M->error and die $!;
    close M or die $!;
    close N or die $!;
    target_putfile_root($ho, 60, "$lifs.new", $rifs);
}    

if ($checkmode) {
    extract();
} else {
    nodhcp();
    packages();
    extract();
    setupboot();
    setupinitd();
}
