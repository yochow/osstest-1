#!/usr/bin/perl -w
# This is part of "osstest", an automated testing framework for Xen.
# Copyright (C) 2009-2013 Citrix Inc.
# 
# This program is free software: you can redistribute it and/or modify
# it under the terms of the GNU Affero General Public License as published by
# the Free Software Foundation, either version 3 of the License, or
# (at your option) any later version.
# 
# This program is distributed in the hope that it will be useful,
# but WITHOUT ANY WARRANTY; without even the implied warranty of
# MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the
# GNU Affero General Public License for more details.
# 
# You should have received a copy of the GNU Affero General Public License
# along with this program.  If not, see <http://www.gnu.org/licenses/>.

use strict qw(vars);
use DBI;
use Osstest;
use File::Path;
use POSIX;
use Osstest::Debian;
use Osstest::TestSupport;
use Data::Dumper;
use Osstest::CXFabric;

my $checkmode= 0;

tsreadconfig();

our @hos;

if (@ARGV and $ARGV[0] eq '--check') {
    $checkmode= 1;
    shift @ARGV;
    logm("checking builds are done...");
} else {
    if (!@ARGV) {
	push @ARGV, 'host';
    }
    foreach my $k (@ARGV) {
        push @hos, selecthost($k);
    }
}

our $ho;

my $enable_xsm = ($r{enable_xsm}//'false') =~ m/true/ ? 1 : 0;

my %distpath;

sub packages () {
    target_install_packages($ho,
                            qw(bridge-utils vncsnapshot libaio1 libpixman-1-0
                               libsdl1.2debian libglib2.0-0 liblzma5
                               netcat-openbsd));
    if ($ho->{Suite} =~ m/jessie/) {
        target_install_packages($ho, 'libnl-route-3-200');
    }
    target_install_packages($ho,
			    $ho->{Suite} =~ /squeeze/ ? "libyajl1" : "libyajl2");
    if ($ho->{Suite} !~ m/lenny|squeeze/) {
        target_install_packages($ho, 'libfdt1');
    }
    if ($r{arch} eq 'i386') {
	target_install_packages($ho, 'libc6-xen');
    }
    target_install_packages($ho, @{toolstack($ho)->{ExtraPackages}})
        if toolstack($ho)->{ExtraPackages};
}

sub extract () {
    my @parts = ('', 'kern', 'xen');
    push @parts, 'libvirt' if $r{toolstack} eq "libvirt";

    foreach my $part (@parts) {
        target_extract_jobdistpath($ho, $part, "path_${part}dist",
		$r{"$ho->{Ident}_${part}buildjob"} // $r{"${part}buildjob"},
		\%distpath);
    }
    if (target_file_exists($ho, "/usr/lib64/efi/xen.efi")) {
	target_cmd_root($ho,<<END);
	    mkdir -p /boot/efi/EFI/osstest
	    # /boot/efi is VFAT, so dereference the symlink
	    cp -vL /usr/lib64/efi/xen.efi /boot/efi/EFI/osstest
END
    }
    target_cmd_root($ho, '/sbin/ldconfig');
}

sub adjustconfig () {
    target_editfile_root($ho, "/etc/xen/xend-config.sxp",
			 "xend-config.sxp", sub {
	my (@domains) = (qw(localhost localhost.localdomain),
			 ".".$c{DnsDomain}, ".".$c{TestHostDomain});
	logm("relocation domains: @domains");
	foreach (@domains) {
	    s/\./\\$&/g;
	    s/^/^/g;
	    s/$/\$/g;
	    s/^\^(\\\.)/.\*$1/;
	}
	$_= join ' ', @domains;
	s/[\'\\]/\\$&/g;
	my $extra= "(xend-relocation-hosts-allow '$_')";
	logm("relocation setting: $extra");
	$extra .= "\n";
        while (<EI>) {
	    s/^\s*\(xend-relocation-hosts-allow/#$&/;
	    print EO or die $!;
	    if (m/^\#\(xend-relocation-hosts-allow/) {
		print EO $extra or die $!;
		$extra= '';
	    }
	}
	print EO $extra or die $!;
    }) if toolstack($ho)->{Name} eq "xend";

    my $trace_config_file;
    foreach my $try (qw(/etc/default/xencommons
                        /etc/sysconfig/xencommons
                        /etc/default/xend
                        /etc/sysconfig/xend)) {
        next unless target_file_exists($ho, $try);
        $trace_config_file= $try;
        last;
    }
    die unless defined $trace_config_file;

    target_editfile_root($ho, $trace_config_file,
	sub { target_editfile_kvp_replace("XENCONSOLED_TRACE", "guest") });

    target_editfile_root($ho, '/etc/libvirt/libvirtd.conf',
		sub { target_editfile_kvp_replace("log_level", "1") })
	if toolstack($ho)->{Name} eq "libvirt";

    target_cmd_root($ho, 'mkdir -p /var/log/xen/console');

    setup_cxfabric($ho);
}

sub setupboot () {
    my $xenhopt= "conswitch=x watchdog";

    my $cons= get_host_property($ho, 'XenSerialConsole', 'com1');

    if ( $cons eq "com1" ) {
	$xenhopt .= " com1=$c{Baud},8n1 console=com1,vga gdb=com1";
    } elsif ( $cons eq "dtuart" ) {
	$xenhopt .= " console=dtuart";
	my $dtuart= get_host_property($ho, 'XenDTUARTPath', undef);
	$xenhopt .= " dtuart=$dtuart" if $dtuart;
    } else {
	logm("No Xen console device defined for host");
    }
    if (toolstack($ho)->{Dom0MemFixed}) {
        my $mem = $r{'dom0_mem'} // 512;
        $xenhopt .= " dom0_mem=${mem}M,max:${mem}M";
    }

    # If /boot/microcode.cpio is present then ts-host-install has
    # arranged that it will be prepended to the initrd already, all we
    # need to do is look for it.
    $xenhopt .= " ucode=scan"
	if target_file_exists($ho, "/boot/microcode.cpio");

    my $append= $r{xen_boot_append};
    $xenhopt .= " $append" if defined $append;
    $append = get_host_property($ho, 'xen-commandline-append', undef);
    $xenhopt .= " $append" if defined $append;

    my @hooks;

    if (host_involves_pcipassthrough($ho)) {
        push @hooks, {
            EditBootOptions => sub {
                my ($ho,$hopt,$kopt) = @_;
                $$hopt .= ' iommu=on';
                my $hide= ' xen-pciback.hide='. join '',map { "($_->{Bdf})" }
                    host_get_pcipassthrough_devs($ho);
                logm("pci passthrough: hiding in dom0: $hide");
                $$kopt .= $hide;
            }
        };
    }

    my $want_kernver = get_runvar('kernel_ver',$r{'kernbuildjob'});
    debian_boot_setup($ho, $want_kernver, $enable_xsm, $xenhopt,
                      \%distpath, \@hooks);

    logm("ready to boot Xen");
}

our $initscripts_nobridge;

sub setupinitd () {
    my $ts= toolstack($ho);
    my $xencommons= '/etc/init.d/xencommons';
    my $have_xencommons=
        !!target_cmd_output_root($ho, <<END);
 if test -f $xencommons && ! grep 'FOR USE WITH LIBXL' $xencommons >/dev/null
 then
   echo y
 fi
END
    $initscripts_nobridge= !defined($ts->{OldDaemonInitd}) || $have_xencommons;
    logm("init.d scripts ".
         ($initscripts_nobridge
          ? 'do not mess with bridge, doing it in interfaces(5)'
          : '_do_ mess with bridge, letting them handle it'));
    my $cmd= '';
    my $updatercd= sub {
        my ($script,$start) = @_;
        $cmd .= "\n    update-rc.d $script start $start 2 .";
    };
    if ($initscripts_nobridge) {
        my $script= $have_xencommons ? 'xencommons' : 'xenlightdaemons';
        $updatercd->($script,92);
        my $pri= 93;
        foreach my $d (@{ $ts->{NewDaemons} }) {
            $updatercd->("$d",$pri);
            $pri++;
        }
    } else {
        my $initd= $ts->{OldDaemonInitd};
        $updatercd->($initd,93) if defined $initd;
        $updatercd->('xenbridge',38) if $ts->{OldSeparateBridgeInitd};
    }
    target_cmd_root($ho, $cmd);
}

sub nodhcp () {
    target_editfile_root($ho, "/etc/network/interfaces",
                         "etc-network-interfaces", sub {
        my $physif= get_host_property($ho,'interface force',undef);

	if (!defined $physif) {
	    # preread /etc/network/interfaces to figure out the interface
	    my %candidates;
	    my @bridges;
	    while (<EI>) {
		if (
		    m{^ \s* (  auto \s+ (\S+)               ) \s* $}x ||
		    m{^ \s* (  allow-hotplug \s+ (\S+)      ) \s* $}x ||
		    m{^ \s* (  iface \s+ (\S+) \s+ inet \s+ ) }x
		    ) {
		    push @{ $candidates{$2} }, $1;
		}
		if (
			(
			 (m{^ \s* iface \s+ (xenbr\w*) \s+ inet \s+ }x
			      ? ((push @bridges, $1), 1) : 0)
			 ...
			 !m{^ [ \t] }x
			)
		    &&
			m{^ \s+ bridge_ports \s+ (\S+) \s }x
		    ) {
		    push @{ $candidates{$1} }, "$bridges[$#bridges] $_";
		}
	    }
	    EI->error and die $!;
	    delete $candidates{'lo'};
	    delete $candidates{$_} foreach @bridges;
	    die Dumper(\%candidates, \@bridges).
		" -- cannot determine default interface"
		unless (scalar keys %candidates) == 1;
	    ($physif,) = keys %candidates;
	    seek EI,0,0 or die $!;
	}
	my ($iface,$bridgex);

	if ($initscripts_nobridge) {
	    $iface= 'xenbr0';
	    $bridgex= <<END;
    bridge_ports $physif
    bridge_fd 0
    bridge_stp off
END
	} else {
	    $iface= $physif;
	    $bridgex= '';
        }

	my $routes= target_cmd_output_root($ho, "route -n");

	$routes =~ m/^ [0-9.]+ \s+ 0\.0\.0\.0 \s+ ([0-9.]+) \s+ \S*U\S* \s /mxi
	    or die "no own local network in route ?  $routes ";
	my $netmask= $1;

	$routes =~
	    m/^ 0\.0\.0\.0 \s+ ([0-9.]+) \s+ 0\.0\.0\.0 \s+ \S*UG\S* \s /mxi
	    or die "no default gateway ?  $routes ";
	my $gateway= $1;

	logm("iface $iface mask=$netmask gw=$gateway");

        my $suppress= 0;
        while (<EI>) {
            $suppress= 0 unless m/^\s+/;
            s/^ \s* allow-hotplug \s+ (?: $physif | xenbr0 ) \s* $
                /auto $iface\n/x;
            if (m/^\s* iface \s+ (?: $physif | xenbr0 ) \s+ inet \s /x) {
                $suppress= 1;
                print EO <<END;
iface $iface inet static
    address $ho->{Ip}
    netmask $netmask
    gateway $gateway
$bridgex
END
            }
            print EO or die $!
                unless $suppress;
        }
    });
}    

sub forbidden () {
    target_cmd_root($ho, <<'END');
        set +e
	outcome=true
	for f in /usr/local/etc/* /usr/local/var/*; do
	    if test -e "$f"; then
	        case "$f" in
		/usr/local/etc/qemu)
                    echo >&2 "*** WARNING IGNORING FORBIDDEN PATH: $f"
                    ;;
                *)
		    echo >&2 "*** FORBIDDEN PATH IN USE, install problem: $f"
		    outcome=false
                    ;;
                esac
	    fi
	done
	$outcome
END
}

if ($checkmode) {
    extract();
} else {
    die if @hos > 1;
    $ho= $hos[0];
    
    packages();
    extract();
    forbidden();
    adjustconfig();
    setupboot();
    setupinitd();
    nodhcp();
}
