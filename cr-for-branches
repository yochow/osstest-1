#!/bin/bash
# usage: cr-for-branches BRANCHESDIR WLEM "SCRIPT OPTIONS" ARGS...
# will run   cd BRANCHESDIR && with-lock-ex WLEM SCRIPT OPTIONS BRANCH ARGS...

# This is part of "osstest", an automated testing framework for Xen.
# Copyright (C) 2009-2013 Citrix Inc.
# 
# This program is free software: you can redistribute it and/or modify
# it under the terms of the GNU Affero General Public License as published by
# the Free Software Foundation, either version 3 of the License, or
# (at your option) any later version.
# 
# This program is distributed in the hope that it will be useful,
# but WITHOUT ANY WARRANTY; without even the implied warranty of
# MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the
# GNU Affero General Public License for more details.
# 
# You should have received a copy of the GNU Affero General Public License
# along with this program.  If not, see <http://www.gnu.org/licenses/>.



set -e

export FOR_LOGFILE="$*"

branchesdir=$1; shift
wlem=$1; shift
scriptoptions="$1"; shift

LOGFILE=tmp/cr-for-branches.log
export LOGFILE

: ${BRANCHES:=osstest xen-4.0-testing xen-4.1-testing xen-4.2-testing xen-4.3-testing xen-unstable qemu-upstream-unstable qemu-upstream-4.2-testing qemu-upstream-4.3-testing linux-3.10 ${EXTRA_BRANCHES}}
export BRANCHES

with-lock-ex -w data-tree-lock bash -ec '
	exec >>$LOGFILE
	date
        printf "%s\n" "$FOR_LOGFILE"
	git-pull . incoming:master 2>&1 ||:
	git-checkout HEAD
'

export OSSTEST_TEST_PULLFROM=`pwd`

for branch in $BRANCHES; do
 (
	set -e

	branchdirbase=$branch
	while true; do
		branchdir=../$branchesdir/for-$branchdirbase.git
		if test -e $branchdir; then break; fi
		#echo "no $branchdir ..."
		case "$branchdirbase" in
		*-*)	branchdirbase=${branchdirbase%-*}	;;
		*)	#echo "skipping"
                        exit 0			;;
		esac
	done
	cd $branchdir

	export LOCK_ACQU_START=`date +%s`

	with-lock-ex $wlem data-tree-lock bash -ec '
		m="$*"

		mkdir -p tmp

		savelog -c 28 -n 500 $LOGFILE >/dev/null
		exec >>$LOGFILE

		log () {
			d=`date +"%Y-%m-%d %H:%M:%S %Z"`
			printf "[%s $$] %s %s\n" "$d" "$m" "$1"
		}

		lock_acquire_done=`date +%s`
		lock_acquire_delay=$(( $lock_acquire_done - $LOCK_ACQU_START ))
		lock_acquire_max=86400
		if [ $lock_acquire_delay -gt $lock_acquire_max ]; then
			log "$lock_acquire_delay > $lock_acquire_max, shedding"
			exit 1
		fi

		log ...

		git-fetch $OSSTEST_TEST_PULLFROM master:incoming 2>&1 ||:
		git-fetch $OSSTEST_TEST_PULLFROM incoming:incoming 2>&1 ||:
		git-pull --no-commit . incoming:master 2>&1 ||:
		git-checkout HEAD

		set +e
		"$@" 2>&1
		rc=$?
		set -e
		log "status=$rc"
		if [ $rc != 0 ]; then
                        cat >&2 <<END
FAILURE $$
$m
see $LOGFILE

END
			cat >&2 $LOGFILE
			exit $rc
                fi
	' x $scriptoptions $branch "$@"
 ) &

${OSSTEST_FOR_BRANCHES_WAIT-sleep 10}

done
