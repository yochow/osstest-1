#!/usr/bin/perl -w
# This is part of "osstest", an automated testing framework for Xen.
# Copyright (C) 2009-2013 Citrix Inc.
# 
# This program is free software: you can redistribute it and/or modify
# it under the terms of the GNU Affero General Public License as published by
# the Free Software Foundation, either version 3 of the License, or
# (at your option) any later version.
# 
# This program is distributed in the hope that it will be useful,
# but WITHOUT ANY WARRANTY; without even the implied warranty of
# MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the
# GNU Affero General Public License for more details.
# 
# You should have received a copy of the GNU Affero General Public License
# along with this program.  If not, see <http://www.gnu.org/licenses/>.

use strict qw(vars);
use DBI;
use Osstest;
use POSIX;
use Osstest::TestSupport;

tsreadconfig();

our ($whhost) = @ARGV;
$whhost ||= 'host';
our $ho= selecthost($whhost);
exit 0 if $ho->{SharedReady};

our ($vg);

our $pe_size;
our $extended_pes = 0;

sub gb2pe ($) {
    my ($gb) = @_;
    return $gb *1024.0*1024.0 / $pe_size;
}

sub overall_limit_pe ($) {
    my ($pevar) = @_;
    my $overall_limit = $r{build_lvextend_max};
    return unless defined $overall_limit && $overall_limit =~ m/^\d/;
    my $allow = floor(gb2pe($overall_limit)) - $extended_pes;
    if ($$pevar > $allow) {
	logm("applying overall lvextend limit ${overall_limit}G");
	$$pevar = $allow;
    }
    $extended_pes += $$pevar;
}

sub lvextend_stage1 () {
    $vg=
        $ho->{Suite} =~ m/lenny/
        ? "$ho->{Name}.$c{TestHostDomain}"
        : $ho->{Name};

    target_cmd_root($ho, <<END);
        set -ex; if ! test -f /root/swap_osstest_enabled; then
            lvcreate -L 10G -n swap_osstest_build $vg ||:
            mkswap /dev/$vg/swap_osstest_build ||:
            swapon /dev/$vg/swap_osstest_build
            touch /root/swap_osstest_enabled
        fi
END

    lvextend1('disk extend initial',       30, 0);
}

sub lvextend_stage2 () {
    lvextend1('disk extend background', undef, 1);
}

sub vginfo () {
    my $vginfo= target_cmd_output_root($ho, "vgdisplay --colon $vg");
    my @vginfo= split /\:/, $vginfo;
    @vginfo >= 17 or die "$vginfo ?";
    return @vginfo;
}

sub lvextend1 ($$$) {
    my ($what, $max_more_gb, $background)  = @_;

    my $lv= "/dev/$vg/root";

    my @vginfo = vginfo();
    $pe_size= $vginfo[12];

    my $do_limit_pe = sub { };
    if (defined $max_more_gb) {
	my $max_more_pe = floor(gb2pe($max_more_gb));
	$do_limit_pe = sub {
	    my ($pevar, $twhat) = @_;
	    logm("$what: $twhat: limit ${max_more_gb}G,".
		 " want $$pevar<=$max_more_pe");
	    if ($$pevar >= $max_more_pe) {
		$$pevar = $max_more_pe;
		$do_limit_pe = sub {
		    my ($pevar, $twhat) = @_;
		    logm("$what: $twhat: already limited");
		    $$pevar = 0;
		};
	    }
	};
    }

    my $more_pe= 0;

    my $pvinfos= target_cmd_output_root($ho, "pvdisplay --colon");
    my $stripe_minfree;
    my $stripe_count=0;
    foreach my $pvinfo (split /\n/, $pvinfos) {
        my @pvinfo= split /\:/, $pvinfo;
        @pvinfo >= 10 or die "$pvinfo ?";
        my $pv_name= $pvinfo[0];  $pv_name =~ s/^\s+//;
        my $pv_vg= $pvinfo[1];
        my $pv_free_pe= $pvinfo[9];
        if ($pv_vg ne $vg) {
            logm("$what: $pv_name: vg $pv_vg != $vg");
            next;
        }
        logm("$what: $pv_name: $pv_free_pe free PEs");
        next unless $pv_free_pe;
        if (!defined($stripe_minfree) ||
            $pv_free_pe < $stripe_minfree) {
            $stripe_minfree= $pv_free_pe;
        }
        $stripe_count++;
    }
    $stripe_minfree=0 if !defined $stripe_minfree;
    logm("$what: $stripe_count stripe(s) x $stripe_minfree PEs");

    my $stripes_free = $stripe_count * $stripe_minfree;
    $do_limit_pe->(\$stripes_free, 'striped');
    if ($stripe_minfree && $stripe_count>1) {
        overall_limit_pe(\$stripes_free);
        $more_pe += $stripes_free;
        target_cmd_root($ho, "lvextend -i$stripe_count -l +$stripes_free $lv");
    }

    @vginfo = vginfo();
    my $vg_more_free_pe= $vginfo[15];

    $do_limit_pe->(\$vg_more_free_pe, 'unstriped');

    if ($vg_more_free_pe) {
        logm("$what: unstriped $vg_more_free_pe PEs");
        overall_limit_pe(\$vg_more_free_pe);
        $more_pe += $vg_more_free_pe;
        target_cmd_root($ho, "lvextend -i1 -l +$vg_more_free_pe $lv");
    }

    my $timeout = 2000 + int($pe_size * 0.000003 * $more_pe);
    logm("$what: ${pe_size}k x $more_pe (timeout=$timeout)");
    my $cmd = "resize2fs $lv";
    if (!$background) {
	target_cmd_root($ho, $cmd, $timeout);
    } else {
	target_cmd_root($ho, "$cmd >>resizefs.log 2>&1 </dev/null &", 30);
    }
}

sub prep () {
    target_install_packages($ho,
                            qw(mercurial
                               build-essential bin86 bcc iasl bc
                               flex bison cmake
                               libpci-dev libncurses5-dev libssl-dev python-dev
                               libx11-dev git-core uuid-dev gettext gawk
                               libsdl-dev libyajl-dev libaio-dev libpixman-1-dev
                               libglib2.0-dev pkg-config
			       ccache));

    target_cmd_root($ho, "chmod -R a+r /usr/share/git-core/templates");
    # workaround for Debian #595728

    if ($ho->{Suite} !~ m/lenny/) {
        target_putfilecontents_stash($ho,60,<<'END','/home/osstest/.hgrc');
[extensions]
mq=
END
    }

    if ($r{arch} eq 'amd64' && $ho->{Suite} =~ m/wheezy/) {
        target_install_packages($ho, 'libc6-dev-i386');
    }
}

sub cacheing_git_mount () {
    my $cache= $c{GitCache};
    return unless $cache;

    if ($cache =~ m,/$,) {
        my $cachelocal= $c{GitCacheLocal};
        my $subdir= $ho->{Name};
        if (defined $cachelocal) {
            my $umask= umask 0; # yes really
            mkdir "$cachelocal/$subdir", 02777
                or $!==&EEXIST or die "$cachelocal/$subdir $!";
            umask $umask;

            my $cachelock_dir= "/var/run/git-cache";
            my $cachelock_real= "$cachelock_dir/lock";
            target_cmd_root($ho, <<END);
                set -e
                umask 0
                mkdir -p $cachelock_dir
                true >>$cachelock_real
END
            my $cachelock_link= "$cachelocal/$subdir/lock";
            if (lstat $cachelock_link) {
                die "$cachelock_link is not a symlink" unless -l _;
            } else {
                symlink $cachelock_real, $cachelock_link
                    or die "$cachelock_link $!";
            }
        }
        $cache.= $subdir;
    }

    my $mountpoint= '/volatile/git-cache';

    my $mounts= target_cmd_output_root($ho, "mount");
    return if $mounts =~ m/^\S+ on \Q$mountpoint\E /om;

    target_cmd_root($ho, "mkdir -vp $mountpoint");
    target_editfile_root($ho, '/etc/fstab', sub {
        while (<EI>) {
            next if m/^\S+\s+\Q$mountpoint\E\s/o;
            print EO or die $!;
        }
        printf EO "%s %s nfs rw,fg,retry=1440\n", $cache, $mountpoint or die $!;
    });

    my $mount_retries=10;
    # mount can randomly fail due to upstream kernel bug (Debian #636306)
    # this is a shonky workaround
    for (;;) {
        last if eval {
            target_cmd_root($ho, "mount $mountpoint");
            1;
        };
        logm("warning: failed to mount $mountpoint, trying again: $@");
        die unless --$mount_retries > 0;
        target_cmd_root($ho, "sync");
        sleep(2);
    }
}

sub cacheing_git_install () {
    my $cache = $c{GitCache};
    return unless $cache;
    target_install_packages($ho, qw(chiark-utils-bin));
    target_putfile_root($ho,10, "cacheing-git","/usr/local/bin/git", "-p");
}

sub ccache_setup () {
    my $opts= get_host_property($ho, 'build ccache opts', '');
    if (length $opts) {
        target_cmd($ho, "ccache $opts");
    }
}

if (!$ho->{Flags}{'no-reinstall'}) {
    lvextend_stage1();
    prep();
    cacheing_git_mount();
    cacheing_git_install();
    ccache_setup();
    lvextend_stage2();
}
$mjobdb->jobdb_resource_shared_mark_ready
   ($ho->{Ident}, $ho->{Name}, "build-".$ho->{Suite}."-".$r{arch});
