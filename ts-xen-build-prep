#!/usr/bin/perl -w

use strict qw(vars);
use DBI;
use Osstest;
use POSIX;

readconfig();
opendb_state();
our ($whhost) = @ARGV;
$whhost ||= 'host';
our $ho= selecthost($whhost);
exit 0 if $ho->{SharedReady};

sub prep () {
    target_install_packages($ho,
                            qw(mercurial
                               build-essential bin86 bcc iasl
                               flex bison
                               libpci-dev libncurses5-dev libssl-dev python-dev
                               libx11-dev git-core uuid-dev gettext gawk
                               libsdl-dev
			       ccache));

    target_cmd_root($ho, "chmod -R a+r /usr/share/git-core/templates");
    # workaround for Debian #595728
}

sub cacheing_git_mount () {
    my $cache= $c{GitCache};
    return unless defined $cache;

    if ($cache =~ m,/$,) {
        my $cachelocal= $c{GitCacheLocal};
        my $subdir= $ho->{Name};
        if (defined $cachelocal) {
            my $umask= umask 0; # yes really
            mkdir "$cachelocal/$subdir", 02777
                or $!==&EEXIST or die "$cachelocal/$subdir $!";
            umask $umask;

            my $cachelock_dir= "/var/run/git-cache";
            my $cachelock_real= "$cachelock_dir/lock";
            target_cmd_root($ho, <<END);
                set -e
                umask 0
                mkdir -p $cachelock_dir
                true >>$cachelock_real
END
            my $cachelock_link= "$cachelocal/$subdir/lock";
            if (lstat $cachelock_link) {
                die "$cachelock_link is not a symlink" unless -l _;
            } else {
                symlink $cachelock_real, $cachelock_link
                    or die "$cachelock_link $!";
            }
        }
        $cache.= $subdir;
    }

    my $mountpoint= '/volatile/git-cache';

    my $mounts= target_cmd_output_root($ho, "mount");
    return if $mounts =~ m/^\S+ on \Q$mountpoint\E /om;

    target_cmd_root($ho, "mkdir -vp $mountpoint");
    target_editfile_root($ho, '/etc/fstab', sub {
        while (<EI>) {
            next if m/^\S+\s+\Q$mountpoint\E\s/o;
            print EO or die $!;
        }
        printf EO "%s %s nfs rw\n", $cache, $mountpoint or die $!;
    });
    target_cmd_root($ho, "mount $mountpoint");
}

sub cacheing_git_install () {
    target_install_packages($ho, qw(chiark-utils-bin));
    target_putfile_root($ho,10, "cacheing-git","/usr/local/bin/git", "-p");
}

prep();
cacheing_git_mount();
cacheing_git_install();
resource_shared_mark_ready($ho->{Ident}, $ho->{Name}, "build-$r{arch}");
