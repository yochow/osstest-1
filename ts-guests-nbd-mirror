#!/usr/bin/perl -w
# This is part of "osstest", an automated testing framework for Xen.
# Copyright (C) 2009-2013 Citrix Inc.
# 
# This program is free software: you can redistribute it and/or modify
# it under the terms of the GNU Affero General Public License as published by
# the Free Software Foundation, either version 3 of the License, or
# (at your option) any later version.
# 
# This program is distributed in the hope that it will be useful,
# but WITHOUT ANY WARRANTY; without even the implied warranty of
# MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the
# GNU Affero General Public License for more details.
# 
# You should have received a copy of the GNU Affero General Public License
# along with this program.  If not, see <http://www.gnu.org/licenses/>.

use strict qw(vars);
use DBI;
use Osstest;
use Osstest::TestSupport;

tsreadconfig();

our ($srvhost,$clthost,@gns) = @ARGV;

our $sho= selecthost($srvhost);
our $cho= selecthost($clthost);

our @ghos= map { selectguest($_,$sho) } @gns;

our @vols;

sub findvols () {
    my $ix= 0;
    foreach my $k (keys %r) {
	next unless $k =~ m/^(.*)_[^_]+_lv$/;
	my $gotgn= $1;
	my $gotgho;
	for (my $i=0; $i<@gns; $i++) {
	    next unless $gns[$i] eq $gotgn;
	    $gotgho= $ghos[$i];
	}
	next unless defined $gotgho;
	push @vols, {
	    Gn => $gotgn,
	    Gho => $gotgho,
	    Lv => $r{$k},
	    Ix => $ix++,
	    };
    }
}

sub configserver () {
    my $scfg= <<END;
# generated by $0
[generic]
    user = root
END
    foreach my $v (@vols) {
	$v->{Port}= unique_incrementing_runvar("${srvhost}_nextport",4000);
	$v->{Path}= "/dev/$v->{Gho}{Vg}/$v->{Lv}";
	$scfg.=<<END;
[export$v->{Ix}]
    exportname = $v->{Path}
    port = $v->{Port}
END
    }

    target_cmd_root($sho, "dpkg --purge nbd-server ||:");
    target_cmd_root($sho, "mkdir -p /etc/nbd-server");
    target_putfilecontents_root_stash($sho,10, $scfg,
        "/etc/nbd-server/config", "${srvhost}_nbd-server_config");
    target_install_packages($sho, qw(nbd-server));
}

sub configclient () {
    my $mydaemon= '/root/nbd-client-async';
    target_putfilecontents_root_stash($cho,10,<<'END',$mydaemon);
#!/bin/sh
exec nbd-client "$@" &
END
    target_cmd_root($cho, "chmod 755 $mydaemon");

    my $ccfg= <<END;
# generated by $0
AUTO_GEN=n
KILLALL=true
DAEMON=$mydaemon
END
    foreach my $v (@vols) {
	my $nbddev= "/dev/nbd$v->{Ix}";
	$ccfg.=<<END;
mkdir -p /dev/$v->{Gho}{Vg}
if ! test -L $v->{Path}; then ln -s $nbddev $v->{Path}; fi
NBD_DEVICE[$v->{Ix}]=$nbddev
NBD_TYPE[$v->{Ix}]=r
NBD_HOST[$v->{Ix}]=$sho->{Name}
NBD_PORT[$v->{Ix}]=$v->{Port}
END
    }
    target_cmd_root($cho, "dpkg --purge nbd-client ||:");
    target_putfilecontents_root_stash($cho,10,$ccfg,"/etc/nbd-client");
    target_install_packages($cho, qw(nbd-client));
}

sub shuffleconfigs () {
    for (my $i=0; $i<@gns; $i++) {
	my $gn= $gns[$i];
	my $gho= $ghos[$i];
	my $cfgpath= $r{ "$gho->{Guest}_cfgpath" };
	my $cfgdata= target_cmd_output_root($sho,"cat $cfgpath");
	target_putfilecontents_root_stash($cho,10,$cfgdata,$cfgpath);
    }
}

findvols();
configserver();
configclient();
shuffleconfigs();
