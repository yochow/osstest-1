#!/usr/bin/perl -w
#
# Ensure there's enough free space

# This is part of "osstest", an automated testing framework for Xen.
# Copyright (C) 2009-2013 Citrix Inc.
# 
# This program is free software: you can redistribute it and/or modify
# it under the terms of the GNU Affero General Public License as published by
# the Free Software Foundation, either version 3 of the License, or
# (at your option) any later version.
# 
# This program is distributed in the hope that it will be useful,
# but WITHOUT ANY WARRANTY; without even the implied warranty of
# MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the
# GNU Affero General Public License for more details.
# 
# You should have received a copy of the GNU Affero General Public License
# along with this program.  If not, see <http://www.gnu.org/licenses/>.



use strict qw(vars);
use Osstest;
use Fcntl qw(:flock);

our $dryrun= 0;

while (@ARGV && $ARGV[0] =~ m/^\-/) {
    $_= shift @ARGV;
    last if $_ eq '--';
    if (m/^-n$/) {
        $dryrun= 1;
    } else {
	die "$_ ?";
    }
}

die unless @ARGV==1;

our ($cfgbase) = @ARGV;

csreadconfig();

open LOCK, "> $c{GlobalLockDir}/publish-lock" or die $!;
flock LOCK, LOCK_EX or die $!;

chdir $c{Logs} or die $c{Logs};
$|=1;

my $chkq= $dbh_tests->prepare("SELECT * FROM flights WHERE flight=?");
our @flights;
our @sshopts= qw(-o batchmode=yes);

my $cfgvalue = $c{$cfgbase};
$cgvvalue =~ m/\:/ or die "$c{LogsPublish} ?";
my ($pubhost, $pubdir) = ($`,$'); #';

sub ontarget ($) {
    my ($shellcmd) = @_;
    # returns list to run that command
    return qw(ssh -n), @sshopts, $pubhost, $shellcmd;
}

for (;;) {
    open P, "-|", ontarget "df --block-size=1M -P $pubdir" or die $!;
    $_= <P>;
    m/^filesystem/i or die "$_ ?";
    $_= <P>;
    m,^\S+\s+\d+\s+\d+\s+(\d+)\s+, or die "$_ ?";
    $!=0; $?=0; close P or die "$! $?";
    my $space= $1;
    printf "space: %8d, wanted: %8d ", $space, $c{LogsMinSpaceMby};
    last if $space >= $c{LogsMinSpaceMby};

    if (!@flights) {
	open P, "-|", ontarget "ls -1 $pubdir" or die $!;
	while (<P>) {
	    next unless m/^(\d+)\n$/;
	    push @flights, $1;
	}
	$!=$?=0; close P or die "ls: $? $!";
	@flights = sort { $b <=> $a } @flights;
        printf "(%d flights) ", scalar @flights;
        die unless @flights;
    }
    my $flight = pop @flights;
    printf "selected %s ", $flight;

    $chkq->execute($flight);
    my $row= $chkq->fetchrow_hashref();
    $chkq->finish();
    die $flight unless defined $row;
    my $age= time - $row->{started};

    printf "(age %dd) ", $age / 86400;

    die "age $age" if $age < $c{LogsMinExpireAge};

    printf "...";

    die if $dryrun;

    my $spawn= sub {
        $!=0; my $r= system @_; die "@_ $r $!" if $r;
    };
    $spawn->(ontarget <<END);
             set -e
             cd $pubdir
             test -e $flight || exit 0
             printf remote...
             rm -rf $flight
END

    printf "local..";
    $spawn->(qw(rm -rf), $flight);

    printf "done.\n";
}

printf "ok.\n";
exit 0;
