#!/usr/bin/perl
#
# this script has no locking; it expects to be called only
# from ms-queuedaemon

# This is part of "osstest", an automated testing framework for Xen.
# Copyright (C) 2009-2013 Citrix Inc.
# 
# This program is free software: you can redistribute it and/or modify
# it under the terms of the GNU Affero General Public License as published by
# the Free Software Foundation, either version 3 of the License, or
# (at your option) any later version.
# 
# This program is distributed in the hope that it will be useful,
# but WITHOUT ANY WARRANTY; without even the implied warranty of
# MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the
# GNU Affero General Public License for more details.
# 
# You should have received a copy of the GNU Affero General Public License
# along with this program.  If not, see <http://www.gnu.org/licenses/>.


use strict qw(vars refs);
use DBI;
use Osstest;
use JSON;
use POSIX;
use Data::Dumper;
use HTML::Entities;

use Osstest::TestSupport;
use Osstest::Executive;

open DEBUG, ">/dev/null" or die $!;

our $walker = 'plan';

while (@ARGV and $ARGV[0] =~ m/^-/) {
    $_= shift @ARGV;
    last if m/^--$/;
    while (m/^-./) {
        if (s/^-D/-/) {
            open DEBUG, ">&STDERR" or die $!;
        } elsif (s/^-w(.+)/-/) {
	    $walker = $1;
        } else {
            die "$_ ?";
        }
    }
}

csreadconfig();

our ($plan);

my $fn= "data-$walker.pl";

sub allocations ($$) {
    my ($init, $each) = @_;
    db_retry($dbh_tests, \@all_lock_tables, sub {
	$init->();
	
	our $resources_q ||= $dbh_tests->prepare(<<END);
	    SELECT * FROM resources JOIN tasks
                       ON owntaskid = taskid
		    WHERE NOT (tasks.type='magic' AND
                               tasks.refkey='allocatable')
END
        $resources_q->execute();
	while (my $row= $resources_q->fetchrow_hashref()) {
	    my $reso= join " ", map { $row->{$_} } qw(restype resname);
	    die unless !!$row->{shareix} == !!($reso =~ s/^share-//);
            print DEBUG "ALLOCATION $reso $row->{shareix}\n";
	    $each->($reso, $row, $row->{shareix});
	}
	$resources_q->finish();
    });
}

sub get_current_plan () {
    if (!open P, $fn) {
	die $! unless $!==&ENOENT;
	$plan= { Allocations=>{ }, Bookings=>{ } };
	return;
    }
    local $/;
    my $plandump= <P>;
    P->error and die $!;
    close P or die $!;
    $plan= eval $plandump;
}

sub do_write_new_plan () {
    my $f= new IO::File "$fn.new", 'w' or die $!;
    my $d= new Data::Dumper([$plan]);
    $d->Terse(1);
    print $f $d->Dump() or die $!;
    close $f or die $!;
    rename "$fn.new",$fn or die $!;
}

sub check_write_new_plan () {
    launder_check_plan();
    do_write_new_plan();
}

sub current_sharing_info ($) {
    my ($reso) = @_;
    my ($restype,$resname) = split / /, $reso, 2;
    
    my $shrestype= "share-$restype";

    our $allocations_sharing_q ||= $dbh_tests->prepare(<<END);
        SELECT * FROM resource_sharing WHERE restype=? AND resname=?
END
    $allocations_sharing_q->execute($restype,$resname);
    my $sharing= $allocations_sharing_q->fetchrow_hashref();
    $allocations_sharing_q->finish();
    return undef unless $sharing;
    
    our $allocations_shares_q ||= $dbh_tests->prepare(<<END);
        SELECT count(*) AS shares FROM resources WHERE restype=? AND resname=?
END
    $allocations_shares_q->execute($shrestype, $resname);
    my $shares= $allocations_shares_q->fetchrow_hashref();
    $allocations_shares_q->finish();

    our $allocations_nonprep_q ||= $dbh_tests->prepare(<<END);
        SELECT count(*) AS prep FROM resources WHERE restype=? AND resname=?
          AND owntaskid IN (SELECT taskid FROM tasks WHERE type='magic' AND
                              (refkey='allocatable' OR refkey='preparing'))
END
    $allocations_nonprep_q->execute($shrestype, $resname);
    my $nonprep= $allocations_nonprep_q->fetchrow_hashref();
    $allocations_nonprep_q->finish();
    if ($nonprep->{prep} == $shares->{shares}) {
        return {
            OnlyPreparing => 1,
            Shares => $shares->{shares},
            Type => $sharing->{sharetype},
        };
    }

    return {
	Type => $sharing->{sharetype},
	Wear => $sharing->{wear},
	Shares => $shares->{shares},
    };
}

sub launder_check_plan () {
    print DEBUG "LAUNDER PLAN ", Dumper($plan);

    foreach my $reso (keys %{ $plan->{Events} }) {
	my @evts;

	my $used=0;
	my $cshare=undef;
        my $evt;

        print DEBUG "CHECK PLAN RESO $reso\n";

	foreach my $evt (sort {
	    $a->{Time} <=> $b->{Time} ||
		!!($a->{Type} eq Start) <=> !!($b->{Type} eq Start);
	} @{ $plan->{Events}{$reso} }) {
            print DEBUG "CHECK PLAN  $evt->{Time} $evt->{Type}\n";

            my $bad= sub {
                my ($msg) = @_;
                die "BAD PLAN $msg\n".Dumper($reso, $used, $evt, $cshare)." ";
            };

	    my $type= $evt->{Type};
	    next if $type eq Unshare;

	    push @evts, $evt;

            $bad->('type') unless $type eq Start || $type eq End;
	    my $eshare= $evt->{Share};

	    my $allocinfo= $evt->{Allocated};
	    if ($allocinfo) {
		$bad->('late allocation') unless
                    $type eq End || $evt->{Time}<=$plan->{Start};
		$bad->('allocation not in allocations') unless
                    $plan->{Allocations}{"$reso $allocinfo->{Shareix}"};
	    }

	    if ($type eq Start) {
		$used++;
		if ($eshare) {
                    print DEBUG "CHECK PLAN   ESHARE $eshare->{Type}\n";
		    $cshare= { %$eshare, Wear=>0 } if !$cshare;
		    foreach my $wh (qw(Type Shares)) {
			$bad->("share mismatch $wh")
			    unless $eshare->{$wh} eq $cshare->{$wh};
		    }
		    $eshare->{Wear}= ++$cshare->{Wear};
		    $evt->{Avail}= $cshare->{Shares} - $used;
		} else {
                    print DEBUG "CHECK PLAN   NO-SHARE\n";
		    $bad->("stealth unshare") if $cshare;
		    $evt->{Avail}= 1 - $used;
		}
		$bad->("clash")
                    if $evt->{Avail} < 0;
	    } else {
		$used--;
		$bad->("overfree")
                    unless $used >= 0;
		if ($eshare) {
		    $eshare->{Wear}= $cshare->{Wear};
		    $evt->{Avail}= $eshare->{Shares} - $used;
		} else {
		    $evt->{Avail}= 1 - $used;
		}
		if (!$used && $cshare) {
		    push @evts, {
			Time => $evt->{Time},
			Type => Unshare,
			Avail => 1,
			Info => $cshare->{Type},
		    };
		    $cshare= undef;
		}
	    }
	}

	$plan->{Events}{$reso}= \@evts;
    }
}

sub cmd_reset () {
    die if @ARGV;

    get_current_plan();

    $plan->{Start}= time;
    $plan->{Events}= { };

    my %magictask;
    foreach my $taskrefkey (qw(preparing shared)) {
	($magictask{$taskrefkey}) =
	    $dbh_tests->selectrow_array(<<END,{}, $taskrefkey);
                SELECT taskid FROM tasks
		             WHERE type='magic' AND refkey=?
END
    }

    # Look for any rogue allocations, and note which allocations are
    # still current.  We ignore master allocations for shares.  Preparing
    # allocations of individual shares are treated as specially-short rogue.
    my %current;
    my %currentshare;

    allocations(sub {
	undef %current;
	undef %currentshare;
    }, sub {
	my ($reso, $arow, $shareix) = @_;
	my $reskey= "$reso $shareix";

	if ($arow->{owntaskid} == $magictask{shared}) {
	    die if $shareix;
	    my $cs= current_sharing_info($reso);
	    die "$reso ?" unless $cs;
	    $currentshare{$reso}= $cs;
            print DEBUG " allocation shared ",Dumper($cs);
	    next;
	}

	$current{$reskey}= 1;
        my $oldalloc= $plan->{Allocations}{$reskey};
        print DEBUG " oldalloc ",Dumper($oldalloc),"\n";
        if ($oldalloc && $oldalloc->{Task}==$arow->{owntaskid}) {
            print DEBUG " oldalloc same task $arow->{owntaskid}\n";
            $oldalloc->{Live}= $arow->{live};
            return;
        }

	# rogue allocation!
	my $info;
	if ($arow->{owntaskid} == $magictask{preparing}) {
            print DEBUG " allocation preparing\n";
            my $cs= current_sharing_info($reso);
            die "$reso ?" unless $cs;

            print DEBUG " preparing notonly\n";
	    $info= "(preparing)";
	} else {
	    print DEBUG "rogue $reso $shareix: $arow->{owntaskid}\n";
	    $info= "rogue task $arow->{subtask}";
	}
	$plan->{Allocations}{$reskey}= {
            Task => $arow->{owntaskid},
	    Info => $info,
	    Start => $plan->{Start},
            Live => $arow->{live},
	};
        print DEBUG " assigned ", Dumper($plan->{Allocations}{$reskey});
    });

    # Delete our record of allocations now freed, and add new
    # new events representing the still-current allocations:
    foreach my $reskey (keys %{ $plan->{Allocations} }) {
	if (!exists $current{$reskey}) {
	    delete $plan->{Allocations}{$reskey};
	    next;
	}
	my $alloc= $plan->{Allocations}{$reskey};

	$reskey =~ m/ (\d+)$/;
	my ($reso, $shareix) = ($`, $1);

	my $share= $currentshare{$reso};
	die unless !!$share == !!$shareix;

        if ($share && $share->{OnlyPreparing}) {
            delete $plan->{Allocations}{$reskey};
            next;
        }

	# compute new expected end time
	my $end_exptd= $alloc->{End};

        if (!$alloc->{Live}) {
            $end_exptd= $plan->{Start} + 1;
        } elsif (!defined $end_exptd) {
            if ($alloc->{Task} == $magictask{preparing}) {
                $end_exptd= $plan->{Start} + 1000;
            } else {
                $end_exptd= $plan->{Start} + $c{PlanRogueAllocationDuration};
            }
        } elsif ($end_exptd <= $plan->{Start}) {
	    # overdue
	    my $started= $alloc->{Start};
	    my $duration_sofar= $plan->{Start} - $started;
	    my $duration_planned= $alloc->{End} - $started;
	    my $duration_exptd=
		$duration_sofar * $duration_sofar / $duration_planned;
	    # we square the error - ie, we expect it to take
	    # longer than it has done so far by the proportion
	    # by which it has so far exceeded the original estimate
	    $duration_exptd= ceil($duration_exptd);
	    print DEBUG "readjust $reskey: $duration_planned".
		    " < $duration_sofar $duration_exptd\n" or die $!;
	    die $duration_exptd unless $duration_exptd >= 0;
	    $end_exptd= $started + $duration_exptd + 1;
	}

        my @ealloc= (
                     Task => $alloc->{Task},
                     Shareix => $shareix,
                     Live => $alloc->{Live},
                    );

	my $job = $alloc->{Job};
	push @{ $plan->{Events}{$reso} }, {
	    Time => $alloc->{Start},
	    Info => $alloc->{Info},
	    ($job ? (Job => $job) : ()),
	    Type => Start,
	    ($share ? (Share => { %$share }) : ()),
	    Allocated => { @ealloc },
	}, {
	    Time => $end_exptd,
	    Info => $alloc->{Info},
	    ($job ? (Job => $job) : ()),
	    Type => End,
	    ($share ? (Share => { %$share }) : ()),
	    Allocated => { @ealloc },
	};
    }

    # Now everything in the plan is good except that we
    # need to sort the lists and compute Avails, which is done by
    # check_write_new_plan.

    check_write_new_plan();
}

sub cmd_get_plan () {
    die if @ARGV;

    get_current_plan();
    launder_check_plan();

    my $jplan= { Events=>{}, Start => $plan->{Start} };

    while (my ($reso,$evts) = each %{ $plan->{Events} }) {
	my @jevts;
	foreach my $evt (@$evts) {
	    my $share= $evt->{Share};
	    my $job= $evt->{Job};
	    push @jevts, {
		Time => $evt->{Time} - $plan->{Start},
		Type => $evt->{Type},
		Avail => $evt->{Avail},
		($job ? (Job => $job) : ()),
		($share ? (Share => $share) : ()),
	    };
	}
	$jplan->{Events}{$reso}= \@jevts;
    }
    print to_json($jplan),"\n" or die $!;
}

sub parse_reso ($) {
    my ($rk) = @_;
    die unless defined $rk;
    die if ref $rk;
    die if $rk =~ m,[^-+_.!*%(){}:\#/ 0-9a-zA-Z],;
    return $rk;
}

sub parse_printstring ($) {
    my ($ps) = @_;
    die unless defined $ps;
    die if ref $ps;
    die if $ps =~ m/[^[:ascii:]]/;
    die if $ps =~ m/[^[:print:]]/;
    return $ps;
}

sub parse_xinfo ($$) {
    my ($baseinfo,$xi) = @_;
    return $baseinfo unless defined $xi;
    return "$baseinfo ".parse_printstring($xi);
}

sub parse_number ($) {
    my ($num) = @_;
    die unless defined $num;
    die if ref $num;
    die unless $num =~ m/^(0|[1-9][0-9]{0,8})$/;
    return $num + 0;
}

sub parse_reltime2abs ($) {
    my ($rt) = @_;
    return parse_number($rt) + $plan->{Start};
}

sub cmd_book_resources () {
    die unless @ARGV==1;
    my ($baseinfo) = @ARGV;
    
    local ($/)= undef;
    my $bookingsdata= <STDIN>;
    my $jbookings= from_json($bookingsdata);

    get_current_plan();

    die unless $jbookings->{Bookings};

    foreach my $jbook (@{ $jbookings->{Bookings} }) {
	my $info= parse_xinfo($baseinfo, $jbook->{Xinfo});
	my $starttime= parse_reltime2abs($jbook->{Start});
	my $endtime= parse_reltime2abs($jbook->{End});
	my $reso= parse_reso($jbook->{Reso});
	my $job= $jbook->{Job};

	die unless $starttime < $endtime;

	my @share;
	my $jshare= $jbook->{Share};
	if ($jshare) {
	    my $nshares= parse_number($jshare->{Shares});
	    die unless $nshares <= 30;
	    @share= (
		     Type => parse_printstring($jshare->{Type}),
		     Shares => $nshares,
		     );
	}

	my @alloc;
	my $jalloc= $jbook->{Allocated};
	if ($jalloc) {
            my $shareix= parse_number($jalloc->{Shareix});
            my $task= parse_number($jalloc->{Task});
	    @alloc= (
		     Shareix => $shareix,
                     Task => $task,
                     Live => 1,
		     );

            my $reskey= "$jbook->{Reso} $shareix";
            die if exists $plan->{Allocations}{$reskey};
            $plan->{Allocations}{$reskey}= {
                Task => $task,
                Info => $info,
                Start => $starttime,
                End => $endtime,
                Live => 1,
                ($job ? (Job => $job) : ()),
            };
	}

	my $newevt= sub {
	    push @{ $plan->{Events}{$reso} }, {
		Info => $info,
		(@share ? (Share => { @share }) : ()),
		(@alloc ? (Allocated => { @alloc }) : ()),
		($job ? (Job => $job) : ()),
		@_,
	    };
	};

	$newevt->(
		  Time => $starttime,
		  Type => Start,
		  );
	$newevt->(
		  Time => $endtime,
		  Type => End,
		  );
    }

    check_write_new_plan();
}

sub show_rel_time ($) {
    my ($abs) = @_;

    my $rel= $abs - $plan->{Start};
    my $realrel= $rel;
    my $minus= $rel < 0 ? '-' : '';
    $rel= -$rel if $minus;

    my (@lt) = localtime $abs;
    my $abstr=
        -4*3600 < $realrel && $realrel < 11*3600 ? strftime("%H:%M", @lt) :
        $rel < 86400*2 ? strftime("%a %H:%M", @lt) :
        $rel < 86400*7 ? strftime("%d %a %Hh", @lt) :
        strftime("%d %b %a", @lt);
        
    my $mins= $rel % 60;   $rel -= $mins;   $rel /= 60;
    my $hours= $rel % 60;  $rel -= $hours;  $rel /= 60;
    my $relstr= sprintf("%s%d:%02d:%02d", $minus, $rel, $hours, $mins);

    return ($relstr, $abstr);
}

sub showsharetype ($) {
    local ($_) = @_;
    s/(\s\w{8})\w{32,}$/$1$2..$3/;
    return $_;
}

sub cmd_show_html () {
    get_current_plan();
    my $now= time;

    my $earliest= $plan->{Start};
    while (my ($reskey,$alloc) = each %{ $plan->{Allocations} }) {
	$earliest= $alloc->{Start} if $alloc->{Start} < $earliest;

	$reskey =~ m/ (\d+)$/;
	my ($reso, $shareix) = ($`, $1);

	if (defined $alloc->{End} && $alloc->{End} < $plan->{Start}) {
	    unshift @{ $plan->{Events}{$reso} }, {
		Time => $alloc->{End},
		Info => $alloc->{Info},
		Type => $alloc->{Live} ? Overrun : After,
	    };
	}
    }
    foreach my $reso (keys %{ $plan->{Events} }) {
	$plan->{Events}{$reso}= [ sort {
	    $a->{Time} <=> $b->{Time} ||
		(!!($a->{Type} eq Start) <=> !!($b->{Type} eq Start)) ||
		(!($a->{Type} eq End) <=> !($b->{Type} eq End))
	} @{ $plan->{Events}{$reso} } ];
    }

    my $colheadsortkey=
	!$c{HostnameSortSwapWords} ? sub { $_[0]; }
        : sub { ($_[0] =~ m/-/ ? "$' $`" : "").$_[0]; };
    my @colheads = sort {
        $colheadsortkey->($a) cmp $colheadsortkey->($b)
    } keys %{ $plan->{Events} };

    #print DEBUG Dumper($earliest, $plan->{Events});

    my @outcols;
    foreach my $reso (@colheads) {
	my @incol;
	my $dopush= sub {
	    my ($ni) = @_;
	    if ($incol[-1]{Time} == $ni->{Time}) {
		my $previous= pop @incol;
                $ni->{Show}= [ @{ $previous->{Show} }, @{ $ni->{Show} } ];
	    }
	    $ni->{Rowspan}=1;
	    push @incol, $ni;
	};

	push @incol, { Show=>[], Rowspan=>1, Avail=>1, Time=>$earliest };

	my $shares;
	foreach my $evt (@{ $plan->{Events}{$reso} }) {
	    my $type= $evt->{Type};
	    my $show=
		$type eq End ? ($evt->{Share} ? "End $evt->{Info}" : "") :
                $type eq Unshare ? "$type [".showsharetype($evt->{Info})."]" :
		($type eq Overrun || $type eq After)
		? ("$type $evt->{Info}") :
		(!$evt->{Allocated} ? Booking :
                 ($evt->{Allocated}{Live} ? Allocation : Completed).
                 " $evt->{Allocated}{Task}")." ".$evt->{Info};
	    my $share= $evt->{Share};
	    if ($share) {
		$show .= sprintf(" [%s %d/%d %d]",
				 showsharetype($share->{Type}),
				 $share->{Shares} - $evt->{Avail},
				 $share->{Shares},
				 $share->{Wear});
		$show =~ s/^ //;
	    }
	    $dopush->({ %$evt, Show => [ $show ] });
	}
	push @incol, { Time=>1e100 };

	my @outcol;
	foreach (my $ix=0; $ix<@incol-1; $ix++) {
	    push @outcol, {
		Start => $incol[$ix]{Time},
		End => $incol[$ix+1]{Time},
		Content => $incol[$ix],
	    };
	}
	push @outcols, \@outcol;
    }

    my @rows;
    my (@newoutcols) = map { [] } @outcols;
    for (;;) {
	#print DEBUG "==========\n", Dumper(\@outcols);
	    
	my $firstend= 1e100;
	my $anystart= undef;
	foreach my $col (@outcols) {
	    my $cell= $col->[0];
	    $firstend= $cell->{End} if $cell->{End} < $firstend;
	    $anystart= $cell->{Start} if !defined $anystart;
	    die unless $cell->{Start}==$anystart;
	}

	#print DEBUG Dumper($anystart, $firstend);

	my $realfirstend= $firstend;

	if (defined $anystart) {
	    my $nexthour= int($anystart/3600 + 1)*3600;
	    if ($firstend > $nexthour &&
		$anystart >= $plan->{Start} &&
		$nexthour <= $plan->{Start} + 3600*12) {
		$firstend= $nexthour;
	    }
	}

	foreach (my $colix=0; $colix<@outcols; $colix++) {
	    my $col= $outcols[$colix];
	    my $cell= shift @$col;
	    if ($cell->{End} != $firstend) {
		unshift @$col, { %$cell, Start=>$firstend };
		$cell = { %$cell, End=>$firstend },
		$cell->{Content}{Rowspan}++;
	    }
	    push @{ $newoutcols[$colix] }, $cell;
	}
	push @rows, {
	    Start => $anystart,
	    End => $firstend,
	};

	last if $realfirstend == 1e100;
    }

    #print DEBUG "==============================\n",
    #    Dumper(\@rows, \@newoutcols);

    printf "<table rules=all><tr><td>plan age %s</td><td>report at %s</td>\n",
        show_rel_time($now);
    foreach my $ch (@colheads) {
	printf "<th>%s</th>", encode_entities($ch);
    }
    print "</tr>\n";

    foreach my $event (@rows) {
	my $timecolour=
	    !($event->{Start} % 3600) ? ' bgcolor="#888888"' :
	    $event->{Start} < $plan->{Start} ? ' bgcolor="#dddddd"' : '';
	printf "<tr><th valign=top $timecolour>%s</th>".
	       "<th valign=top $timecolour>%s</th>",
	    show_rel_time($event->{Start});
	foreach my $col (@newoutcols) {
	    my $cell= shift @$col;
	    my $content= $cell->{Content};
	    if (!$content->{Printed}) {
		my $show=
                    join "<br>",
                    map { encode_entities($_) }
                    grep { m/\S/ }
                    @{ $content->{Show} };
		$show= 'Idle' if !length $show &&
                    $event->{Start} >= $plan->{Start};
                my $avail=
                    $content->{Avail} ||
                    $content->{Type} eq After ||
                    ($content->{Allocated} && !$content->{Allocated}{Live});
                my $bgcolour=
                    $avail ?
                    ($content->{Share} ? "#ccccff" : "#ffffff") :
                    $content->{Type} eq Overrun ?
                    ($content->{Share} ? "#443344" : "#442222") :
                    $content->{Allocated} ?
                    ($content->{Share} ? "#882288" : "#882222")
                    :
                    ($content->{Share} ? "#005555" : "#448844");
                my $fgcolour=
                    $avail ? "#000000" : "#ffffff";
		printf "<td valign=top rowspan=%d".
                    " bgcolor=\"%s\"><font color==\"%s\">%s %s</font></td>",
		    $content->{Rowspan}, $bgcolour, $fgcolour, $show;
		$content->{Printed}= 1;
	    }
	}
	printf "</tr>\n";
    }
    printf "</table>\n";
    printf "Report generated %s.\n",
        strftime("%Y-%b-%d %a %H:%M:%S", localtime $now);
    die $! if STDOUT->error;
    die $! unless STDOUT->flush;
}

die unless @ARGV;
die if $ARGV[0] =~ m/^-/;
my $subcmd= shift @ARGV;
$subcmd =~ s/-/_/g;
die if @ARGV && $ARGV[0] =~ m/^-/;
my $subcmdproc;
{
    $subcmdproc= \&{ "cmd_$subcmd" };
}
$subcmdproc->();
