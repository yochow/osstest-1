#!/usr/bin/perl -w

use strict qw(vars);
use Osstest;
use DBI;
use IO::File;
use POSIX;

readconfig();
opendb_state();

our ($whhost) = @ARGV;
$whhost ||= 'host';
our $ho= selecthost($whhost);

sub try_fetch_logs ($$) {
    my ($lho, $logfilepats) = @_;
    my $ok= 0;
    foreach my $logfilepat (@$logfilepats) {
        my $logfileslist= $logfilepat;
        if ($logfileslist =~ m/[*?]/) {
            if (!eval {
                $logfileslist=
                    target_cmd_output_root($lho, <<END);
                        chmod a+r $logfilepat >/dev/null 2>&1 ||:
                        echo $logfilepat
END
                1;
            }) {
                logm("logfile $logfilepat pattern expansion failed: $@");
                next;
            }
            next if $logfileslist eq $logfilepat;
        }
        foreach my $logfile (split / /, $logfileslist) {
            my $llogfile= $logfile;
            $llogfile =~ s,/,-,g;
            $llogfile= "$lho->{Name}--$llogfile";
            logm("fetching $logfile to $llogfile");
            if (!eval {
                target_getfile_root($lho,60, $logfile,"$stash/$llogfile");
		if ($logfile !~ m/\.gz$/) {
		    stat("$stash/$llogfile") or die "$stash/$llogfile $!";
		    if ((stat _)[7] > 100000) {
			my $r= system 'gzip','-9vf','--',"$stash/$llogfile";
			die "$r $!" if $r;
		    }
		}
                1;
            }) {
                logm("logfile $logfile fetch failed: $@");
                next;
            }
        }
        $ok= 1;
    }
    return $ok;
}

sub fetch_logs_serial () {
    my $logpat= $c{SerialLogPattern};
    my $vn;

    my $started= $dbh_tests->selectrow_array(<<END);
        SELECT started FROM flights WHERE flight=$flight
END
    $logpat =~ s/\%(\w*)\%/
        !length $1 ? '' :
        ($vn=$1) eq 'host' ? $ho->{Name} :
        !defined $r{$vn} ? die "$c{SerialLogPattern} $1 ?" :
        $r{$vn}
    /ge;

    my $targhost= $ho->{Name} =~ m/mite$|beetle$/ ? 'xcser1' : 'woking';

    logm("collecting serial logs since $started from $targhost");

    my $remote= remote_perl_script_open
        ($targhost, "serial $targhost $ho->{Name}", <<'END');

        use warnings;
        use strict qw(refs vars);
        use IO::File;
        $|=1;
        my $started= <DATA>;  defined $started or die $!;
        my $logpat= <DATA>;   defined $logpat or die $!;

        my %done;
        for (;;) {
            my $anydone= 0;
            foreach my $logfile (glob $logpat) {
                my $lh= new IO::File $logfile, 'r';
                if (!defined $lh) {
                    $!==&ENOENT or warn "$logfile $!";
                    next;
                }
                stat $lh or die "$logfile $!";
                my $inum= (stat _)[1];
                my $lfage= (stat _)[9];
                if ($lfage < $started) {
                    next if $done{$inum};
                    print "M $logfile modified $lfage, skipping\n" or die $!
                        unless $done{$inum};
                    $done{$inum}= 1;
                    next;
                }
                next if defined $done{$inum} and $done{$inum} >= 2;
                $done{$inum}= 2;
                print "F $logfile\n" or die $!;
                for (;;) {
                    my $data;
                    my $r= read $lh, $data, 65536;
                    die "$logfile $!" unless defined $r;
                    print "D ".(length $data)."\n" or die $!;
                    print $data or die $!;
                    last unless $r;
                }
                print "E\n" or die $!;
                $anydone= 1;
            }
            last unless $anydone;
        }
        print "X\n" or die $!;
END

    my $w= $remote->{Write};
    print( $w "$started\n$logpat\n" ) or die $!;

    for (;;) {
        $_= $remote->{Read}->getline();
        chomp or die $!;
        last if m/^X$/;
        if (s/^M //) { logm($_); next; }
        m/^F (\S+)$/ or die "$_ $!";
        my $logfile= $1;
        my $df= $logfile;
        $df =~ s,.*/,,;
        $df = "serial-$df";
        logm("stashing $logfile as $df");

        my $dh= open_unique_stashfile(\$df);
        for (;;) {
            $_= $remote->{Read}->getline();
            chomp or die $!;
            last if m/^E$/;
            m/^D (\d+)$/ or die "$_ $!";
            my $len= $1;
            my $data;
            my $r= read $remote->{Read}, $data, $len;
            die $! unless $r==$len;
            print $dh $data or die "$df $!";
        }
        close $dh or die "$df $!";
    }

    remote_perl_script_done($remote);
}

sub try_cmd_output_save ($;$) {
    my ($cmd, $dfn) = @_;
    if (!defined $dfn) {
        $dfn= $cmd;
        $dfn =~ s,-,-,g;
        $dfn =~ s/ /_/g;
        $dfn =~ s/[^-+._,=0-9a-zA-Z]/#/g;
        $dfn= $ho->{Name}."-output-$dfn";
    }
    my $output;
    if (!eval {
        $output= target_cmd_output_root($ho, $cmd);
        1;
    }) {
        logm("failed to run $cmd: $@");
        return;
    }
    my $fh= open_unique_stashfile(\$dfn);
    print $fh $output or die $!;
    close $fh or die $!;
}

sub fetch_logs_host_guests () {
    my $logs= [qw(
                  /var/log/kern.log*
                  /var/log/syslog*
                  /var/log/daemon.log*

                  /var/log/dmesg*
                  /var/log/user.log*

                  /var/log/installer/syslog*
                  /var/log/installer/partman*

                  /var/log/xen/xend.log*
                  /var/log/xen/xend-debug.log*
                  /var/log/xen/xen-hotplug.log*
                  /var/log/xen/domain-builder-ng.log*
                  /var/log/xen/qemu-dm*
                  /var/log/xen/xl*.log
                  /var/log/xen/osstest*
                  /var/log/xen/console/*

                  /boot/config*

                  )];
    if (!try_fetch_logs($ho, $logs)) {
        logm("log fetching failed, trying hard host reboot...");
        if (!eval {
            target_reboot_hard($ho);
            1;
        }) {
            logm("host reboot failed, abandoning log fetches: $@");
            return;
        }
    }

    foreach my $cmd
        (
         'xl info',
         'cat /proc/cpuinfo',
         'xl list',
         'xm list',
         'xm list --long',
         'xenstore-ls -fp',
         'ifconfig',
         'route -vn',
         'brctl show',
    'ps wwwaxf -eo pid,tty,stat,time,nice,psr,pcpu,pmem,nwchan,wchan:25,args',
         ) {
            try_cmd_output_save($cmd);
        }

    my $sth= $dbh_tests->prepare(<<END);
        SELECT name FROM runvars WHERE flight=$flight AND job='$job'
            AND name LIKE '%_domname'
            ORDER BY name
END
    $sth->execute();
    my $row;
    while ($row= $sth->fetchrow_hashref) {
        my $gn= $row->{name};
        $gn =~ s/_domname$//;
        fetch_logs_guest($gn);
    }
    $sth->finish();
}

sub fetch_logs_guest ($) {
    my ($gn) = @_;
    logm("saving logs for $gn");
    my $gho= selectguest($gn);
    if (!eval {
        guest_find_domid($ho,$gho);
        1;
    }) {
        logm("cannot find domid: $@");
        return;
    }
    my $consolecmd= toolstack()->{Command}." console $gho->{Name}";
    try_cmd_output_save("sleep 1 | $consolecmd | cat",
                        "guest-$gho->{Name}-console");

    if (defined $gho->{Vcpus}) {
        foreach (my $vcpu=0; $vcpu < $gho->{Vcpus}; $vcpu++) {
            try_cmd_output_save("/usr/lib/xen/bin/xenctx $gho->{Domid} $vcpu");
        }
    }

    if (!eval {
        my $vnc= guest_vncsnapshot_begin($ho,$gho);
        guest_vncsnapshot_stash($ho,$gho,$vnc, "$gho->{Name}--vnc.jpeg");
        1;
    }) {
        logm("cannot get vnc snapshot: $@");
    }
}

fetch_logs_serial();
fetch_logs_host_guests();
logm("logs captured to $stash");
