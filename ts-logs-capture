#!/usr/bin/perl -w
# This is part of "osstest", an automated testing framework for Xen.
# Copyright (C) 2009-2013 Citrix Inc.
# 
# This program is free software: you can redistribute it and/or modify
# it under the terms of the GNU Affero General Public License as published by
# the Free Software Foundation, either version 3 of the License, or
# (at your option) any later version.
# 
# This program is distributed in the hope that it will be useful,
# but WITHOUT ANY WARRANTY; without even the implied warranty of
# MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the
# GNU Affero General Public License for more details.
# 
# You should have received a copy of the GNU Affero General Public License
# along with this program.  If not, see <http://www.gnu.org/licenses/>.

use strict qw(vars);
use Osstest;
use DBI;
use IO::File;
use POSIX;
use Osstest::TestSupport;

tsreadconfig();

if (!$mjobdb->jobdb_enable_log_capture) {
    logm("log capturing not enabled");
    exit 0;
}

our ($whhost) = @ARGV;
$whhost ||= 'host';
our $ho= selecthost($whhost);

sub try_fetch_logs ($$) {
    my ($lho, $logfilepats) = @_;
    my $ok= 0;
    foreach my $logfilepat (@$logfilepats) {
        my $logfileslist= $logfilepat;
        if ($logfileslist =~ m/[*?]/) {
            if (!eval {
                $logfileslist=
                    target_cmd_output_root($lho, <<END);
                        chmod a+r $logfilepat >/dev/null 2>&1 ||:
                        echo $logfilepat
END
                1;
            }) {
                logm("logfile $logfilepat pattern expansion failed: $@");
                next;
            }
            next if $logfileslist eq $logfilepat;
        }
        foreach my $logfile (split / /, $logfileslist) {
            my $llogfile= $logfile;
            $llogfile =~ s,/,-,g;
            $llogfile= "$lho->{Name}--$llogfile";
            logm("fetching $logfile to $llogfile");
            if (!eval {
                target_getfile_root($lho,60, $logfile,"$stash/$llogfile");
		chmod(0666&~umask, "$stash/$llogfile") or die "chmod $stash/$llogfile $!";
		if ($logfile !~ m/\.gz$/) {
		    stat("$stash/$llogfile") or die "$stash/$llogfile $!";
		    compress_stashed($llogfile) if(stat _)[7] > 100000;
		}
                1;
            }) {
                logm("logfile $logfile fetch failed: $@");
                next;
            }
        }
        $ok= 1;
    }
    return $ok;
}

sub try_cmd_output_save ($;$) {
    my ($cmd, $dfn) = @_;
    if (!defined $dfn) {
        $dfn= $cmd;
        $dfn =~ s,-,-,g;
        $dfn =~ s/ /_/g;
        $dfn =~ s/[^-+._,=0-9a-zA-Z]/#/g;
        $dfn= $ho->{Name}."-output-$dfn";
    }
    my $output;
    if (!eval {
        $output= target_cmd_output_root($ho, $cmd);
        1;
    }) {
        logm("failed to run $cmd: $@");
        return;
    }
    my $fh= open_unique_stashfile(\$dfn);
    print $fh $output or die $!;
    close $fh or die $!;
}

sub fetch_logs_host_guests () {
    my $logs= [qw(
                  /var/log/kern.log*
                  /var/log/syslog*
                  /var/log/daemon.log*
                  /var/log/messages*
                  /var/log/debug*

                  /var/log/dmesg*
                  /var/log/user.log*

                  /var/log/installer/syslog*
                  /var/log/installer/partman*

                  /var/log/xen/xend.log*
                  /var/log/xen/xend-debug.log*
                  /var/log/xen/xen-hotplug.log*
                  /var/log/xen/domain-builder-ng.log*
                  /var/log/xen/qemu-dm*
                  /var/log/xen/xl*.log
                  /var/log/xen/osstest*
                  /var/log/xen/xenstored*

                  /var/log/libvirt/libvirtd.log
                  /var/log/libvirt/libxl/*

                  /var/run/xenstored*
                  /var/log/xenstored*

                  /var/log/xen/console/*

                  /var/log/xen-tools/*

                  /boot/config*

                  /etc/xen/*

                  /home/osstest/osstest-confirm-booted.log

                  /var/core/*.core

                  )];
    if (!try_fetch_logs($ho, $logs)) {
        logm("log fetching failed, trying hard host reboot...");
        if (!eval {
            target_reboot_hard($ho);
            1;
        }) {
            logm("host reboot failed, abandoning log fetches: $@");
            return;
        }
	try_fetch_logs($ho, $logs);
    }

    foreach my $cmd
        (
         'xl info',
         'cat /proc/cpuinfo',
         'xl list',
         'xm list',
         'xm list --long',
         'xenstore-ls -fp',
         'ifconfig',
         'route -vn',
         'brctl show',
         'lvm lvs',
    'ps wwwaxf -eo pid,tty,stat,time,nice,psr,pcpu,pmem,nwchan,wchan:25,args',
         'lspci -vvv',
         'lspci -tv',
         'cat /proc/partitions',
         'virsh capabilities',
         'cat /proc/self/limits',
         ) {
            try_cmd_output_save($cmd);
        }

    my $sth= $dbh_tests->prepare(<<END);
        SELECT name FROM runvars WHERE flight=? AND job=?
            AND name LIKE '%_domname'
            ORDER BY name
END
    $sth->execute($flight, $job);
    my $row;
    while ($row= $sth->fetchrow_hashref) {
        my $gn= $row->{name};
        $gn =~ s/_domname$//;
        fetch_logs_guest($gn);
    }
    $sth->finish();
}

sub fetch_logs_guest ($) {
    my ($gn) = @_;
    logm("saving logs for $gn");
    my $gho= selectguest($gn,$ho);
    if (!eval {
        guest_find_domid($ho,$gho);
        1;
    }) {
        logm("cannot find domid: $@");
        return;
    }
    my $consolecmd= toolstack($ho)->consolecmd($gho);
    try_cmd_output_save("sleep 1 | $consolecmd | cat",
                        "guest-$gho->{Name}-console");

    if (defined $gho->{Vcpus}) {
        foreach (my $vcpu=0; $vcpu < $gho->{Vcpus}; $vcpu++) {
	    my $kernpath = guest_var($gho,'kernel_path',$r{xen_kernel_path});
	    my $sysmaparg = !defined $kernpath ? '' :
		$kernpath !~ m,/vmlinuz-, ? die "$kernpath ?" :
		"-s $`/System.map-$'";
	    try_cmd_output_save("/usr/lib/xen/bin/xenctx ".$sysmaparg.
				" $gho->{Domid} $vcpu");
        }
    }

    if (!eval {
        my $vnc= guest_vncsnapshot_begin($ho,$gho);
        guest_vncsnapshot_stash($ho,$gho,$vnc, "$gho->{Name}--vnc.jpeg");
        1;
    }) {
        logm("cannot get vnc snapshot: $@");
    }
}

serial_fetch_logs($ho);
fetch_logs_host_guests();
logm("logs captured to $stash");
