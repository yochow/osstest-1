#!/bin/bash

# This is part of "osstest", an automated testing framework for Xen.
# Copyright (C) 2009-2013 Citrix Inc.
# 
# This program is free software: you can redistribute it and/or modify
# it under the terms of the GNU Affero General Public License as published by
# the Free Software Foundation, either version 3 of the License, or
# (at your option) any later version.
# 
# This program is distributed in the hope that it will be useful,
# but WITHOUT ANY WARRANTY; without even the implied warranty of
# MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the
# GNU Affero General Public License for more details.
# 
# You should have received a copy of the GNU Affero General Public License
# along with this program.  If not, see <http://www.gnu.org/licenses/>.


set -ex

. cri-args-hostlists
. ap-common
branch=$1; shift
select_branch
info_linux_tree $branch ||:

tree_bisect=tree-bisect

check_stop daily.

determine_tree () {
	local treevarwhich=$1
	local tsrcvarlhs=$2
	local tsrcvarrhs=$3
	if [ "x$treevarwhich" = x ]; then return; fi

	for tsrcvarwhich in TREE TREEVCS; do
		eval "ttreeval=\$${tsrcvarlhs}${tsrcvarwhich}${tsrcvarrhs}"
		if [ "x$ttreeval" = x ]; then return; fi
		eval "${tsrcvarwhich}_${treevarwhich}=\$ttreeval"
		export "${tsrcvarwhich}_${treevarwhich}"
	done
}

determine_version () {
	local tversionvar=$1
	local tbranch=$2
	local treevarwhich=$3
	if [ "x$tbranch" = "x$branch" ] && ! $force_baseline; then
                if [ "x$FORCE_REVISION" != x ]; then
                        tversion="$FORCE_REVISION"
                else
        		tversion=`./ap-fetch-version "$tbranch"`
                fi
		determine_tree "$treevarwhich" "" _${treevarwhich}
		determine_tree "$treevarwhich" "" _${treevarwhich}_THIS
	else
		tversion=`./ap-fetch-version-baseline "$tbranch"`
		determine_tree "$treevarwhich" BASE_ _${treevarwhich}
		determine_tree "$treevarwhich" BASE_ _${treevarwhich}_THIS
	fi
	eval "$tversionvar=$tversion"
}

fetch_version () {
	determine_version fetch_version_result "$@"
	printf '%s\n' "$fetch_version_result"
}

case $branch in
    distros)
	treeurl=none;;
    *)
	treeurl=`./ap-print-url $branch`;;
esac

force_baseline=false
skipidentical=true
wantpush=$OSSTEST_PUSH

check_tested () {
	./sg-check-tested --debug --branch=$branch \
	  --blessings=${DAILY_BRANCH_TESTED_BLESSING:-$OSSTEST_BLESSING} \
	  "$@"
}

if [ "x$OLD_REVISION" = x ]; then
    case $branch in
	distros)
	    OSSTEST_NO_BASELINE=y
	    OLD_REVISION=flight-`check_tested`
	    ;;
	*) OLD_REVISION="`./ap-fetch-version-old $branch`";;
    esac
    export OLD_REVISION
fi

if [ "x$OSSTEST_NO_BASELINE" != xy ] ; then
	testedflight=`check_tested --revision-$tree="$OLD_REVISION"`

	if [ "x$testedflight" = x ]; then
		wantpush=false
		skipidentical=false
		force_baseline=true
		if [ "x$treeurl" != xnone: ]; then
			treearg=--tree-$tree=$treeurl
		fi
		tested_revision=`check_tested $treearg --print-revision=$tree`
		if [ "x$tested_revision" != x ]; then
			OLD_REVISION="$tested_revision"
		fi
	fi
fi

if [ "x$REVISION_XEN" = x ]; then
        REVISION_XEN="`fetch_version $xenbranch`"
        export REVISION_XEN
fi
if [ "x$REVISION_QEMU_UPSTREAM" = x ]; then
	case "$xenbranch" in
        xen-3.*|xen-4.[01]-*)
        	;;
	*)
		if [ "x$qemuubranch" = "xqemu-mainline" ] ; then
		    TREE_QEMU_UPSTREAM=$TREE_QEMU_MAINLINE
		    export TREE_QEMU_UPSTREAM
		fi
		REVISION_QEMU_UPSTREAM="`fetch_version $qemuubranch`"
		;;
        esac
        export REVISION_QEMU_UPSTREAM
fi
if [ "x$REVISION_LINUX" = x ]; then
	determine_version REVISION_LINUX ${linuxbranch:-linux} LINUX
        export REVISION_LINUX
fi
if [ "x$REVISION_LINUX_ARM" = x ]; then
    if [ "x$tree" = "xlinux" ] ; then
	TREE_LINUX_ARM=$TREE_LINUX
	export TREE_LINUX_ARM
	REVISION_LINUX_ARM=$REVISION_LINUX
        export REVISION_LINUX_ARM
    else
	determine_version REVISION_LINUX_ARM ${linuxbranch:-linux-arm-xen} \
		LINUX_ARM
        export REVISION_LINUX_ARM
    fi
fi
if [ "x$REVISION_SEABIOS" = x ]; then
    if [ "x$tree" = "xseabios" ]; then
	TREE_SEABIOS=$TREE_SEABIOS_UPSTREAM
	export TREE_SEABIOS
	determine_version REVISION_SEABIOS seabios SEABIOS
	export REVISION_SEABIOS
    else
	: REVISION_SEABIOS from Config.mk
    fi
fi
if [ "x$REVISION_OVMF" = x ]; then
    if [ "x$tree" = "xovmf" ]; then
	TREE_OVMF=$TREE_OVMF_UPSTREAM
	export TREE_OVMF
	determine_version REVISION_OVMF ovmf OVMF
	export REVISION_OVMF
    else
	: REVISION_OVMF from Config.mk
    fi
fi
if [ "x$REVISION_LIBVIRT" = x ]; then
	determine_version REVISION_LIBVIRT libvirt LIBVIRT
	export REVISION_LIBVIRT
fi
if [ "x$REVISION_RUMPUSERXEN" = x ]; then
	determine_version REVISION_RUMPUSERXEN rumpuserxen RUMPUSERXEN
	export REVISION_RUMPUSERXEN
fi
if [ "x$REVISION_LINUXFIRMWARE" = x ]; then
	determine_version REVISION_LINUXFIRMWARE linuxfirmware LINUXFIRMWARE
        export REVISION_LINUXFIRMWARE
fi

if [ "x$branch" != "xxen-unstable" ]; then
        export REVISION_LINUX_OLD=disable
fi

case "$tree" in
xen)
        realtree=$xenbranch
	NEW_REVISION=$REVISION_XEN
	;;
linux)
        realtree=linux
	NEW_REVISION=$REVISION_LINUX
	: ${GITFORCEFLAG:=$GITFORCEFLAG_TREE_LINUX_THIS}
	;;
osstest)
	determine_version REVISION_OSSTEST osstest
        realtree=
	NEW_REVISION=$REVISION_OSSTEST
	if [ "x$OSSTEST_USE_HEAD" != "xy" ] ; then
	    git reset --hard $REVISION_OSSTEST
	fi
	;;
qemuu)
	realtree=$qemuubranch
	NEW_REVISION=$REVISION_QEMU_UPSTREAM
        ;;
linuxfirmware)
	realtree=linuxfirmware
	NEW_REVISION=$REVISION_LINUXFIRMWARE
        ;;
libvirt)
	realtree=libvirt
	NEW_REVISION=$REVISION_LIBVIRT
	;;
rumpuserxen)
	realtree=rumpuserxen
	NEW_REVISION=$REVISION_RUMPUSERXEN
	export REVISION_LINUX_OLD=disable
	export REVISION_LIBVIRT=disable
	;;
seabios)
	realtree=seabios
	NEW_REVISION=$REVISION_SEABIOS
	;;
ovmf)
	realtree=ovmf
	NEW_REVISION=$REVISION_OVMF
	;;
*)
	NEW_REVISION=''
	wantpush=false
	;;
esac

if [ "x$OLD_REVISION" = xdetermine-late ]; then
	OLD_REVISION="`./ap-fetch-version-baseline-late $branch $NEW_REVISION`"
fi

case $branch in
distros) makeflight=./make-distros-flight ;;
*)       makeflight=./make-flight ;;
esac

if [ "x$NEW_REVISION" = "x$OLD_REVISION" ]; then
        wantpush=false
	for checkbranch in x $BRANCHES_ALWAYS; do
		if [ x"$branch" = x"$checkbranch" ]; then
			skipidentical=false
		fi
	done
	if $skipidentical; then
		echo 'up to date'
                exit 0
        fi
fi

$DAILY_BRANCH_PREMAKE_HOOK
flight=`$makeflight $branch $xenbranch $OSSTEST_BLESSING "$@"`
$DAILY_BRANCH_POSTMAKE_HOOK

heading=tmp/$flight.heading-info
: >$heading
sgr_args+=" --include-begin=$heading"

if $force_baseline; then
	subject_prefix="[$branch baseline test] "
	cat >>$heading <<END
"Old" tested version had not actually been tested; therefore in this
flight we test it, rather than a new candidate.  The baseline, if
any, is the most recent actually tested revision.

END
fi

revlog=tmp/$flight.revision-log

case "$NEW_REVISION/$OLD_REVISION" in
/flight-[0-9]*)
	echo >&2 "SGR COMPARISON AGAINST ${OLD_REVISION}"
	sgr_args+=" --that-flight=${OLD_REVISION#flight-}"
	;;
*/*[^0-9a-f]* | *[^0-9a-f]*/*)
        echo >&2 "NO SGR COMPARISON badchar $NEW_REVISION/$OLD_REVISION"
        ;;
[0-9a-f]*/)
        sgr_args+=" --this-$tree=$NEW_REVISION"
	;;
[0-9a-f]*/[0-9a-f]*)
        sgr_args+=" --machine-readable-output=$mrof"
        sgr_args+=" --this-$tree=$NEW_REVISION"
        sgr_args+=" --that-$tree=$OLD_REVISION"

        if [ "$realtree" ] && [ "x$NEW_REVISION" != "x$OLD_REVISION" ] \
	   && [ "x$GITFORCEFLAG" = x ]; then
                ./adhoc-revtuple-generator >$revlog -S \
                        "$treeurl#$OLD_REVISION-$NEW_REVISION" \

                case "$realtree" in
                xen-4*|xen-unstable)
                    oldqemu=`./ap-qemu-revision $realtree $OLD_REVISION`
                    newqemu=`./ap-qemu-revision $realtree $NEW_REVISION`
                    if [ "$oldqemu" ] && [ "$newqemu" ]; then
                        echo >>$revlog ========================================
                        ./adhoc-revtuple-generator >>$revlog -S \
                            "`./ap-qemu-url $realtree`#$oldqemu-$newqemu"
                    else
                        echo >>$revlog '(qemu changes not included)'
                    fi
                    ;;
                esac

                cat <<END >tmp/$flight.people-touched
People who touched revisions under test:
END
                ./adhoc-people-touched-filter <$revlog \
                        >>tmp/$flight.people-touched
		touched_lines=`wc -l <tmp/$flight.people-touched`
		if [ $touched_lines -gt 300 ]; then
	                cat <<END >tmp/$flight.people-touched
$(( $touched_lines - 1 )) people touched revisions under test,
not listing them all
END
		fi
                sgr_args+=" --include=tmp/$flight.people-touched"
        fi
        ;;
*)
        echo >&2 "NO SGR COMPARISON wronglen $NEW_REVISION/$OLD_REVISION"
        ;;
esac

sgr_args+=" $EXTRA_SGR_ARGS"

: $flight $branch $OSSTEST_BLESSING $sgr_args
$DAILY_BRANCH_PREEXEC_HOOK
execute_flight $flight $OSSTEST_BLESSING
start_email $flight $branch "$sgr_args" "$subject_prefix"

push=false
if grep '^tolerable$' $mrof >/dev/null 2>&1; then push=$wantpush; fi
if test -f $branch.force; then push=$OSSTEST_PUSH; fi
if test -n "$NEW_REVISION" && grep -xF $NEW_REVISION $branch.force-rev; then push=$OSSTEST_PUSH; fi
if test -f $branch.block; then push=false; fi

if test -e $mrof && test -e $tree_bisect && ! grep '^broken' $mrof; then
	with-lock-ex -w $tree_bisect/$mrof.lock bash -xec "
		rm -f $tree_bisect/$mrof.in.new
		cp $mrof $tree_bisect/$mrof.in.new
		cd $tree_bisect
		mv -f $mrof.in.new $mrof.in
	"
fi

if ! $wantpush; then
        echo
	if [ "x$NEW_REVISION" = "x$OLD_REVISION" ]; then
	        echo "Published tested tree is already up to date."
	else
		echo "Push not applicable."
	fi
        echo
elif $push; then
        echo
        echo "Pushing revision $to_push:"
        echo
        to_push=`sed -n "s/^version this $tree //p" <$mrof`
	case "$to_push" in
	*[^0-9a-f]*)
		echo >&2 "BAD PUSH REVISION $to_push"
		;;
	[0-9a-f]*)
	        if ./ap-push $branch $to_push 2>&1; then
			rm -f $branch.push $branch.force-rev
			perl -i~ -pe '
	                        next unless m/^Subject: / && !$subsequent++;
	                        s/$/ - PUSHED/;
	                ' tmp/$flight.email
	        fi
		;;
	*)	echo >&2 "BAD/MISSING PUSH REVISION $to_push" ;;
	esac
else
        echo
        echo Not pushing.
        echo
fi

if [ -f $revlog ]; then
    revlog_lines=`wc -l <$revlog`
    if [ $revlog_lines -lt 300 ]; then
        echo ------------------------------------------------------------
        cat $revlog
    else
        echo "(No revision log; it would be" $revlog_lines "lines long.)"
    fi
fi

publish_send_email $flight
