#!/bin/bash
set -ex

. cri-args-hostlists
. ap-common
branch=$1; shift
select_branch
info_linux_tree $branch ||:

tree_bisect=tree-bisect

check_stop daily.

determine_tree () {
	local treevarwhich=$1
	local tsrcvar=$2
	if [ "x$treevarwhich" = x ]; then return; fi
	eval "ttreeurl=\$$tsrcvar"
	if [ "x$ttreeurl" = x ]; then return; fi
	eval "TREE_$treevarwhich=\$ttreeurl"
	export TREE_$treevarwhich
}

determine_version () {
	local tversionvar=$1
	local tbranch=$2
	local treevarwhich=$3
	if [ "x$tbranch" = "x$branch" ]; then
                if [ "x$FORCE_REVISION" != x ]; then
                        tversion="$FORCE_REVISION"
                else
        		tversion=`./ap-fetch-version "$tbranch"`
                fi
		determine_tree "$treevarwhich" TREE_${treevarwhich}
		determine_tree "$treevarwhich" TREE_${treevarwhich}_THIS
	else
		tversion=`./ap-fetch-version-baseline "$tbranch"`
		determine_tree "$treevarwhich" BASE_TREE_${treevarwhich}
		determine_tree "$treevarwhich" BASE_TREE_${treevarwhich}_THIS
	fi
	eval "$tversionvar=$tversion"
}

fetch_version () {
	determine_version fetch_version_result "$@"
	printf '%s\n' "$fetch_version_result"
}

skipidentical=true
wantpush=$OSSTEST_PUSH

if [ "x$OLD_REVISION" = x ]; then
        OLD_REVISION="`./ap-fetch-version-old $branch`"
        export OLD_REVISION
fi

testedflight=`./sg-check-tested --debug --branch=$branch \
  --blessings=$OSSTEST_BLESSING --revision-$tree="$OLD_REVISION"`

if [ "x$testedflight" = x ]; then
        wantpush=false
        skipidentical=false
        FORCE_REVISION=$OLD_REVISION
        export FORCE_REVISION
        OLD_REVISION=`./sg-check-tested --debug --branch=$branch \
          --blessings=$OSSTEST_BLESSING --print-revision=$tree`
        if [ "x$OLD_REVISION" = x ]; then
                OLD_REVISION="$FORCE_REVISION"
        fi
fi

if [ "x$REVISION_XEN" = x ]; then
        REVISION_XEN="`fetch_version $xenbranch`"
        export REVISION_XEN
fi
if [ "x$REVISION_QEMU_UPSTREAM" = x ]; then
	case "$xenbranch" in
        xen-3.*|xen-4.[01]-*)
        	;;
	xen-unstable)
		REVISION_QEMU_UPSTREAM="`fetch_version \
				qemu-upstream-${xenbranch#xen-}`"
		;;
        esac
        export REVISION_QEMU_UPSTREAM
fi
if [ "x$REVISION_LINUX" = x ]; then
	determine_version REVISION_LINUX $linuxbranch LINUX
        export REVISION_LINUX
fi

case "$tree" in
xen)
        realtree=$xenbranch
	NEW_REVISION=$REVISION_XEN
	;;
linux)
        realtree=linux
	NEW_REVISION=$REVISION_LINUX
	export REVISION_LINUX_XCP=disable
	export REVISION_LINUX_OLD=disable
	;;
osstest)
        realtree=
	git fetch -f $HOME/testing.git incoming:incoming
	git fetch $HOME/testing.git pretest:incoming
	git reset --hard incoming
	NEW_REVISION=`git-rev-parse HEAD^0`
	;;
qemuu)
	realtree=qemu-upstream-${xenbranch#xen-}
	NEW_REVISION=$REVISION_QEMU_UPSTREAM
        ;;
*)
	NEW_REVISION=''
	wantpush=false
	;;
esac

if [ "x$NEW_REVISION" = "x$OLD_REVISION" ]; then
        wantpush=false
	for checkbranch in x $BRANCHES_ALWAYS; do
		if [ x"$branch" = x"$checkbranch" ]; then
			skipidentical=false
		fi
	done
	if $skipidentical; then
		echo 'up to date'
                exit 0
        fi
fi

$DAILY_BRANCH_PREMAKE_HOOK
flight=`./make-flight $branch $xenbranch $OSSTEST_BLESSING "$@"`

revlog=tmp/$flight.revision-log

case "$NEW_REVISION/$OLD_REVISION" in
*/*[^0-9a-f]* | *[^0-9a-f]*/*)
        echo >&2 "NO SGR COMPARISON badchar $NEW_REVISION/$OLD_REVISION"
        ;;
[0-9a-f]*/[0-9a-f]*)
        sgr_args+=" --machine-readable-output=$mrof"
        sgr_args+=" --this-$tree=$NEW_REVISION"
        sgr_args+=" --that-$tree=$OLD_REVISION"

        if [ "$realtree" ] && [ "x$NEW_REVISION" != "x$OLD_REVISION" ]; then
                treeurl=`./ap-print-url $branch`
                ./adhoc-revtuple-generator >$revlog -S \
                        "$treeurl#$OLD_REVISION-$NEW_REVISION" \

                case "$realtree" in
                xen-4*|xen-unstable)
                    oldqemu=`./ap-qemu-revision $realtree $OLD_REVISION`
                    newqemu=`./ap-qemu-revision $realtree $NEW_REVISION`
                    if [ "$oldqemu" ] && [ "$newqemu" ]; then
                        echo >>$revlog ========================================
                        ./adhoc-revtuple-generator >>$revlog -S \
                            "`./ap-qemu-url $realtree`#$oldqemu-$newqemu"
                    else
                        echo >>$revlog '(qemu changes not included)'
                    fi
                    ;;
                esac

                cat <<END >tmp/$flight.people-touched
People who touched revisions under test:
END
                ./adhoc-people-touched-filter <$revlog \
                        >>tmp/$flight.people-touched
                sgr_args+=" --include=tmp/$flight.people-touched"
        fi
        ;;
*)
        echo >&2 "NO SGR COMPARISON wronglen $NEW_REVISION/$OLD_REVISION"
        ;;
esac

execute_flight $flight $OSSTEST_BLESSING
start_email $flight $branch "$sgr_args"

push=false
if grep '^tolerable$' $mrof >/dev/null 2>&1; then push=$wantpush; fi
if test -f $branch.force; then push=$OSSTEST_PUSH; fi
if grep -xF $NEW_REVISION $branch.force-rev; then push=$OSSTEST_PUSH; fi
if test -f $branch.block; then push=false; fi

if test -e $mrof && test -e $tree_bisect; then
	with-lock-ex -w $tree_bisect/$mrof.lock bash -xec "
		rm -f $tree_bisect/$mrof.in.new
		cp $mrof $tree_bisect/$mrof.in.new
		cd $tree_bisect
		mv -f $mrof.in.new $mrof.in
	"
fi

if ! $wantpush; then
        echo
        echo "Published tested tree is already up to date."
        echo
elif $push; then
        echo
        echo "Pushing revision $to_push:"
        echo
        to_push=`sed -n "s/^version this $tree //p" <$mrof`
	case "$to_push" in
	*[^0-9a-f]*)
		echo >&2 "BAD PUSH REVISION $to_push"
		;;
	[0-9a-f]*)
	        if ./ap-push $branch $to_push 2>&1; then
			rm -f $branch.push $branch.force-rev
			perl -i~ -pe '
	                        next unless m/^Subject: / && !$subsequent++;
	                        s/$/ - PUSHED/;
	                ' tmp/$flight.email
	        fi
		;;
	*)	echo >&2 "BAD/MISSING PUSH REVISION $to_push" ;;
	esac
else
        echo
        echo Not pushing.
        echo
fi

if [ -f $revlog ]; then
    revlog_lines=`wc -l <$revlog`
    if [ $revlog_lines -lt 300 ]; then
        echo ------------------------------------------------------------
        cat $revlog
    else
        echo "(No revision log; it would be" $revlog_lines "lines long.)"
    fi
fi

publish_send_email $flight
