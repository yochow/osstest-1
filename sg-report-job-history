#!/usr/bin/perl -w

# This is part of "osstest", an automated testing framework for Xen.
# Copyright (C) 2009-2013 Citrix Inc.
# 
# This program is free software: you can redistribute it and/or modify
# it under the terms of the GNU Affero General Public License as published by
# the Free Software Foundation, either version 3 of the License, or
# (at your option) any later version.
# 
# This program is distributed in the hope that it will be useful,
# but WITHOUT ANY WARRANTY; without even the implied warranty of
# MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the
# GNU Affero General Public License for more details.
# 
# You should have received a copy of the GNU Affero General Public License
# along with this program.  If not, see <http://www.gnu.org/licenses/>.


use strict qw(vars);

use DBI;
use Osstest;
use IO::Handle;
use HTML::Entities;

use Osstest::TestSupport;

our (@blessings,@branches);
our $limit= 100;
our $htmlout;

open DEBUG, ">/dev/null";

while (@ARGV && $ARGV[0] =~ m/^-/) {
    $_= shift @ARGV;
    last if m/^--?$/;
    if (m/^--(job|flight)\=(.*)$/) {
        $$1= $2;
    } elsif (m/^--(limit)\=([1-9]\d*)$/) {
        $$1= $2;
    } elsif (m/^--html-dir=(.*)$/) {
        $htmlout= $1;
    } elsif (m/^--branches?=(.*)$/) {
        push @branches, split ',', $1;
    } elsif (m/^--blessings?=(.*)$/) {
        push @blessings, split ',', $1;
    } elsif (m/^--debug/) {
        open DEBUG, ">&2" or die $!;
        DEBUG->autoflush(1);
    } else {
        die "$_ ?";
    }
}

@ARGV==0 or die;

csreadconfig();
@blessings= qw(real) if !@blessings;

our @jobs;

sub findflight () {
    my $branches= $dbh_tests->selectcol_arrayref(<<END, {}, $flight);
        SELECT branch FROM flights WHERE flight=?
END
    die "$flight ? @$branches ?" if @$branches!=1;
    @branches= @$branches;

    my $selectq= $dbh_tests->prepare(<<END);
        SELECT job FROM jobs WHERE flight=? ORDER BY JOB
END
    $selectq->execute($flight);
    while (my ($j) = $selectq->fetchrow_array) { push @jobs, $j; }
}

if (defined($flight)) {
    die if defined $job;
    die if @branches;
    findflight();
} else {
    die unless defined $job;
    die unless @branches;
    push @jobs, $job;
}

our $failstepq= $dbh_tests->prepare(<<END);
        SELECT * FROM steps
         WHERE flight=? AND job=?
           AND status!='pass'
      ORDER BY stepno
         LIMIT 1
END

our $green=  '#008800';
our $red=    '#ff8888';
our $yellow= '#ffff00';
our $purple= '#ff00ff';

sub run_getinfo ($) {
    my ($f) = @_;
    my $status= $f->{status};
    if ($status eq 'pass') {
        return { Summary => "($status)", Colour => $green };
    } elsif ($status eq 'fail') {
        $failstepq->execute($f->{flight}, $f->{job});
        my $fs= $failstepq->fetchrow_hashref();
        if (!defined $fs) {
            return { Summary => "(unknown)", Colour => $yellow };
        } elsif ($fs->{status} eq 'fail') {
            return { Summary => "$fs->{testid}", Colour => $red };
        } else {
            return { Summary => "$fs->{testid} $fs->{status}",
                     Colour => $red };
        }
    } elsif ($status eq 'blocked') {
        return { Summary => "blocked", Colour => $purple },
    } else {
        return { Summary => "($f->{status})", Colour => $yellow };
    }
}

our $revisionsq= $dbh_tests->prepare(<<END);
        SELECT * FROM runvars
         WHERE flight=? AND job=?
           AND name LIKE E'built\\_revision\\_\%'
END

sub add_revisions ($$$$) {
    my ($revmap, $flightnum, $j, $sfx) = @_;
    $revisionsq->execute($flightnum, $j);
    while (my $row= $revisionsq->fetchrow_hashref()) {
        my $n= $row->{name};
        $n =~ s/^built_revision_//;
        $revmap->{$n.$sfx}= $row->{val};
    }
}

our $buildsq= $dbh_tests->prepare(<<END);
        SELECT * FROM runvars
         WHERE flight=? AND job=?
           AND name LIKE E'\%buildjob'
END

sub altcolour ($) {
    my ($bool) = @_;
    return "bgcolor=\"#".(qw(d0d0d0 ffffff))[$bool]."\"";
}

sub processjobbranch ($$) {
    my ($j,$bra) = @_;

    my %rev_grid_col;
    my @rev_grid_cols;
    my @test_rows;

    my $blessingscond= '('.join(' OR ', map { "blessing=?" } @blessings).')';
    my $cond = "job = ? AND $blessingscond";
    my (@params) = ($j, @blessings);
    if (defined $bra) {
        $cond .= <<END;
           AND branch = ?
END
        push @params, $bra;
    }
    my $flightsq= $dbh_tests->prepare(<<END);
        SELECT *
          FROM jobs JOIN flights USING (flight)
         WHERE ($cond)
      ORDER BY flight DESC
         LIMIT 100
END
    $flightsq->execute(@params);

    my $hostsq= $dbh_tests->prepare(<<END);
        SELECT DISTINCT name
	 FROM runvars
	 JOIN flights USING (flight)
	WHERE ($cond)
     ORDER BY name;
END
    $hostsq->execute(@params);
    my @hostvarcols;
    while (my ($hostvar) = $hostsq->fetchrow_array()) {
	next unless $hostvar =~ m/(^|_)host$/;
	push @hostvarcols, $hostvar;
    }

    my $hostq= $dbh_tests->prepare(<<END);
        SELECT val FROM runvars WHERE flight=? AND job=? AND name=?
END

    while (my $f= $flightsq->fetchrow_hashref()) {
        my $ri= run_getinfo($f);

	$ri->{Hosts} = [ ];
	foreach my $hostvar (@hostvarcols) {
	    $hostq->execute($f->{flight}, $f->{job}, $hostvar);
	    my ($host) = $hostq->fetchrow_array();
	    push @{ $ri->{Hosts} }, ($host // "-");
	}

        my %revisions;
        add_revisions(\%revisions, $f->{flight}, $f->{job}, '');
        
        $buildsq->execute($f->{flight}, $f->{job});
        while (my $bld= $buildsq->fetchrow_hashref()) {
            my $bn= $bld->{name};
            $bn =~ s/buildjob$//;
            my ($oflight,$ojob) = flight_otherjob($f->{flight}, $bld->{val});
            add_revisions(\%revisions, $oflight, $ojob, " ($bn)");
        }
        my @rev_cols;
        foreach my $revk (sort keys %revisions) {
            my $col= $rev_grid_col{$revk};
            if (!defined $col) {
                $col= @rev_grid_cols;
                push @rev_grid_cols, $revk;
                $rev_grid_col{$revk}= $col;
            }
            $rev_cols[$col]= $revisions{$revk};
        }
        $ri->{Revisions}= \@rev_cols;
        $ri->{Flight}= $f;

        push @test_rows, $ri;
    }

    if (defined $htmlout) {
        my ($title,$html_file,$url);
        if (defined $bra) {
            $title= "$j $bra";
            $html_file= "history.$j.$bra.html";
        } else {
            $title= $j;
            $html_file= "history.$j.html";
        }
        $html_file= "$htmlout/$html_file";
        open H, "> $html_file.new" or die "$html_file $!";
        $title= encode_entities($title);
        print H "<html><head><title>$title</title></head><body>\n";
        print H "<h1>$title</h1>\n";
        print H "<table rules=all>";
        print H "<tr><th>flight</th><th>branch</th><th>failure</th>\n";
        print H "<th>", (join ", ", @hostvarcols), "</th>\n";
        foreach my $c (@rev_grid_cols) {
            print H "<th>".encode_entities($c)."</th>\n";
        }
        print H "</tr>\n";
        my $alternate= 0;
        my @last_revs;
        my @alt_revs= ('0')x $#rev_grid_cols;
        foreach my $r (@test_rows) {
            my $colour= "bgcolor=\"$r->{Colour}\"";
            my $altcolour= altcolour($alternate);
            print H "<tr $altcolour>";
            my $flt= $r->{Flight}{flight};
            $url= "$c{ReportHtmlPubBaseUrl}/$flt";
            print H "<td><a href=\"$url\">$flt</a></td>\n";
            print H "<td>".encode_entities($r->{Flight}{branch})."</td>\n";
            $url= "$c{ReportHtmlPubBaseUrl}/$flt/".encode_entities($j)."/";
            print H "<td $colour><a href=\"$url\">".
                encode_entities($r->{Summary})."</a></td>\n";
            my $lastrev;
            my $hosts = join ", ", map { $_ // "-" } @{ $r->{Hosts} };
            print H "<td>".encode_entities($hosts)."</td>\n";
            foreach my $i (0..$#rev_grid_cols) {
                my $v= $r->{Revisions}[$i];
                my $same=
                    !defined($last_revs[$i]) ? !defined($v) :
                    !defined($v) ? 0 :
                    $last_revs[$i] eq $v;
                $alt_revs[$i] ^= !$same;
                print H "<td ".altcolour($alt_revs[$i]).">";
                if (defined $v) {
                    my $vp= $v;
                    if (defined $lastrev && $v eq $lastrev) {
                        $vp= '<-';
                    } else {
                        $vp =~ s/^((?:\d+\:)?[0-9a-f]{12})([0-9a-f].*)$/$1/;
                    }
                    print H "<kbd>".encode_entities($vp)."</kbd>";
                }
                $lastrev= $v;
                $last_revs[$i]= $v;
                print H "</td>";
            }
            print H "</tr>\n";
            $alternate ^= 1;
        }
        print H "</table></body></html>\n";
        H->error and die $!;
        close H or die $!;
        rename "$html_file.new", $html_file or die "$html_file $!";
        #print "wrote $html_file\n";
    }
}

sub processjob ($) {
    my ($j) = @_;
    processjobbranch($j,undef);
    processjobbranch($j,$_) foreach @branches;
}

db_begin_work($dbh_tests, [qw(flights)]);
foreach my $j (@jobs) { processjob($j); }
