#!/usr/bin/tclsh8.4
# -*- Tcl -*- 
# usage: ./sg-run-tests <flight>

source osstestlib.tcl

readconfig

proc main {} {
    global flight jobinfo builds anyfailed

    set-flight
    db-open
    
    set tests {}
    set anyfailed 0

    pg_execute -array jobinfo dbh "
        SELECT job, recipe FROM jobs
			WHERE	flight=$flight
			AND	job like 'test%'
			AND   ( status = 'queued'
			  OR	status = 'preparing'
			  OR	status = 'retriable' )
		ORDER BY job
    " run-job

    if {$anyfailed} {
        logputs stdout "at least one test failed"
    }
}

proc run-job {} {
    global jobinfo builds flight ok need_hosts

    if {![prepare-job $jobinfo(job)]} return

    set ok 1
    setstatus running

               catching-otherwise blocked   check-not-blocked
    if {!$ok} return

    set need_hosts [need-hosts/$jobinfo(recipe)]

    per-host-ts broken host-install (*) ts-host-install-twice
    per-host-ts .      xen-install  {}  ts-xen-install
    per-host-ts .      xen-boot     {}  ts-host-reboot

    if {$ok} { catching-otherwise fail      run-job/$jobinfo(recipe)      }
               catching-otherwise broken    capture-logs
    if {$ok} { setstatus pass                                             }
}

proc per-host-ts {failst ident1 ident2 args} {
    global ok need_hosts flight jobinfo
    
    if {!$ok} return

    set awaitl {}
    foreach host $need_hosts {
	if {[regexp {^(.*)_host$} $host dummy which]} {
	    set which -$which
	} elseif {![string compare host $host]} {
	    set which {}
	} else {
	    set which --$host
	}
	set ident "$ident1$which$ident2"
        lappend awaitl [eval spawn-ts $failst $ident $args [list $host]]
    }

    set failed 0
    foreach host $need_hosts await $awaitl {
        if {![reap-ts $await]} {
            logputs stderr "$flight.$jobinfo(job) @$host $args failed"
            set failed 1
            set ok 0
        }
    }

    if {$failed} {
        setstatus $failst
    }
}

proc catching-otherwise {failst script} {
    global anyfail flight jobinfo ok

    if {[catch {
        uplevel 1 $script
    } emsg]} {
        logputs stderr "$flight.$jobinfo(job) $script failed: $emsg"
        set ok 0
        set anyfailed 1
	setstatus $failst
    }
}

proc capture-logs {} {
    per-host-ts broken capture-logs (*) ts-logs-capture
}

proc check-not-blocked {} {
    run-ts blocked * ts-xen-build-check
}

proc need-hosts/test-debian {} { return host }
proc run-job/test-debian {} {
    run-ts . = ts-debian-install
    run-ts . = ts-debian-fixup debian
    run-ts . = ts-guest-start debian
    test-guest host debian
}

proc need-hosts/test-win {} { return host }
proc run-job/test-win {} {
    run-ts . = ts-windows-install
    test-guest host win
}

proc need-hosts/test-pair {} { return {src_host dst_host} }
proc run-job/test-pair {} {
    run-ts . =              ts-debian-install      dst_host
    run-ts . =              ts-debian-fixup        dst_host          debian
    run-ts . =              ts-guests-nbd-mirror   dst_host src_host debian
    run-ts . =              ts-guest-start         src_host          debian
    run-ts . *              ts-guest-migrate       src_host dst_host debian
    run-ts . *              ts-guest-migrate       dst_host src_host debian
    run-ts . =              ts-remus-start         src_host dst_host debian
    run-ts . remus-run      ts-remus-check         src_host dst_host debian
    run-ts . =              ts-host-fail           src_host
    run-ts . remus-failover ts-remus-check         src_host dst_host debian
}

proc test-guest {h g} {
    run-ts . = ts-guest-saverestore $h $g
    run-ts . = ts-guest-localmigrate $h $g
    run-ts . = ts-guest-stop $h $g
}

main
