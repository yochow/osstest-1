#!/bin/bash
# usage
#   ./mg-debian-installer-update lenny i386 'firmware-bnx2 firmware-spong'

# This is part of "osstest", an automated testing framework for Xen.
# Copyright (C) 2009-2013 Citrix Inc.
# 
# This program is free software: you can redistribute it and/or modify
# it under the terms of the GNU Affero General Public License as published by
# the Free Software Foundation, either version 3 of the License, or
# (at your option) any later version.
# 
# This program is distributed in the hope that it will be useful,
# but WITHOUT ANY WARRANTY; without even the implied warranty of
# MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the
# GNU Affero General Public License for more details.
# 
# You should have received a copy of the GNU Affero General Public License
# along with this program.  If not, see <http://www.gnu.org/licenses/>.


set -e

. cri-getconfig

suite=$1
arch=$2
packages="$3"

fail () { echo >&2 "$0: $1"; exit 1; }

site=http://ftp.debian.org/debian/
sbase=$site/dists/$suite

case ${suite}_${arch} in
    *_i386|*_amd64)
        src=$sbase/main/installer-$arch/current/images/netboot/
        files="debian-installer/$arch/initrd.gz:initrd.gz debian-installer/$arch/linux:linux xen/vmlinuz:vmlinuz-xen xen/initrd.gz:initrd.gz-xen"
        ;;
    lenny_armhf|squeeze_armhf)
        # No such thing.
        exit 0
        ;;
    *_armhf)
        # Use the vexpress image, we are going to bash in our own
        # kernel+modules anyway.
        src=$sbase/main/installer-$arch/current/images/vexpress/netboot
        files='initrd.gz' # no kernel -- needs a newer kernel
        ;;
esac

pfile=$sbase/non-free/binary-$arch/Packages.bz2

dstroot=`getconfig TftpPath`/`getconfig TftpDiBase`/
date=`date +%Y-%m-%d`-$suite
dst=$arch/$date

cd $dstroot
mkdir -p $dst
cd $dst

for f in $files; do
        echo >&2 "fetching $f"
        s=${f/:*} ; d=${f/*:}
        echo >&2 "$src/$s => $d.new"
        curl -s $src/$s >$d.new
done

curl -s $pfile >Packages.bz2

for p in $packages; do
        set +e
        echo >&2 "collecting $p"
        pkgfile=`bzcat Packages.bz2 | grep-dctrl -PX $p -nsFilename`
        rc=$?
        set -e
        if [ $rc != 0 ]; then fail "package $p not found"; fi
        curl -s "$site/$pkgfile" >$p.deb
        rm -rf x
        dpkg-deb -x $p.deb x
        cd x; pax -x sv4cpio -s '%lib%/lib%' -w lib >../cpio; cd ..
        gzip -9f cpio
        mv cpio.gz $p.cpio.gz
        rm -rf x
done

# armhf requires a newer kernel than was in Wheezy for most
# platforms. Construct something suitable from the latest kernel in
# wheezy-backports.
if [ $arch = armhf ]; then
    bp="$sbase-backports"
    pfile=$bp/main/binary-armhf/Packages.bz2

    curl -s $pfile >Packages.bz2

    # Newer kernel often needs a newer initramfs-tools. Make that available
    echo >&2 "collecting backports initramfs-tools"
    pkgfile=`bzcat Packages.bz2 | grep-dctrl -PX initramfs-tools -nsFilename | sort -n -r | head -n1`
    rc=$?
    set -e
    if [ $rc != 0 ]; then fail "initramfs-tools package not found"; fi
    curl -s "$site/$pkgfile" >initramfs-tools.deb

    set +e
    echo >&2 "collecting armmp kernel"
    # Be careful to pickup the actual kernel package from the 'linux'
    # source and not a meta package from 'linux-latest'
    pkgfile=`bzcat Packages.bz2 | grep-dctrl -S linux | grep-dctrl -Pe ^linux-image-.*-armmp$ -nsFilename | sort -n -r | head -n1`
    rc=$?
    set -e
    if [ $rc != 0 ]; then fail "armmp kernel package not found"; fi
    curl -s "$site/$pkgfile" >armmp.deb
    dpkg-deb -x armmp.deb x
    cp x/boot/vmlinuz-* linux.armmp
    # The full set of modules is pretty large and not that
    # useful. Just pull in the ones we need for our particular
    # preseed, which is basically disk, net, filesystems and LVM.
    cd x; find lib -type d \
                   -o -type f -name modules.\* \
                   -o -type f -name \*.ko \
                      \( -path \*/kernel/lib/\* -o \
                         -path \*/kernel/crypto/\* -o \
                         -path \*/kernel/fs/mbcache.ko -o \
                         -path \*/kernel/fs/ext\* -o \
                         -path \*/kernel/fs/jbd\* -o \
                         -path \*/kernel/drivers/net/\* -o \
                         -path \*/kernel/drivers/ata/\* -o \
                         -path \*/kernel/drivers/scsi/\* -o \
                         -path \*/kernel/drivers/md/\* \) \
          |pax -x sv4cpio -s '%lib%/lib%' -d -w >../cpio; cd ..
    gzip -9f cpio
    mv cpio.gz armmp.cpio.gz
    rm -rf dtbs/
    mkdir dtbs/
    mv x/usr/lib/linux-image-*-armmp/*.dtb dtbs/
    tar -caf dtbs.tar.gz dtbs
    rm -rf x
fi

for f in $files; do
        s=${f/:*} ; d=${f/*:}
        mv -f $d.new $d
done

rm Packages.bz2

#cd $dstroot/$arch
#rm -rf current.new
#ln -s $date current.new
#mv -Tf current.new current

echo $date
echo >&2 "downloaded $dstroot/$arch/$date"
