#!/bin/bash
# usage
#   ./mg-debian-installer-update lenny i386 'firmware-bnx2 firmware-spong'

# This is part of "osstest", an automated testing framework for Xen.
# Copyright (C) 2009-2013 Citrix Inc.
# 
# This program is free software: you can redistribute it and/or modify
# it under the terms of the GNU Affero General Public License as published by
# the Free Software Foundation, either version 3 of the License, or
# (at your option) any later version.
# 
# This program is distributed in the hope that it will be useful,
# but WITHOUT ANY WARRANTY; without even the implied warranty of
# MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the
# GNU Affero General Public License for more details.
# 
# You should have received a copy of the GNU Affero General Public License
# along with this program.  If not, see <http://www.gnu.org/licenses/>.


set -e

. ./cri-getconfig
. ./mgi-common

suite=$1
arch=$2
packages="$3"

site=http://ftp.debian.org/debian/
sbase=$site/dists/$suite

case ${suite}_${arch} in
    lenny_armhf|squeeze_armhf|lenny_arm64|squeeze_arm64|wheezy_arm64)
        # No such thing.
        exit 0
        ;;
    *_i386|*_amd64)
        src=$sbase/main/installer-$arch/current/images/netboot/
        files="debian-installer/$arch/initrd.gz:initrd.gz debian-installer/$arch/linux:linux xen/vmlinuz:vmlinuz-xen xen/initrd.gz:initrd.gz-xen"
        ;;
    *_arm64)
        src=$sbase/main/installer-$arch/current/images/netboot/
        files="debian-installer/$arch/initrd.gz:initrd.gz \
               debian-installer/$arch/linux:linux"
        dtbs=$sbase/main/installer-$arch/current/images/device-tree/
        ;;
    wheezy_armhf)
        # Use the vexpress image, we are going to bash in our own
        # kernel+modules anyway.
        src=$sbase/main/installer-$arch/current/images/vexpress/netboot
        files='initrd.gz' # no kernel -- needs a newer kernel
        ;;
    *_armhf)
        src=$sbase/main/installer-$arch/current/images/netboot
        files='vmlinuz:linux initrd.gz'
        dtbs=$sbase/main/installer-$arch/current/images/device-tree/
        ;;
esac

tftpdiversion=`getconfig TftpDiVersion`
dstroot=`getconfig TftpPath`/`getconfig TftpDiBase`/
date=`date +%Y-%m-%d`
dst=$arch/$date-$suite

cd $dstroot
mkdir -p $dst
cd $dst

for f in $files; do
        echo >&2 "fetching $f"
        s=${f/:*} ; d=${f/*:}
        echo >&2 "$src/$s => $d.new"
        fetch $src/$s >$d.new
done

if [ "x$dtbs" != "x" ] ; then
    # Can't seem to get curl to globs.
    rm -rf dtbs
    mkdir dtbs
    ( cd dtbs && wget -nv -A README,\*.dtb -nd -nH -np -m  $dtbs )
    tar --mtime=./dtbs/README -cf dtbs.tar dtbs
    gzip -9nf dtbs.tar
fi

pfile=$sbase/non-free/binary-$arch/Packages.gz

fetch $pfile >Packages.gz

for p in $packages; do
        echo >&2 "collecting $p"
        fetch_debian_package "$site" Packages.gz -PX $p >$p.deb
        rm -rf x
        dpkg-deb -x $p.deb x
        cd x; pax -x sv4cpio -s '%lib%/lib%' -w -M norm lib >../cpio; cd ..
        gzip -9nf cpio
        mv cpio.gz $p.cpio.gz
        rm -rf x
done

# Some platforms require a newer kernel than is in Debian. Construct
# something suitable from the latest kernel ($bpok=flavour) in
# backports.
case ${suite}_${arch} in
    wheezy_armhf) bpok=armmp; need_initramfs=y;;
esac
if [ x$bpok != x ]; then
    bp="$sbase-backports"
    pfile=$bp/main/binary-$arch/Packages.gz

    fetch $pfile >Packages.gz

    if [ x$need_initramfs = xy ]; then
        # Newer kernel often needs a newer initramfs-tools. Make that
        # is available
        echo >&2 "collecting backports initramfs-tools"
        fetch_debian_package $site Packages.gz -PX initramfs-tools \
                      >initramfs-tools.deb
    fi

    set +e
    echo >&2 "collecting backports kernel"
    # Be careful to pickup the actual kernel package from the 'linux'
    # source and not a meta package from 'linux-latest'
    fetch_debian_package $site Packages.gz -Pe ^linux-image-.*-${bpok}$ \
                  >backports.deb
    dpkg-deb -x backports.deb x
    cp x/boot/vmlinuz-* linux.backports
    # The full set of modules is pretty large and not that
    # useful. Just pull in the ones we need for our particular
    # preseed, which is basically disk, net, filesystems and LVM.
    cd x; find lib -type d \
                   -o -type f -name modules.\* \
                   -o -type f -name \*.ko \
                      \( -path \*/kernel/lib/\* -o \
                         -path \*/kernel/crypto/\* -o \
                         -path \*/kernel/fs/mbcache.ko -o \
                         -path \*/kernel/fs/ext\* -o \
                         -path \*/kernel/fs/jbd\* -o \
                         -path \*/kernel/drivers/clk/\* -o \
                         -path \*/kernel/drivers/mmc/\* -o \
                         -path \*/kernel/drivers/phy/\* -o \
                         -path \*/kernel/drivers/usb/misc/\* -o \
                         -path \*/kernel/drivers/ata/\* -o \
                         -path \*/kernel/drivers/i2c/busses/\* -o \
                         -path \*/kernel/drivers/md/\* -o \
                         -path \*/kernel/drivers/net/\* -o \
                         -path \*/kernel/drivers/regulator/\* -o \
                         -path \*/kernel/drivers/scsi/\* -o \
                         -path \*/kernel/drivers/usb/dwc3/\* -o \
                         -path \*/kernel/drivers/usb/host/\* \) \
          |pax -x sv4cpio -s '%lib%/lib%' -d -w -M norm >../cpio; cd ..
    gzip -9nf cpio
    mv cpio.gz backports.cpio.gz
    if [ -d x/usr/lib/linux-image-*-${bpok}/ ] ; then
        rm -rf backports-dtbs/
        mkdir backports-dtbs/
        mv x/usr/lib/linux-image-*-${bpok}/*.dtb backports-dtbs/
        tar --mtime=./x/usr/lib -cf backports-dtbs.tar backports-dtbs
        gzip -9nf backports-dtbs.tar
    fi
    rm -rf x
fi

for f in $files; do
        s=${f/:*} ; d=${f/*:}
        mv -f $d.new $d
done

rm Packages.gz

if [ x$tftpdiversion = xcurrent ]; then
    cd $dstroot/$arch
    rm -rf current-$suite.new
    ln -s $date-$suite current-$suite.new
    mv -Tf current-$suite.new current-$suite
fi

echo "TftpDiVersion $date"
echo >&2 "downloaded $dstroot/$dst"
