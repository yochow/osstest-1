# This is part of "osstest", an automated testing framework for Xen.
# Copyright (C) 2009-2014 Citrix Inc.
# 
# This program is free software: you can redistribute it and/or modify
# it under the terms of the GNU Affero General Public License as published by
# the Free Software Foundation, either version 3 of the License, or
# (at your option) any later version.
# 
# This program is distributed in the hope that it will be useful,
# but WITHOUT ANY WARRANTY; without even the implied warranty of
# MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the
# GNU Affero General Public License for more details.
# 
# You should have received a copy of the GNU Affero General Public License
# along with this program.  If not, see <http://www.gnu.org/licenses/>.

stripy () {
  local out_vn="$1"; shift
  local out_0="$1"; shift
  local out_1="$1"; shift
  local out_val=0
  local this_val
  local this_cmp
  while [ $# != 0 ]; do
    this_val="$1"; shift
    this_cmp="$1"; shift
    if [ "x$this_val" = "x$this_cmp" ]; then
      out_val=$(( $out_val ^ 1 ))
    fi
  done
  eval "$out_vn=\"\$out_$out_val\""
}

branch_wants_rumpkernel_tests () {
  case "$branch" in
  osstest*) return 0;;
  rump*)    return 0;;
  xen-*)    return 0;;
  linux*)   return 0;;
  *)        return 1;;
  esac
}

branch_wants_migrupgrade_tests () {
  case "$branch" in
    xen-3.*-testing) return 1 ;;
    xen-4.0-testing) return 1 ;;
    xen-*) return 0;;
    *) return 1 ;;
  esac
}

xenbranch_xsm_variants () {
    case "$xenbranch" in
    xen-3.*-testing) echo "false";;
    xen-4.0-testing) echo "false";;
    xen-4.1-testing) echo "false";;
    xen-4.2-testing) echo "false";;
    xen-4.3-testing) echo "false";;
    xen-4.4-testing) echo "false";;
    xen-4.5-testing) echo "false";;
    *) echo "false true";
    esac
}

job_create_build () {
  job_create_build_filter_callback "$@" || return 0

  local job=$1; shift
  local recipe=$1; shift

  ./cs-job-create $flight $job $recipe $global_runvars "$@"
}

create_build_jobs () {

  local arch
  local pvops_kernel pvops_kconfig_overrides
  local suite suite_runvars
  local want_xend build_defxend build_extraxend
  local enable_ovmf
  local build_hostflags

  if [ "x$BUILD_LVEXTEND_MAX" != x ]; then
     BUILD_RUNVARS+=" build_lvextend_max=$BUILD_LVEXTEND_MAX "
  fi

  for arch in ${BUILD_ARCHES- i386 amd64 armhf }; do

    if [ "x$arch" = xdisable ]; then continue; fi

    case "$arch" in
    armhf)
      case "$branch" in
      linux-3.0) continue;;
      linux-3.4) continue;;
      linux-3.10) continue;;
      linux-3.14) continue;;
      linux-mingo-tip-master) continue;;
      linux-*) ;;
      qemu-upstream-4.2-testing) continue;;
      qemu-upstream-4.3-testing) continue;;
      qemu-upstream-4.4-testing) continue;;
      rumpuserxen) continue;;
      seabios) continue;;
      ovmf) continue;;
      esac
      case "$xenbranch" in
      xen-3.*-testing) continue;;
      xen-4.0-testing) continue;;
      xen-4.1-testing) continue;;
      xen-4.2-testing) continue;;
      esac
      pvops_kernel="
        tree_linux=$TREE_LINUX_ARM
        revision_linux=${REVISION_LINUX_ARM:-${DEFAULT_REVISION_LINUX_ARM}}
      "
      pvops_kconfig_overrides="
        kconfig_override_y=CONFIG_EXT4_FS
      "
      ;;
    *)
      case "$branch" in
      linux-arm-xen) continue;;
      esac
      pvops_kernel="
        tree_linux=$TREE_LINUX
        revision_linux=${REVISION_LINUX:-${DEFAULT_REVISION_LINUX}}
      "
      ;;
    esac

    case "$arch" in
    *)     suite=$defsuite;;
    esac

    if [ $suite != $defsuite ] ; then
        suite_runvars="host_suite=$suite"
    else
        suite_runvars=
    fi

    # In 4.4 onwards xend is off by default. If necessary we build a
    # separate set of binaries with xend enabled in order to run those
    # tests which use xend.
    # In 4.5 onwards we don't test xend anymore
    if [ -n "$WANT_XEND" ]; then
      want_xend=$WANT_XEND
    else
      case "$arch" in
        i386|amd64) want_xend=true;;
        *) want_xend=false;;
      esac
    fi

    case "$xenbranch" in
    xen-3.*-testing) build_defxend=$want_xend; build_extraxend=false;;
    xen-4.0-testing) build_defxend=$want_xend; build_extraxend=false;;
    xen-4.1-testing) build_defxend=$want_xend; build_extraxend=false;;
    xen-4.2-testing) build_defxend=$want_xend; build_extraxend=false;;
    xen-4.3-testing) build_defxend=$want_xend; build_extraxend=false;;
    xen-4.4-testing) build_defxend=false;      build_extraxend=$want_xend;;
    *)               build_defxend=false;      build_extraxend=false
    esac

    case "$xenbranch" in
    xen-3.*-testing) enable_ovmf=false;;
    xen-4.0-testing) enable_ovmf=false;;
    xen-4.1-testing) enable_ovmf=false;;
    xen-4.2-testing) enable_ovmf=false;;
    xen-4.3-testing) enable_ovmf=false;;
    xen-4.4-testing) enable_ovmf=true; enable_prevovmf=false;;
    *) enable_ovmf=true;
    esac
    enable_prevovmf=${enable_prevovmf:-$enable_ovmf}

    want_prevxen=n
    if branch_wants_migrupgrade_tests ; then
        # Only x86 for now
        if [ x$arch = xamd64 -o x$arch = xi386 ] ; then
            want_prevxen=y
        fi
    fi

    eval "
        arch_runvars=\"\$ARCH_RUNVARS_$arch\"
    "

    build_hostflags=share-build-$suite-$arch,arch-$arch,suite-$suite,purpose-build

    for enable_xsm in $(xenbranch_xsm_variants) ; do
      if [ x$enable_xsm = xtrue ] ; then
        xsm_suffix="-xsm"
      else
        xsm_suffix=""
      fi
      job_create_build build-$arch$xsm_suffix build                          \
                arch=$arch enable_xend=$build_defxend enable_ovmf=$enable_ovmf\
                enable_xsm=$enable_xsm                                       \
        tree_qemu=$TREE_QEMU                                                 \
        tree_qemuu=$TREE_QEMU_UPSTREAM                                       \
        tree_xen=$TREE_XEN                                                   \
        tree_seabios=$TREE_SEABIOS                                           \
        tree_ovmf=$TREE_OVMF                                                 \
                $RUNVARS $BUILD_RUNVARS $BUILD_XEN_RUNVARS $arch_runvars     \
                $suite_runvars                                               \
                host_hostflags=$build_hostflags                              \
                revision_xen=$REVISION_XEN                                   \
                revision_qemu=$REVISION_QEMU                                 \
                revision_qemuu=$REVISION_QEMU_UPSTREAM                       \
                revision_seabios=$REVISION_SEABIOS                           \
                revision_ovmf=$REVISION_OVMF
    done

    if [ x$want_prevxen = xy ] ; then
        # TODO could find latest pass on that branch and attempt to reuse.
        #bfiprevxen=...
        #
        # To avoid the need for TREE_PREVQEMU, TREE_PREVOVMF etc we
        # only pass tree_xen and revision_xen here and therefore
        # pickup the versions implicitly selected by the
        # $REVISION_PREVXEN.
        job_create_build build-$arch-prev build                       \
                    arch=$arch enable_xend=false enable_ovmf=$enable_prevovmf\
                    enable_xsm=false                                         \
            tree_xen=$TREE_XEN                                               \
                    $RUNVARS $BUILD_RUNVARS $BUILD_XEN_RUNVARS $arch_runvars \
                    $suite_runvars                                           \
                    host_hostflags=$build_hostflags                          \
                    revision_xen=$REVISION_PREVXEN
    fi

    if [ $build_extraxend = "true" ] ; then
    job_create_build build-$arch-xend build                                  \
                arch=$arch enable_xend=true enable_ovmf=$enable_ovmf         \
        tree_qemu=$TREE_QEMU                                                 \
        tree_qemuu=$TREE_QEMU_UPSTREAM                                       \
        tree_xen=$TREE_XEN                                                   \
                $RUNVARS $BUILD_RUNVARS $BUILD_XEN_RUNVARS $arch_runvars     \
                $suite_runvars                                               \
                host_hostflags=$build_hostflags                              \
                revision_xen=$REVISION_XEN                                   \
                revision_qemu=$REVISION_QEMU                                 \
                revision_qemuu=$REVISION_QEMU_UPSTREAM
    fi

    job_create_build build-$arch-pvops build-kern                            \
                arch=$arch kconfighow=xen-enable-xen-config                  \
                $RUNVARS $BUILD_RUNVARS $BUILD_LINUX_RUNVARS $arch_runvars   \
                $suite_runvars                                               \
                host_hostflags=$build_hostflags                              \
                $pvops_kernel $pvops_kconfig_overrides                       \
                ${TREEVCS_LINUX:+treevcs_linux=}${TREEVCS_LINUX}             \
                tree_linuxfirmware=$TREE_LINUXFIRMWARE                       \
                revision_linuxfirmware=$REVISION_LINUXFIRMWARE

    if [ "x$REVISION_LIBVIRT" != xdisable ]; then

    job_create_build build-$arch-libvirt build-libvirt                       \
                arch=$arch                                                   \
        tree_xen=$TREE_XEN                                                   \
                $RUNVARS $BUILD_RUNVARS $BUILD_LIBVIRT_RUNVARS $arch_runvars \
                $suite_runvars                                               \
                host_hostflags=$build_hostflags                              \
                buildjob=${bfi}build-$arch                                   \
                tree_libvirt=$TREE_LIBVIRT revision_libvirt=$REVISION_LIBVIRT\

    fi

    if branch_wants_rumpkernel_tests; then

    case $arch in
    i386|amd64)
    job_create_build build-$arch-rumpuserxen build-rumpuserxen               \
                arch=$arch                                                   \
        tree_xen=$TREE_XEN                                                   \
                $RUNVARS $BUILD_RUNVARS $BUILD_RUMPUSERXEN_RUNVARS $arch_runvars \
                $suite_runvars                                               \
                host_hostflags=$build_hostflags                              \
                buildjob=${bfi}build-$arch                                   \
                tree_rumpuserxen=$TREE_RUMPUSERXEN			\
          ${TREEVCS_RUMPUSERXEN:+treevcs_rumpuserxen=}${TREEVCS_RUMPUSERXEN} \
                revision_rumpuserxen=$REVISION_RUMPUSERXEN		\
                tree_xen=$TREE_XEN                                           \
                tree_qemuu=$TREE_QEMU_UPSTREAM                               \
                revision_xen=$REVISION_XEN                                   \
                revision_qemuu=$REVISION_QEMU_UPSTREAM                       \
                tree_rumpuserxen_rumpsrc=$TREE_RUMPUSERXEN_RUMPSRC	\
                ${TREEVCS_RUMPUSERXEN_RUMPSRC:+treevcs_rumpuserxen_rumpsrc=}${TREEVCS_RUMPUSERXEN_RUMPSRC}
                # rumpsrc-related runvars needed only for old rumpuser-xen
                # (ie ones which need $bodges=1 in ts-rumpuserxen-build)
		;;
    esac

    fi

    case "$arch" in
    armhf) continue;; # don't do any other kernel builds
    esac

    if [ "x$REVISION_LINUX_OLD" != xdisable ]; then

      job_create_build build-$arch-oldkern build-kern                   \
                arch=$arch kconfighow=create-config-sh                  \
                kimagefile=vmlinux                                      \
                $RUNVARS $BUILD_RUNVARS $BUILD_LINUX_OLD_RUNVARS        \
                $arch_runvars $suite_runvars                            \
                host_hostflags=$build_hostflags                         \
        tree_linux=http://xenbits.xen.org/linux-2.6.18-xen.hg           \
        revision_linux=$REVISION_LINUX_OLD

    fi

  done
}

job_create_test () {
  local job=$1; shift
  local recipe=$1; shift
  local toolstack=$1; shift
  local xenarch=$1; shift
  local dom0arch=$1; shift

  xsm_suffix=""
  case " $* " in
    *" enable_xsm=true "*) xsm_suffix="-xsm";
  esac

  job="$job$xsm_suffix"
  xenbuildjob="${bfi}build-$xenarch$xsm_suffix"
  buildjob="${bfi}build-$dom0arch$xsm_suffix"

  job_create_test_filter_callback \
    "$job" "$recipe" "$toolstack" "$xenarch" "$dom0arch" "$@" || return 0

  tsbuildjob=

  case "$xenbranch:$toolstack" in
    xen-3.*-testing:*) ;;
    xen-4.0-testing:*) ;;
    xen-4.1-testing:*) ;;
    *:libvirt) tsbuildjob="libvirtbuildjob=${bfi}build-$dom0arch-libvirt"
            ;;
    xen-4.2-testing:*) ;;
    xen-4.3-testing:*) ;;
    *:xend) xenbuildjob="$xenbuildjob-xend"
            buildjob="${bfi}build-$dom0arch-xend"
            ;;
  esac

  ./cs-job-create $flight $job $recipe toolstack=$toolstack       \
    $RUNVARS $TEST_RUNVARS $global_runvars $most_runvars          \
    xenbuildjob=$xenbuildjob buildjob=$buildjob $tsbuildjob "$@"
}

usual_debianhvm_image () {
  local arch=$1; shift
  echo debian-${DEBIAN_IMAGE_VERSION-7.2.0}-$arch-CD-1.iso
}

# Iterate over xenarch, dom0arch and kernel calling test_matrix_do_one
# for each combination.
#
# Filters non-sensical combinations.
#
# Provides various convenience variables for the callback.
#
test_matrix_iterate () {

  case "$xenbranch" in
  xen-3.*-testing)      pairtoolstack=xend ;;
  xen-4.0-testing)      pairtoolstack=xend ;;
  xen-4.1-testing)      pairtoolstack=xend ;;
  xen-4.2-testing)      pairtoolstack=xl ;;
  xen-4.3-testing)      pairtoolstack=xl ;;
  *)                    pairtoolstack="xl libvirt" ;;
  esac

  case "$branch" in
    linux-[3-9].[0-9]*)
      min_linux_hostflag=PropMinVer:LinuxKernelMin:${branch#linux-}
      ;;
    *)
      ;;
  esac

  for xenarch in ${TEST_ARCHES- i386 amd64 armhf } ; do

    if [ "x$xenarch" = xdisable ]; then continue; fi

    test_matrix_branch_filter_callback || continue

    case "$xenarch" in
    armhf)
          # Arm from 4.3 onwards only
          case "$xenbranch" in
          xen-3.*-testing) continue;;
          xen-4.0-testing) continue;;
          xen-4.1-testing) continue;;
          xen-4.2-testing) continue;;
          *) ;;
          esac
          ;;
    i386)
          # 32-bit Xen is dropped from 4.3 onwards
          case "$xenbranch" in
          xen-3.*-testing) ;;
          xen-4.0-testing) ;;
          xen-4.1-testing) ;;
          xen-4.2-testing) ;;
          *) continue ;;
          esac
          ;;
    amd64)
          ;;
    esac

    case "$xenarch" in
    *)     suite=$defsuite; guestsuite=$defguestsuite;;
    esac

    if [ $suite != $defsuite ] ; then
        suite_runvars="host_suite=$suite"
    else
        suite_runvars=
    fi

    for kern in ''; do

      case $kern in
      '')
                  kernbuild=pvops
                  kernkind=pvops
                  ;;
      *)          echo >&2 "kernkind ?  $kern"; exit 1 ;;
      esac

      for dom0arch in i386 amd64 armhf; do

        case ${xenarch}_${dom0arch} in
            amd64_amd64) ;;
            amd64_i386) ;;
            i386_i386) ;;
            armhf_armhf) ;;
            *) continue ;;
        esac

        eval "
            arch_runvars=\"\$ARCH_RUNVARS_$dom0arch\"
        "

        debian_runvars="debian_kernkind=$kernkind debian_arch=$dom0arch"
        if [ $guestsuite != $defguestsuite ] ; then
            debian_runvars="$debian_runvars debian_suite=$guestsuite"
        fi

        most_hostflags="arch-$dom0arch,arch-xen-$xenarch,suite-$suite,purpose-test"
        if [ "x$min_linux_hostflag" != "x" ] ; then
            most_hostflags="$most_hostflags,$min_linux_hostflag"
        fi

        most_runvars="
                  arch=$dom0arch                                  \
                  kernbuildjob=${bfi}build-$dom0arch-$kernbuild   \
                  kernkind=$kernkind                              \
                  $arch_runvars $suite_runvars
                  "

        test_matrix_do_one
      done
    done
  done
}

# Local variables:
# mode: sh
# sh-basic-offset: 2
# indent-tabs-mode: nil
# End:
