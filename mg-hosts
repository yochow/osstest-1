#!/usr/bin/perl -w

use strict qw(vars refs);
use DBI;
use Osstest;

csreadconfig();

sub l ($) { return split /,/, $_[0]; }

sub cmd_mkpxedir () {
    die unless @ARGV>=1;
    foreach my $hn (@ARGV) {
        my $ho= selecthost("host=$hn");
        my $macdir= $ho->{Ether};
        $macdir =~ s/\:/-/g;
        system_checked(<<END);
            set -e
            cd $c{Tftp}
            sudo chown root.$c{TftpPxeGroup} $macdir
            sudo chmod 2775 $macdir
            sudo rm -f $hn
            sudo ln -s $macdir $hn
            ls -ald $hn $macdir
END
    }
}

sub cmd_copy () {
    die unless @ARGV==2;
    my ($src,$dsts) = @ARGV;

    db_retry($dbh_tests, [qw(resources)], sub {
        foreach my $dst (l($dsts)) {
            $dbh_tests->do(<<END,{}, $dst,$src);
                INSERT INTO resources
                SELECT restype,
                       ? AS resname,
                       0 AS shareix,
                       (SELECT taskid FROM tasks
                         WHERE type='magic' AND refkey='idle')
                         AS owntaskid
                  FROM resources
                 WHERE restype='host' AND resname=?
END
            $dbh_tests->do(<<END,{}, $dst,$src);
                INSERT INTO hostflags
                SELECT ? AS hostname,
                       hostflag
                  FROM hostflags
                 WHERE hostname=?
END
        }
    });
}

sub cmd_setflags () {
    die unless @ARGV==2;
    my ($flags,$dsts) = @ARGV; # each flag may start with - to remove
    db_retry($dbh_tests, [qw(resources)], sub {
        foreach my $flag (l($flags)) {
            my $remove= $flag =~ s/^[-!]//;
            foreach my $dst (l($dsts)) {
                $dbh_tests->do(<<END,{}, $dst,$flag);
                    DELETE FROM hostflags
                          WHERE hostname=? AND hostflag=?
END
                $dbh_tests->do(<<END,{}, $dst,$flag) unless $remove;
                    INSERT INTO hostflags
                                (hostname, hostflag)
                         VALUES (?,        ?       )
END
            }
        }
    });
}

sub cmd_showflags () {
    die if @ARGV;
    my $hostsq= $dbh_tests->prepare(<<END);
        SELECT hostname FROM hostflags ORDER BY
            split_part(hostname, '-', 2), hostname
END
    my $findq= $dbh_tests->prepare(<<END);
        SELECT * FROM hostflags ORDER BY hostflag
END
    $hostsq->execute();
    $findq->execute();

    my (@cols, @rows, %cols, %rows, @grid);
    my $find= sub {
        my ($ary,$hash,$key)=@_;
        my $val= $hash->{$key};  return $val if defined $val;
        push @$ary, $key;
        return $hash->{$key}= $val= $#$ary;
    };
    while (my $hostcol= $hostsq->fetchrow_hashref()) {
        $find->(\@cols, \%cols, $hostcol->{hostname});
    }

    my $maxflag= 1;
    while (my $hf= $findq->fetchrow_hashref()) {
        my $row= $find->(\@rows, \%rows, $hf->{hostflag});
        my $col= $find->(\@cols, \%cols, $hf->{hostname});
        my $flaglen= length $hf->{hostflag};
        $maxflag= $flaglen if $flaglen > $maxflag;
        $grid[$row][$col]= 1;
    }
    $findq->finish();
    my @headlines;
    my $cw= 3;
    foreach my $col (0..$#cols) {
        my $wantx= $col*$cw;
        my $row;
        for ($row=0;
             defined($headlines[$row]) &&
             length($headlines[$row])+1 >= $wantx;
             $row++) { }
#print STDERR "CW $col $wantx $row $cols[$col]\n";
        $headlines[$row]='' if !defined $headlines[$row];
        $headlines[$row].=
            ' 'x($wantx - length $headlines[$row]).
            $cols[$col];
    }
    my $maxwidth= 0;
    print "\n";
    foreach my $l (@headlines) {
        printf "%*s | %s\n", $maxflag,'', $l;
        $maxwidth= length($l) if length($l) > $maxwidth;
    }
    print '-'x($maxflag), '-+-', '-'x($maxwidth), "\n";
    foreach my $row (0..$#rows) {
        printf "%-*s | ", $maxflag,$rows[$row];
        foreach my $col (0..$#cols) {
            my $ge= $grid[$row][$col];
            printf "%-*s", $cw, $ge ? 'x' : ' ';
        }
        print "\n";
    }
    print "\n";
}    

die unless @ARGV;
my $subcmd= shift @ARGV;
my $subcmdproc;
{
    $subcmdproc= \&{ "cmd_$subcmd" };
}
$subcmdproc->();
