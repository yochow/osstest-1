#!/usr/bin/tclsh8.4
# -*- Tcl -*- 
# usage: ./sg-execute-flight FLIGHT BLESSING

source osstestlib.tcl

readconfig

proc check {} {
    global flight jobinfo running blessing killing

    set nqueued [pg_execute dbh "
        SELECT job FROM jobs j
         WHERE j.flight = $flight
           AND j.status = 'queued'
         LIMIT 1
    "]

    set nrunning [llength $running]
    log "flight $flight nqueued=$nqueued nrunning=$nrunning"

    if {!$nqueued && !$nrunning} {
        log "flight $flight ending."
        while {$killing} { vwait killing }
        log "flight $flight ended."
        exec ./cs-flight-bless $flight $blessing running 2>@ stderr
        exit 0
    }

    pg_execute -array jobinfo dbh "
        SELECT * FROM jobs j
         WHERE j.flight = $flight
           AND j.status = 'queued'
           AND 0 = (SELECT count(*) FROM jobs d
                     WHERE d.flight = $flight
                       AND ( d.status = 'queued'
                          OR d.status = 'preparing'
                          OR d.status = 'running'
                          OR d.status = 'retriable' )
                       AND (d.job IN (SELECT val FROM runvars r
                                     WHERE r.flight = $flight
                                       AND r.job = j.job
                                       AND r.name LIKE '%job')
                        OR (d.flight || '.' || d.job) IN
                                     (SELECT val FROM runvars r
                                     WHERE r.flight = $flight
                                       AND r.job = j.job
                                       AND r.name LIKE '%job'))
                   )
         ORDER BY job
    " maybe-spawn-job
}

proc maybe-spawn-job {} {
    global flight jobinfo running forever

    foreach entry $running {
        lassign $entry pid job
        if {[string equal $job $jobinfo(job)]} return
    }

    switch -glob $jobinfo(recipe) {
        build* { set runner sg-run-builds }
        test* { set runner sg-run-tests }
        * { error "unknown runner for recipe $jobinfo(recipe)" }
    }
    log "flight $flight spawning $jobinfo(job) $jobinfo(recipe) $runner"

    flush stdout
    flush stderr
    set pid [fork]
    pipe waiter_sentinel_r waiter_sentinel_w
    if {!$pid} {
        id process group set
        if {![fork]} {
            # this process exists to ensure the process group
            # survives, and therefore that the pid is not reused,
            # until sg-execute-flight sends the group SIGKILL
            signal ignore SIGTERM
            close $waiter_sentinel_w
            fileevent $waiter_sentinel_r readable { exit 0 }
            vwait forever
            exit 0
        }
        close $waiter_sentinel_r
        close $waiter_sentinel_w
        execl ./$runner [list $flight --jobs=$jobinfo(job)]
        error "execl returned success ?!"
    }
    close $waiter_sentinel_r
    # we leak $waiter_sentinel_w at job exit, but we don't really care
    lappend running [list $pid $jobinfo(job)]
    log "flight $flight spawned  $jobinfo(job) \[$pid\]"
}

proc main_iteration {} {
    global flight running nqueued jobinfo killing

    update

    check

    update

    if {![llength running]} {
        error "nothing running, but queued not ready"
    }
    lassign [wait] gotpid how st

    set ix 0
    foreach entry $running {
        lassign $entry pid job
        if {$gotpid == $pid} break
        incr ix
    }
    if {![info exists pid]} {
        log "unexpected child \[$pid\] $how $st"
        return
    }

    set exitok [expr {![string compare EXIT $how] && $st==0}]
    
    log "flight $flight reaped  $job \[$pid\] $how $st"

    kill -pgroup SIGTERM $pid
    incr killing
    after 45000 [list kill-kill $job $pid]

    transaction flights {
        set found [pg_execute -array jobinfo dbh "
            SELECT * FROM jobs
                    WHERE flight=$flight
                      AND job=[pg_quote $job]
        "]
        if {!$found} { error "job not in database $flight $job" }

        switch -exact -- $jobinfo(status) {
            pass - fail - broken - blocked {
            }
            queued - preparing - running {
                job-set-status-unlocked $flight $job broken
                if {$exitok} {
                    error "job $flight.$job runner exited 0\
                       but left job status $jobinfo(status)"
                }
            }
            default {
                error "job $flight.$job runner ($how $st)\
                       left unexpected job status\
                       $jobinfo(status)"
            }
        }
    }

    lvarpop running $ix
}

proc kill-kill {job pid} {
    global killing flight
    incr killing -1
    log "flight $flight killing $job \[$pid\]"
    kill -pgroup SIGKILL $pid
}

proc parse-args {} {
    global argv blessing
    set-flight
    if {[llength $argv]!=1} { error "wrong # args" }
    lassign $argv blessing
}

proc main {} {
    global running flight killing
    set killing 0
    set running {}
    while 1 main_iteration
}

parse-args
db-open
main
