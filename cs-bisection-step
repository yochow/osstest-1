#!/usr/bin/perl -w
#
# Compute the best combination of things to test for another
# bisection step.  Create a flight with appropriate builds and
# tests.
#
# usage:
#   ./cs-bisection-setup [<options>] <branch> <job> <testid>
# options, usually:
#      --blessings=real,real-bisect

use strict qw(vars);
use Osstest;
use Data::Dumper;
no warnings qw(recursion);
use HTML::Entities;

our @blessings= qw(real real-bisect);
our @revtuplegenargs= ();
our $broken;

my $graphfile= 'bisection';
my $popflight= 0;
my %specflights;
my $debug= 0;
my $cache_option= 1;

our $worst_estatus= -1;
our $estatus= 255;
END { $?= $estatus; }

# exit status
#   0    have identified a revision to test
#   4    bisection complete and successful
#   8    bisection finished and inconclusive
#  12    bisection finished, but inconsistent test results cast doubt
#  16    fatally inconsistent test results
#  32    failure seems to occur only in broken flights, etc.
#            or unexpected shape to revision graph  (no report etc.)
# 255    doom and disaster

open DEBUG, ">/dev/null" or die $!;
open SUMMARY, ">/dev/null" or die $!;

our @org_argv= @ARGV;
our $maxflight_cond= '';

while (@ARGV && $ARGV[0] =~ m/^\-/) {
    $_= shift @ARGV;
    last if $_ eq '--';
    if (s/^--blessings=//) {
	@blessings= split /\,/;
	next;
    } elsif (m/^--graph-out=(.+)$/) {
        $graphfile= $1;
    } elsif (m/^--no-update$/) {
        push @revtuplegenargs, '-N';
    } elsif (m/^--nrevisions=(\d+)$/) {
        push @revtuplegenargs, "-n$1";
    } elsif (m/^--summary-out=(.+)$/) {
        open SUMMARY, "> $1" or die $!;
    } elsif (m/^--no-graph-out$/) {
        $graphfile= '';
    } elsif (m/^--no-reuse-builds$/) {
        $cache_option= 0;
    } elsif (m/^--flight=(\d+)$/) {
        $popflight= $1;
    } elsif (m/^--max-flight=(\d+)$/) {
        $maxflight_cond= "AND flights.flight <= $1";
    } elsif (m/^--(fail|basis)-flight=(\d+)$/) {
        $specflights{$1}= $2;
    } elsif (m/^-D$/) {
        $debug++;
        if ($debug==1) {
            open DEBUG, ">&2" or die $!;
            DEBUG->autoflush(1);
        }
        if ($debug==3) {
            push @revtuplegenargs, '-D';
        }
    } else {
	die "$_ ?";
    }
}

@ARGV==3 or die;
our ($branch,$job,$testid) = @ARGV;

our ($latest_flight, $hosts, $basispass_flight);
our (@treeinfos);
# $treeinfos[]{Name}
# $treeinfos[]{Url}

our $blessingscond= '('.join(" OR  ", map { "blessing='$_'" } @blessings).')';

sub psummary ($) {
    my ($s) = @_;
    print STDERR $s or die $!;
    print SUMMARY $s or die $!;
}

sub doubtful ($) {
    my ($msg) = @_;
    psummary("\n$msg\n\nSorry, bisection not possible.\n\n");
    $estatus= 32;
    exit 32;
}

sub summary_report ($$$) {
    my ($heading,$body,$new_estatus) = @_;
    psummary("\n");
    if (length $heading) {
        chomp $heading;
        psummary("*** $heading ***\n");
    }
    if (length $body) {
        chomp $body;
        $body =~ s/^/  /gm;
        psummary("$body\n\n");
    }
    if ($new_estatus > $worst_estatus) {
        $worst_estatus= $new_estatus;
    }
}

sub relevant_hosts ($) {
    my ($tflight) = @_;
    return join ',', map { join '=', @$_ } @{
        $dbh_tests->selectall_arrayref(<<END,{}, $job,$tflight) }
            SELECT name,val FROM runvars
               WHERE job = ?
                 AND flight = ?
                 AND name LIKE '%host'
END
}

sub flight_rmap ($) {
    my ($flight) = @_;

    $dbh_tests->do(<<END, {});
          CREATE TEMP TABLE tmp_build_info (
              use varchar NOT NULL,
              name varchar NOT NULL,
              val varchar NOT NULL,
              job varchar NOT NULL
              )
END

        $dbh_tests->do(<<END, {}, $job, $flight);
    
        INSERT INTO tmp_build_info
        SELECT t.name AS use,
	       b.name AS name,
	       b.val  AS val,
	       b.job  AS job
	       
	  FROM runvars AS t
    CROSS JOIN runvars AS b
    
           WHERE t.job = ?
	     AND t.flight = ?
	     AND t.name LIKE '%buildjob'
	     AND b.flight = (CASE WHEN t.val NOT LIKE '%.%'
                                  THEN t.flight
                                  ELSE cast(split_part(t.val, '.', 1) AS int)
                                  END)
             AND b.job = (CASE WHEN t.val NOT LIKE '%.%'
                               THEN t.val
                               ELSE split_part(t.val, '.', 2)
                               END)
END

    $dbh_tests->do(<<END, {}, $job, $flight);

        INSERT INTO tmp_build_info
	    SELECT ''   AS use,
	           name AS name,
	           val  AS val,
	           job  AS job
	      FROM runvars
	     WHERE job = ?
	       AND flight = ?
END

    my $sth= $dbh_tests->prepare(<<END);

        SELECT url.val AS uval,
	       rev.val AS rval,
	       url.job AS job,
	       url.name AS longname

	    FROM tmp_build_info AS rev
      CROSS JOIN tmp_build_info AS url

           WHERE (rev.name LIKE E'built\\_revision\\_%' OR
                  rev.name LIKE E'revision\\_%')
  	     AND  url.name LIKE E'tree\\_%'
	     AND  rev.use = url.use
	     AND  rev.job = url.job
	     AND (rev.name = 'built_revision_' || substr(url.name,6) OR
                  rev.name = 'revision_'       || substr(url.name,6))

	   ORDER by url.val;
	  
END
    $sth->execute();
    my $row;
    my $mixed=0;
    my (@ttreenames, @ttreeurls, @trevisions);
    while ($row= $sth->fetchrow_hashref()) {
        $row->{longname} =~ m/^tree_/ or die "$row->{longname} ?";
        my $name= $'; #'
        print DEBUG " $flight.$row->{job} uval=$row->{uval}".
            " rval=$row->{rval} name=$name\n";
        my $rev= $row->{rval};
        next unless length $rev;
        $rev =~ s/\+//g;
        $rev =~ s/^\d+://;
	if (@ttreenames && $name eq $ttreenames[-1]) {
	    if ($rev ne $trevisions[-1]) {
		print STDERR "!! flight $flight mixed revisions for $ttreenames[-1]: $trevisions[-1] and $rev\n";
		$mixed=1;
	    }
	} else {
	    push @ttreenames, $name;
            push @ttreeurls, $row->{uval};
	    push @trevisions, $rev;
	}
    }
    $sth->finish();

    $dbh_tests->do(<<END);
        DROP TABLE tmp_build_info
END
    return undef if $mixed;
    if (!@ttreenames) {
	print STDERR "!! flight $flight no revisions or trees\n";
	return undef;
    }
    my $map = {};
    for (my $i=0; $i<@ttreenames; $i++) {
        my $ttreename= $ttreenames[$i];
        my $trev= $trevisions[$i];
        die if exists $map->{$ttreename}
            and $map->{$ttreename}{Rev} ne $trev;
        $map->{$ttreename}= { Rev => $trev, Url => $ttreeurls[$i] };
    }
    return $map;
}

sub flight_rtuple ($) {
    my ($flight) = @_;
    my $map= flight_rmap($flight);
    return () if !defined $map;
    my @revisions= ();
    die unless @treeinfos;
    my $missing= 0;
    foreach my $treeinfo (@treeinfos) {
        my $name= $treeinfo->{Name};
        my $revision= $map->{$name}{Rev};
        if (!defined $revision) {
            print STDERR "!! flight $flight missing revision for $name\n";
            $missing++;
            next;
        }
        push @revisions, $revision;
    }
    return () if $missing;
    return @revisions;
}

our $flight_is_not_broken= <<END;
    (NOT EXISTS (SELECT * FROM steps check_steps
                  WHERE check_steps.flight = flights.flight
                    AND check_steps.status = 'broken'))
END

sub findbasics () {
    my %flight_cond;
    foreach my $fp (qw(basis fail)) {
        $flight_cond{$fp}= defined $specflights{$fp}
            ? "flight = $specflights{$fp}" : "TRUE";
    }

    my $latestq= $dbh_tests->prepare(<<END);
            SELECT flights.flight, steps.status,
                   $flight_is_not_broken AS notbroken
                FROM flights JOIN steps USING (flight)
               WHERE job = ?
                 AND testid = ?
                 AND blessing = ?
                 AND (status = 'fail' OR status = 'pass')
                 AND branch = ?
                 AND $flight_cond{fail}
                     $maxflight_cond
               ORDER BY notbroken DESC, flights.started DESC
END
    my $basisq= $dbh_tests->prepare(<<END);
        SELECT * FROM flights JOIN steps USING (flight)
	   WHERE job = ?
	     AND testid = ?
	     AND blessing = ?
	     AND status = 'pass'
             AND branch = ?
             AND $flight_is_not_broken
             AND $flight_cond{basis}
                 $maxflight_cond
	   ORDER BY flights.started DESC
END

    print STDERR "Searching for failure / basis pass:\n";

    $latestq->execute($job,$testid,$blessings[0],$branch);

    my ($tryfail,%tried_hosts);

    while ($tryfail= $latestq->fetchrow_hashref()) {
        printf(STDERR " %s %s%s", $tryfail->{flight}, $tryfail->{status},
               $tryfail->{notbroken} ? '' : ',broken');
        last unless $tryfail->{status} eq 'fail';
        last unless $tryfail->{notbroken};

        my $failhosts= relevant_hosts($tryfail->{flight});

        print STDERR " [$failhosts] ";
        if ($tried_hosts{$failhosts}++) {
            print STDERR "again\n";
            next;
        }

        print STDERR "/";
        my ($basisrow,$trybasis);
        $basisq->execute($job,$testid,$blessings[0],$branch);
        while ($trybasis= $basisq->fetchrow_hashref()) {
            print STDERR " $trybasis->{flight}";
            my $basishosts= relevant_hosts($trybasis->{flight});
            if ($basishosts ne $failhosts) {
                print STDERR " [$basishosts]";
                next;
            }
            $basisrow= $trybasis;
            last;
        }
        $basisq->finish();

        if (!$basisrow) {
            print STDERR " no.\n";
            next;
        }

        print STDERR " ok.\n";
        $latest_flight= $tryfail->{flight};
        $basispass_flight= $basisrow->{flight};
        $hosts= $failhosts;
        last;
    }
    $latestq->finish();

    if (!$latest_flight) {
        doubtful("No appropriate failure/pass pair found.");
        return;
    }

    print STDERR "Failure / basis pass flights:".
        " $latest_flight / $basispass_flight\n";
}

our (%nodes, @latest_rtuple, @basispass_rtuple);

sub digraph_whole () {
    my $latest_rmap= flight_rmap($latest_flight);
    my $basispass_rmap= flight_rmap($basispass_flight);
    if (!defined $basispass_rmap) {
	die "Basis pass $basispass_flight rmap indeterminate/wrong\n";
    }

    foreach my $tree (sort keys %$latest_rmap) {
        if (defined $basispass_rmap->{$tree}) {
            push @treeinfos, {
                Name => $tree,
                Url => $basispass_rmap->{$tree}{Url}
            };
        } else {
            print STDERR "(tree in latest but not in basispass: $tree)\n";
        }
    }
    foreach my $tree (sort keys %$basispass_rmap) {
        if (!defined $latest_rmap->{$tree}) {
            print STDERR "(tree in basispass but not in latest: $tree)\n";
        }
    }
    psummary("Tree: $_->{Name} $_->{Url}\n") foreach @treeinfos;

    @latest_rtuple= flight_rtuple($latest_flight);
    @basispass_rtuple= flight_rtuple($basispass_flight);

    print STDERR "Latest @latest_rtuple\n";
    print STDERR "Basis pass @basispass_rtuple\n";

    my $cmd= "./adhoc-revtuple-generator @revtuplegenargs";
    foreach (my $i=0; $i<@treeinfos; $i++) {
        $cmd.= ' '.$treeinfos[$i]{Url}.'#'.
            $basispass_rtuple[$i].'-'.$latest_rtuple[$i];
    }
    print STDERR "Generating revisions with $cmd\n";
    open REVLIST, "$cmd |" or die $!;
    while (<REVLIST>) {
        chomp;
        last if $_ eq '.';
        my $rtuple= $_;
        $!=0; $_=<REVLIST>;
        m/^(\d+) (\d+)$/ or die "$! $_ ?";
        $nodes{$rtuple}{Date}= $1;
        my $n= $nodes{$rtuple};
        my $nparents= $2;
        while ($nparents--) {
            $!=0; $_=<REVLIST>;
            chomp or die $!;
            push @{ $nodes{$_}{Children} }, $n;
            push @{ $n->{Parents} }, $nodes{$_};
        }
    }
    $!=0; $?=0; close REVLIST or die "$? $!";

    foreach my $rtuple (keys %nodes) {
        $nodes{$rtuple}{Rtuple}= $rtuple;
    }
    print STDERR "Loaded ".scalar(keys %nodes)." nodes in revision graph\n";

#print DEBUG Dumper(\%nodes),"\n";
}

sub walk ($$$;$);
sub walk ($$$;$) {
    my ($n, $parch, $code, $depth) = @_;
    return unless defined $n;
    $depth=0 unless defined $depth;
    return if $code->($n, $depth);
    foreach my $neigh (@{ $n->{$parch} }) {
        walk($neigh, $parch, $code, $depth+1);
    }
}

sub digraph_relevant () {
    my $paint_relevant;
    $paint_relevant= sub {
        my ($start, $parch, $paint) = @_;
        walk($start, $parch, sub {
            my ($n, $depth) = @_;
            #print DEBUG "PAINT_RELEVANT $parch $paint $depth $n->{Rtuple}\n";
            return $n->{$paint}++;
        });
    };
    $paint_relevant->($nodes{"@latest_rtuple"}, Parents, RelvDown);
    $paint_relevant->($nodes{"@basispass_rtuple"}, Children, RelvUp);

    foreach my $rtuple ("@latest_rtuple", "@basispass_rtuple") {
        foreach my $relflag (qw(RelvDown RelvUp)) {
            next if $nodes{$rtuple}{$relflag};
            warn "*** not $relflag at $rtuple ".
                join ';', map { $_->{Flight} } @{ $nodes{$rtuple}{Flights} };
            $broken= 1;
        }
    }
}

our @failures;

sub relevant ($) {
    my ($n) = @_;
    return 0 unless defined($n);
    return $broken ? $n->{RelvDown} || $n->{RelvUp}
                   : $n->{RelvDown} && $n->{RelvUp};
}

sub scantests () {
    my $basispass_date= $nodes{"@basispass_rtuple"}{Date};

    if (!defined $basispass_date) {
        die unless $broken;
        die unless defined $basispass_flight;
        my $daterow= $dbh_tests->selectrow_hashref(<<END);
            SELECT * FROM flights WHERE flight = $basispass_flight
END
        $basispass_date= $daterow->{started};
    }

    print STDERR "Searching for test results:\n";

    my $stepq= $dbh_tests->prepare("
       SELECT * FROM steps
          WHERE flight = ?
            AND job = ?
            AND testid = ?
    ");

    my $jobq= $dbh_tests->prepare("
       SELECT * FROM flights JOIN jobs USING (flight)
          WHERE job = ?
            AND $blessingscond
            AND flights.started >= $basispass_date
            AND branch = ?
            AND $flight_is_not_broken
                $maxflight_cond
    ");
    $jobq->execute($job,$branch);
    while (my $jobrow= $jobq->fetchrow_hashref()) {
        print STDERR " $jobrow->{flight} ";

        my $thosts= relevant_hosts($jobrow->{flight});
        if ($thosts ne $hosts) {
            print STDERR "[$thosts]\n";
            next;
        }

        my @rtuple= flight_rtuple($jobrow->{flight});
	next unless @rtuple;

        $stepq->execute($jobrow->{flight},$job,$testid);
        my $steprow= $stepq->fetchrow_hashref();
        $stepq->finish();
        my $st= $steprow ? $steprow->{status} : 'blocked';
        print STDERR "$st ";
        my $n= $nodes{"@rtuple"};
        if (!relevant($n)) {
            print STDERR "irrelevant\n";
            next;
        }
        print STDERR "@rtuple\n";

        push @{ $n->{Flights} }, {
            Flight => $jobrow->{flight},
            Result => $st,
            Blessing => $jobrow->{blessing}
        };

        if ($st eq 'fail') {
            push @failures, $n;
            walk($n, Children, sub {
                my ($desc, $depth) = @_;
                return 0 unless $depth;
                return $desc->{UninterestingFailure}++;
            });
        }
    }
    $jobq->finish();
}

our @conflicted;

sub consolidateresults () {
    foreach my $n (values %nodes) {
        my $fs= $n->{Flights};
        my %r;
        $r{ $_->{Result} }=1 foreach @$fs;
        next unless %r;

        # We're willing to believe a specific result if we also got
        # "blocked", because "blocked" can happen due to environmental
        # failures.
        my @interesting= grep { $_ ne 'blocked' } keys %r;
        if (@interesting == 1) {
            $n->{Result}= $interesting[0];
        } elsif (scalar(keys %r) == 1) {
            $n->{Result}= (scalar keys %r)[0];
        } else {
            $n->{Conflicted}= 1;
            push @conflicted, $n;
        }
    }
}

our @interesting_lengths;

sub search_compute_length_at ($);
sub search_compute_length_at ($) {
    my ($n) = @_;
    print DEBUG "CLA $n->{Rtuple} ";
    if (!relevant($n)) {
        print DEBUG "X (irrelevant)\n";
        return 'X';
    }
    if (defined $n->{Result}) {
        print DEBUG "0 ($n->{Result})\n";
        die "$n->{Rtuple} $n->{Result} " if $n->{Result} eq 'fail';
        if ($n->{Result} ne 'pass') {
            search_compute_length_below($n);
        }
        $n->{LengthAt}= 0;
        return 0;
    }
    my $res= 1;
    print DEBUG ".. x".scalar(@{ $n->{Parents} })."\n";
    foreach my $parent (@{ $n->{Parents} }) {
        my $t= search_compute_length_at($parent);
        next if $t eq 'X';
        $res += $t;
    }
    $n->{LengthAt}= $res;
    return $res;
}

sub search_compute_length_below ($) {
    my ($base) = @_;
    return if $base->{UninterestingFailure};
    print DEBUG "CLB $base->{Rtuple}\n";
    foreach my $n (@{ $base->{Parents} }) {
        next if exists $n->{InterestingLength};
        my $t= search_compute_length_at($n);
        next if $t eq 'X';
        $n->{InterestingLength}= $t;
        print STDERR " $t revisions at $n->{Rtuple}\n";
        push @interesting_lengths, $n;
    }
}

sub choose_revision_below ($$);
sub choose_revision_below ($$) {
    my ($n, $count) = @_;

    print DEBUG "CRB $count $n->{Rtuple}\n";

    return $n if $count <= 0;

    my $parents= $n->{Parents};
    die "reached end $n->{Rtuple} !" unless @$parents;

    my ($descend, @bypass) = sort {
        $b->{LengthAt} <=> $a->{LengthAt}
    } grep {
        defined $_->{LengthAt}
    } @$parents;
    # $bypass is the parent with the biggest LengthAt, so
    # the one we're going to investigate.

    $count--;
    $count -= $_->{LengthAt} foreach @bypass;

    return choose_revision_below($descend, $count);
}

our $choose;

sub do_choose_this ($) {
    my ($n) = @_;
    $choose= $n;
    print STDERR "Should test $choose->{Rtuple}.\n";
    $choose->{Target}= 1;
}

sub conflicted_warning ($$) {
    my ($n, $what) = @_;
    if ($n->{Conflicted}) {
        my $show_rtuple= $n->{Rtuple};
        foreach my $flight (@{ $n->{Flights} }) {
            $show_rtuple .= "\n flight $flight->{Flight}".
                " (blessed $flight->{Blessing}) result $flight->{Result}";
        }
        summary_report(<<END, <<END, 16);
Not reproducible - supposed $what
END
Could not reproduce problem, or could not reproduce basis pass.
Inconsistent test results at this revision (supposed $what):
$show_rtuple
END
        $n->{Target}= 1;
        return 1;
    }
}

our $repro_lastflight;
our $repro_count;

sub need_repro_sequence ($$) {
    my ($need_each, $code) = @_;
    #
    # $code->() should call, in turn for each required event,
    #    need_repro('pass', $nodes{SOMETHING}, $what) or
    #    need_repro('fail', $nodes{SOMETHING}, $what)
    # and return true as soon as any of the need_repro's return true.
    #
    # The result of need_repro_sequence will be true iff we need to
    # repro something, in which case need_repro will have called
    # do_choose_this or reported a conflict due to conflicted_warning.

    local ($repro_lastflight) = 0;
    local ($repro_count);
    for ($repro_count=0; $repro_count<$need_each; $repro_count++) {
        return 1 if $code->();
    }
}

sub need_repro ($$$) {
    my ($st, $n, $what) = @_;

    return 1 if conflicted_warning($n, $what);

    my $fl= $n->{Flights} || [];
    foreach my $f (sort { $a->{Flight} <=> $b->{Flight} } @$fl) {
        next unless $f->{Flight} > $repro_lastflight;
        next unless $f->{Result} eq $st;
        print STDERR " ".
            ($repro_count ? "Repro" : "Result").
            " found: flight $f->{Flight} ($st), for $what\n";
        $repro_lastflight= $f->{Flight};
        return 0;
    }
    print STDERR "Need to reproduce $what ($st); had $repro_count already.\n";
    do_choose_this($n);
    return 1;
}

sub search () {
    print STDERR "Searching for interesting versions\n";

    return if 
        need_repro_sequence(2, sub {
            need_repro('pass', $nodes{"@basispass_rtuple"}, "basis pass") ||
            need_repro('fail', $nodes{"@latest_rtuple"},    "basis failure");
        });

    foreach my $startfail (@failures) {
        search_compute_length_below($startfail);
    }
    my $best;
    foreach my $n (@interesting_lengths) {
        next if defined $best
            and $best->{InterestingLength} >= $n->{InterestingLength};
        $best= $n;
    }
    if (!$best->{InterestingLength}) {
        print STDERR "No revisions left to test, checking graph state.\n";

        my $found_exact_failure= 0;
        my %faildone;

        foreach my $fail (@failures) {
            next if $faildone{$fail}++;

            print DEBUG " GS F $fail->{Rtuple}\n";
            if (conflicted_warning($fail, "first failure")) {
                print DEBUG " GS F $fail->{Rtuple} conflicted\n";
                next;
            }
            my @passparents;
            my $nope= 0;
            foreach my $pass (@{ $fail->{Parents} }) {
                print DEBUG " GS F $fail->{Rtuple} P $pass->{Rtuple}\n";
                $nope=1 if conflicted_warning($pass, "last pass");
                next unless defined $pass->{Result};
                print DEBUG " GS F $fail->{Rtuple} P $pass->{Rtuple}".
                    " R $pass->{Result}\n";
                next unless $pass->{Result} eq 'pass';
                ($nope=1),next if conflicted_warning($pass, "last pass");
                push @passparents, $pass;
            }
            next if $nope;
            next unless @passparents;

            return 1 if need_repro_sequence(3, sub {
                foreach my $pass (@passparents) {
                    return 1 if need_repro('pass', $pass, "last pass");
                }
                return 1 if need_repro('fail', $fail, "first failure");
            });

            $found_exact_failure++;
            $fail->{Target}= 1;
            
            summary_report(<<END,'', 4);
Found and reproduced problem changeset
END
            my @failrev= split / /, $fail->{Rtuple};
            my @revs_to_show;

            for (my $i=0; $i<@treeinfos; $i++) {
                foreach my $pass (@passparents) {
                    my @passrev= split / /, $pass->{Rtuple};
                    next if $passrev[$i] eq $failrev[$i];

                    push @revs_to_show,
                        "$treeinfos[$i]{Url}#$failrev[$i]-$failrev[$i]";

                    summary_report("",<<END, -1);
Bug is in tree:  $treeinfos[$i]{Name} $treeinfos[$i]{Url}
Bug introduced:  $failrev[$i]
Bug not present: $passrev[$i]
END
                }
            }

            foreach my $rts (@revs_to_show) {
                my $revinfo=
                    `./adhoc-revtuple-generator -S @revtuplegenargs $rts`;
                if (!$?) {
                    summary_report("",$revinfo,-1);
                }
            }
        }
        if (!$found_exact_failure) {
            summary_report(<<END,<<END, 8);
Exact problem changeset not identified
END
See revision graph output for details.
END
        } elsif (@conflicted) {
            summary_report(<<END,<<END, 12);
HOWEVER - WARNING - INCONSISTENT TEST RESULTS
END
Some revisions produced unstable test results,
so interpret the results with caution.
See revision graph output for details.
END
        }
    } else {
        my $godown= ($best->{InterestingLength}) >> 1;
        print STDERR "Looking $godown below $best->{Rtuple}.\n";
        my $ch= choose_revision_below($best, $godown);
        do_choose_this($ch);
    }
}

sub gnodename ($) {
    my ($n) = @_;

    my $lab= $n->{Rtuple};
    $lab =~ s/(\S{12})\S+/$1/g;
    $lab =~ s/ /,/g;

    my $fs= $n->{Flights};
    if ($fs) {
        my $resultsdesc= join ' ', map {
            $_->{Flight}.':'.$_->{Result}
        } sort {
            $a->{Flight} <=> $b->{Flight}
        } @$fs;
        
        $lab.= "\\n".$resultsdesc;
    }
    return "\"$lab\"";
}

sub odot ($) { print DOT $_[0] or die $!; }

sub writegraph () {
    return unless length $graphfile;

    open DOT, "> $graphfile.dot" or die "$graphfile.dot $!";
    
    odot(<<END);
digraph "$job $testid" {
  rankdir=BT;
  ranksep=0;
  nodesep=0.3;
  edge [arrowsize=0.2];
  node [shape=box, fontname="Courier-Bold", fontsize=9, style="filled"];
END

    foreach my $n (values %nodes) {
        next unless relevant($n);

        odot("  ".gnodename($n)." ");
        my @s;

        if (defined $n->{Result}) {
            if ($n->{Result} eq 'fail') {
                push @s, 'fillcolor="red"';
                push @s, 'fontcolor="white"';
            } elsif ($n->{Result} eq 'pass') {
                push @s, 'fillcolor="#00c000"';
                push @s, 'fontcolor="black"';
            } else {
                push @s, 'fillcolor="blue"';
                push @s, ' fontcolor="white"';
            }
        } elsif (defined $n->{Conflicted}) {
            push @s, ' fillcolor="yellow"';
            push @s, ' fontcolor="black"';
        } else {
        }

        if ($n->{Target}) {
            push @s, ' peripheries=2';
            push @s, ' style="bold,filled"';
        }

        if ($n->{Rtuple} eq "@latest_rtuple") {
            push @s, ' shape=oval';
        } elsif ($n->{Rtuple} eq "@basispass_rtuple") {
            push @s, ' shape=hexagon';
        }

        odot('[');
        odot(join ', ', @s);
        odot("];\n");
        

        foreach my $parent (@{ $n->{Parents} }) {
            odot("  ".gnodename($parent)." -> ".gnodename($n).";\n");
        }
    }
    odot("}\n");

    close DOT or die $!;

    my $href= $graphfile;
    $href =~ s,.*/,,;

    open HTML, "> $graphfile.html" or die "$graphfile.html $!";
    print HTML <<END
<html><head><title>bisection $branch $job $testid</title></head>
<body>
<h1>$branch $job $testid</h1>
<h2>Trees</h2>
<pre>
END
    . (join '', map { "  $_->{Name} $_->{Url}\n" } @treeinfos). <<END
</pre>
END
        or die "$!";

    if (eval {
        foreach my $fmt (qw(ps png)) {
            system_checked("dot -T$fmt -o$graphfile.$fmt $graphfile.dot");
        }
        1;
    }) {
        system_checked("convert -resize $c{BisectionRevisonGraphSize}".
                       " $graphfile.png $graphfile.mini.png");
        print HTML <<END or die $!;
<h2>Revision graph overview</h2>
<img src="$href.mini.png">
<h2>Revision graph</h2>
<a href="$href.ps">PostScript</a><p>
<img src="$href.png">
</body></html>
END
        print STDERR "Revision graph left in $graphfile.{dot,ps,png,html}.\n";
    } else {
        my $emsg= encode_entities($@);
        print HTML <<END or die $!;
<h2>Revision graph generation failed!</h2>
Error message:
 $emsg

<a href="$href.dot">dot input file</a>
END
    }
}

our %jobs_created;

sub preparejob ($$$);
sub preparejob ($$$) {
    my ($popjob, $copyflight, $cacheok) = @_;
    # runs in db_retry qw(flights)

    if (exists $jobs_created{$popjob}) {
	print STDERR "Already created $jobs_created{$popjob}\n";
	return $jobs_created{$popjob};
    }

    print STDERR "Need $popflight.$popjob (like $copyflight)\n";

    # Create a temporary table containing the runvars we want

    $dbh_tests->do(<<END, {}, $copyflight, $popjob);
        SELECT name, val
            INTO TEMP  bisection_runvars
                 FROM  runvars
                WHERE  flight=? AND job=? AND synth='f'
                  AND  name NOT LIKE E'revision\\_%'
                  AND  name NOT LIKE '%host'
END
    my (@trevisions) = split / /, $choose->{Rtuple};

    my $treeq= $dbh_tests->prepare(<<END);
        SELECT name FROM runvars
          WHERE  flight=? AND job=?
            AND  name = ?
END
    foreach (my $i=0; $i<@treeinfos; $i++) {
        my $name= $treeinfos[$i]{Name};
        my $treevar= 'tree_'.$name;
        $treeq->execute($copyflight, $popjob, $treevar);
        my ($treerow) = $treeq->fetchrow_array();
        $treeq->finish();
        next unless defined $treerow;
        my $revname= "revision_$name";
        my $revval= $trevisions[$i];

        print STDERR " $revname=$revval\n";
        $dbh_tests->do(<<END, {}, $revname, $revval);
            INSERT INTO bisection_runvars VALUES (?, ?)
END
    }

    # Check for subjobs:

    my $jobq= $dbh_tests->prepare(<<END);
        SELECT name, val FROM runvars
            WHERE  flight=? AND job=?
              AND  name LIKE '%job';
END
    $jobq->execute($copyflight, $popjob);
    my $subjobs= $jobq->fetchall_arrayref( {} );
    $jobq->finish();

    # See if there's a build we can reuse

    my ($recipe) = $dbh_tests->selectrow_array(<<END,{}, $copyflight,$popjob);
        SELECT recipe FROM jobs WHERE flight=? AND job=?
END

    my $usejob;

    if ($cache_option and $cacheok and $recipe =~ m/^build/ and !@$subjobs) {
        my $reusejob= $dbh_tests->selectrow_hashref(<<END,{}, $popjob,$popjob);
            SELECT  *
            FROM    flights JOIN jobs j USING (flight)
            WHERE   j.job=?
            AND     j.status='pass'
            AND     $blessingscond
                    $maxflight_cond
            AND     0 = ( SELECT count(*)
                          FROM
                              ( SELECT name,val
                                FROM   runvars
                                WHERE  runvars.flight = flights.flight
                                  AND  job=? AND synth='f'
                              ) o
                          FULL OUTER JOIN
                              bisection_runvars want
                          USING (name)
                          WHERE (o.val = want.val) IS NOT TRUE
                        )
            ORDER BY flights.started desc
            LIMIT 1
END

        if ($reusejob) {
	    my $stashcheck = "$c{Stash}/$reusejob->{flight}/$reusejob->{job}";
	    if (stat $stashcheck) {
		$usejob= "$reusejob->{flight}.$reusejob->{job}";
		print STDERR "Can reuse $recipe $usejob.\n";
	    } else {
		print STDERR "Can NOT reuse $recipe $usejob: $stashcheck: $!\n";
	    }
        }
    }

    if (!defined $usejob) {
        print STDERR "Creating $popflight.$popjob (copying".
            " from $copyflight)\n";

        $dbh_tests->do(<<END, {}, $popflight,$popjob,$recipe);
            INSERT INTO jobs VALUES (?, ?, ?, 'queued')
END
        $dbh_tests->do(<<END, {}, $popflight,$popjob);
            INSERT INTO runvars (
                    SELECT ? as flight, ? as job, name, val, 'f'
                      FROM bisection_runvars
                                 )
END

        $usejob= "$popflight.$popjob";
        $jobs_created{$popjob}= $usejob;
    }

    $dbh_tests->do("DROP TABLE bisection_runvars");

    my $jobsetq= $dbh_tests->prepare(<<END);
        UPDATE runvars SET val=?
            WHERE  flight=? AND job=? AND name=?
END
    foreach my $subjob (@$subjobs) {
        my $target;
        my $jobspec= $subjob->{val};
        if ($jobspec =~ m/^(\d+)\.(\s+)$/) {
            $target= preparejob($1, $2, 1);
        } else {
            $target= preparejob($jobspec, $copyflight, 1);
        }
        $jobsetq->execute($target, $popflight, $popjob, $subjob->{name});
    }
    $jobsetq->finish();

    return $usejob;
}

sub populateflight () {
    return unless $popflight;
    # runs outside a transaction

    if (!defined $choose) {
        print STDERR "No revision to test.\n";
        return;
    }

    my $removehosts= 
    my $addhost= $dbh_tests->prepare(<<END);
        INSERT INTO runvars (flight,job,name,val,synth)
                     VALUES (?,     ?,  ?,   ?,  'f')
END

    db_retry($popflight,'constructing', $dbh_tests,[qw(flights)], sub {
        print STDERR "Populating $popflight...\n";
        preparejob($job, $latest_flight, 0);
        foreach my $hostspec (split /,/, $hosts) { # /
            $hostspec =~ m/=/;
            $addhost->execute($popflight, $job, $`, $'); # '
        }
    });

    print STDERR "Flight $popflight ready to go.\n";
}

sub compute_exitstatus () {
    if ($broken) {
        $estatus= 32;
        warn "BROKEN see earlier errors."
    } elsif (defined($choose)) {
        $estatus= 0;
    } else {
        die if $worst_estatus==0;
        $estatus= $worst_estatus;
    }
}

csreadconfig();
grabrepolock_reexec(@org_argv);
findbasics();
digraph_whole();
digraph_relevant();
scantests();
consolidateresults();
search();
writegraph();
populateflight();
compute_exitstatus();
