#!/usr/bin/perl -w
# This is part of "osstest", an automated testing framework for Xen.
# Copyright (C) 2009-2013 Citrix Inc.
# 
# This program is free software: you can redistribute it and/or modify
# it under the terms of the GNU Affero General Public License as published by
# the Free Software Foundation, either version 3 of the License, or
# (at your option) any later version.
# 
# This program is distributed in the hope that it will be useful,
# but WITHOUT ANY WARRANTY; without even the implied warranty of
# MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the
# GNU Affero General Public License for more details.
# 
# You should have received a copy of the GNU Affero General Public License
# along with this program.  If not, see <http://www.gnu.org/licenses/>.

use strict qw(vars);
use DBI;
use Osstest;
use Osstest::TestSupport;

tsreadconfig();

our ($ho,$gho) = ts_get_host_guest(@ARGV);

our ($cfgfile,$cfgstash,$cfg);

sub savecfg () {
    $cfgfile= $r{"$gho->{Guest}_cfgpath"};
    $cfgfile =~ m,([^/]+)$, or die "$cfgfile";
    my $cfgleaf= $1;
    $cfgstash= "$stash/$cfgleaf";
    target_getfile($ho,10, $cfgfile, "$cfgstash.orig");
    $cfg= get_filecontents("$cfgstash.orig");
}

sub ether () {
#    $cfg =~ s/^ [ \t]*
#        ( vif [ \t]* \= [ \t]* \[ [ \t]* [\'\"]
#          [^\n\'\"]* \b mac= ) [0-9a-fA-F:]+ \b ( [^\n\'\"]* [\'\"]
#          [^\n\'\"]* )
#          /
#            my $n= $1.$gho->{Ether}.$2;
#            logm("changed vif to $n");
#            $n;
#          /mxe
#        or die "no ether?";
#
    store_runvar("$gho->{Guest}_tcpcheckport", 22);
}

sub access () {
    guest_umount_lv($ho, $gho);
    target_cmd_root($ho, <<END);
        set -ex
        mount /dev/$gho->{Vg}/$gho->{Lv} /mnt
        perl -i~ -pe "s/^root:[^:]+:/root::/" /etc/shadow
        mkdir -p /mnt/root/.ssh /mnt/etc/ssh
        cp -a /root/.ssh/* /mnt/root/.ssh/.
        cp -a /etc/ssh/ssh_host_*key* /mnt/etc/ssh/.
END
}

our $extra;

sub console () {
    my $console=
        target_kernkind_console_inittab($ho,$gho,"/mnt");
    return unless length $console;
    
    my $xextra= "console=$console earlyprintk=xen";
    my $orgextra;
    if ($cfg =~ s/^(extra=[ \t]*[\'\"](.*)[\'\"][ \t]*)\n/\n/m) {
        $orgextra= $2;
        logm("extra was: $1");
        $orgextra =~ s/\bconsole=\S+\s*//g;
        $orgextra.= ' ';
    } elsif ($cfg =~ m/^extra\b.*/) {
        die "$& ?";
    } else {
        $orgextra= '';
    }
    $orgextra =~ s/\bearlyprintk=\S+\s*//g;
    $extra= "$orgextra$xextra";
    logm("extra: $extra");
}

sub filesystems () {
    my $rootdev= $r{"$gho->{Guest}_rootdev"};
    return unless defined($rootdev) && length($rootdev);
    logm("adjusting root: $rootdev");
    $cfg =~ s,^(root \s* = \s* ['"] /dev/)sda(\d+ \s .*)$, $1.$rootdev.$2 ,mxe;
    $cfg =~ s#('phy: [^,: \t]+ , )sda(\d+ ,w')# $1.$rootdev.$2 #gmxe;

    target_cmd_root($ho, <<END);
        set -ex
        perl -i~ -pe "
            s,^(/dev/)sda(\\\\d+),\\\${1}$rootdev\\\$2,;
        " /mnt/etc/fstab
END
}

sub unmount () {
    guest_umount_lv($ho, $gho);
}

sub setcfg ($$) {
    my ($lhs,$rhs) = @_;
    $cfg =~ s/^$lhs\s*\=.*\n?//mg;
    $cfg .= "$lhs = $rhs\n";
}

sub otherfixupcfg () {
    my $vcpus= guest_var($gho,'vcpus',1);
    $cfg =~ s/^dhcp/#$&/mg;
    $cfg =~ s/^on_crash.*/on_crash='preserve'/mg;
    $cfg =~ s/^vcpus.*//mg;
    $cfg .= "\nvcpus = $vcpus\n";

    # PCI passthrough
    # Look for runvars   <gn>_pcipassthrough_<devtype>=<hostident>
    # and pass through all matching devices from the specified host.
    # If this means we pass through a pt dev with devtype "nic",
    # remove vif=... from the config file.
    my @pcipt;
    foreach my $ptvar (keys %r) {
        next unless $ptvar =~ m/^$gho->{Guest}_pcipassthrough_(\w+)$/;
        my $devtype= $1;
        my $ptho= selecthost($r{$ptvar});
        logm("passthrough $devtype from $r{$ptvar} to $gho->{Guest}");
        foreach my $ptdev (host_get_pcipassthrough_devs($ptho)) {
            next unless $ptdev->{DevType} eq $devtype;
            push @pcipt, $ptdev->{Bdf};
            logm("passthrough  $ptdev->{Bdf}");
            if ($devtype eq 'nic') {
                logm("passthrough   nic, suppressing vif");
                $cfg =~ s/^vif\s*\=/\#$&/mg;
            }
        }
    }
    if (@pcipt) {
        logm("checking passthrough device(s) are assignable: @pcipt");
        my @assignables= split /\n/,
            target_cmd_output_root($ho, toolstack()->{Command}.
                                   " pci-assignable-list");
        foreach my $pcipt (@pcipt) {
            die "not assignable: $pcipt (not in: @assignables)"
                unless grep { m/^(.*\:)?$pcipt$/ } @assignables;
        }
        setcfg('pci', '['.(join ',', map { "'$_'" } @pcipt).']');
        $extra =~ s/ iommu=\w+//;
        $extra .= " iommu=soft";
    }

    $cfg .= "\nextra='$extra'\n";
};

sub writecfg () {
    my $h= new IO::File $cfgstash, 'w' or die "$cfgstash $!";
    print $h $cfg or die $!;
    close $h or die $!;
    target_putfile_root($ho,10, $cfgstash, $cfgfile);
}

savecfg();
ether();
target_kernkind_check($gho);
access();
console();
filesystems();
otherfixupcfg();
writecfg();
unmount();
