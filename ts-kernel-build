#!/usr/bin/perl

use strict qw(vars);
use DBI;
use Osstest;
use Osstest::TestSupport;

tsreadconfig();

our ($whhost) = @ARGV;
$whhost ||= 'host';
our $ho= selecthost($whhost);

my $leaf= "build.$flight.$job";
my $builddir= "/home/osstest/$leaf";

my $makeflags= get_host_property($ho, 'build make flags', '-j4');

sub checkout () {
    target_cmd($ho, "rm -rf $builddir && mkdir $builddir", 600);

    build_clone($ho, 'xen', $builddir, 'xen-unstable');

    build_clone($ho, 'linux', $builddir, 'linux');

    if (length($r{tree_pq_linux})) {
        build_clone($ho, 'pq_linux', $builddir, 'linux/.hg/patches');
        
        target_cmd_build($ho, 1000, $builddir, <<END);
            cd $builddir/linux
            hg qpush -a
END
    }
}

our $config_hardware= <<END;
setopt CONFIG_DM_CRYPT m
setopt CONFIG_DM_SNAPSHOT m

setopt CONFIG_BLK_DEV_NBD m

setopt CONFIG_ATA_GENERIC y

setopt CONFIG_SATA_SIL24 m
setopt CONFIG_SATA_SVW m
setopt CONFIG_SATA_MV m
setopt CONFIG_SATA_NV m
setopt CONFIG_SATA_QSTOR m
setopt CONFIG_SATA_PROMISE m
setopt CONFIG_SATA_SIL m
setopt CONFIG_SATA_SIS m
setopt CONFIG_SATA_ULI m
setopt CONFIG_SATA_VIA m
setopt CONFIG_SATA_VITESSE m
setopt CONFIG_SATA_INIC162X m
setopt CONFIG_SCSI_TGT m
setopt CONFIG_SCSI_ISCSI_ATTRS m
setopt CONFIG_SCSI_SAS_LIBSAS m
setopt CONFIG_SCSI_SAS_HOST_SMP=y
setopt CONFIG_SCSI_SAS_LIBSAS_DEBUG=y
setopt CONFIG_SCSI_LOWLEVEL=y
setopt CONFIG_ISCSI_TCP m
setopt CONFIG_SCSI_CXGB3_ISCSI m
setopt CONFIG_BE2ISCSI m
setopt CONFIG_BLK_DEV_3W_XXXX_RAID m
setopt CONFIG_SCSI_3W_9XXX m
setopt CONFIG_SCSI_ACARD m
setopt CONFIG_SCSI_AACRAID m
setopt CONFIG_SCSI_AIC7XXX m
setopt CONFIG_SCSI_AIC79XX m
setopt CONFIG_SCSI_AIC94XX m
setopt CONFIG_SCSI_MVSAS m
setopt CONFIG_SCSI_MVSAS_DEBUG=y
setopt CONFIG_SCSI_DPT_I2O m
setopt CONFIG_SCSI_ADVANSYS m
setopt CONFIG_SCSI_ARCMSR m
setopt CONFIG_SCSI_MPT2SAS m
setopt CONFIG_SCSI_HPTIOP m
setopt CONFIG_SCSI_BUSLOGIC m
setopt CONFIG_LIBFC m
setopt CONFIG_LIBFCOE m
setopt CONFIG_FCOE m
setopt CONFIG_FCOE_FNIC m
setopt CONFIG_SCSI_DMX3191D m
setopt CONFIG_SCSI_EATA m
setopt CONFIG_SCSI_FUTURE_DOMAIN m
setopt CONFIG_SCSI_GDTH m
setopt CONFIG_SCSI_IPS m
setopt CONFIG_SCSI_INITIO m
setopt CONFIG_SCSI_INIA100 m
setopt CONFIG_SCSI_STEX m
setopt CONFIG_SCSI_SYM53C8XX_2 m
setopt CONFIG_SCSI_IPR m
setopt CONFIG_SCSI_AIC7XXX m
setopt CONFIG_SCSI_AIC79XX m
setopt CONFIG_SCSI_AIC94XX m
setopt CONFIG_SCSI_MVSAS m
setopt CONFIG_SCSI_MVSAS_DEBUG=y
setopt CONFIG_SCSI_DPT_I2O m
setopt CONFIG_SCSI_ADVANSYS m
setopt CONFIG_SCSI_ARCMSR m
setopt CONFIG_SCSI_MPT2SAS m
setopt CONFIG_SCSI_HPTIOP m
setopt CONFIG_SCSI_BUSLOGIC m
setopt CONFIG_LIBFC m
setopt CONFIG_LIBFCOE m
setopt CONFIG_FCOE m
setopt CONFIG_FCOE_FNIC m
setopt CONFIG_SCSI_DMX3191D m
setopt CONFIG_SCSI_EATA m
setopt CONFIG_SCSI_FUTURE_DOMAIN m
setopt CONFIG_SCSI_GDTH m
setopt CONFIG_SCSI_IPS m
setopt CONFIG_SCSI_INITIO m
setopt CONFIG_SCSI_INIA100 m
setopt CONFIG_SCSI_STEX m
setopt CONFIG_SCSI_SYM53C8XX_2 m
setopt CONFIG_SCSI_IPR m
setopt CONFIG_SCSI_QLOGIC_1280 m
setopt CONFIG_SCSI_QLA_FC m
setopt CONFIG_SCSI_QLA_ISCSI m
setopt CONFIG_SCSI_LPFC m
setopt CONFIG_SCSI_DC395x m
setopt CONFIG_SCSI_DC390T m
setopt CONFIG_SCSI_NSP32 m
setopt CONFIG_SCSI_PMCRAID m
setopt CONFIG_SCSI_SRP m
setopt CONFIG_SCSI_BFA_FC m

setopt CONFIG_FIRMWARE_IN_KERNEL y

setopt CONFIG_BNX2 m
setopt CONFIG_BNX2X m
setopt CONFIG_E1000 m
setopt CONFIG_E1000E m
setopt CONFIG_NETXEN_NIC m
setopt CONFIG_IGB m

setopt CONFIG_PCI_IOV y

setopt CONFIG_EXT4_FS m

END

sub stash_config_edscript ($) {
    my ($settings) = @_;
    my $edscript= "$builddir/change-settings.ed";
    target_putfilecontents_stash($ho,1000,<<'END'.$settings.<<'END',$edscript);
$
?^exit 0
i

END

.
w
q
END
    return $edscript;
}

sub config_xen_enable_xen_config () {
    my $edscript= stash_config_edscript(<<END);

setopt CONFIG_HIGHMEM64G y

setopt CONFIG_AGP n
setopt CONFIG_DRM n
#setopt CONFIG_FB n
setopt CONFIG_VIDEO n
#setopt CONFIG_FRAMEBUFFER n
setopt CONFIG_BOOTSPLASH n

setopt CONFIG_DEBUG_INFO y

setopt CONFIG_XEN_KBDDEV_FRONTEND y

setopt CONFIG_TUN y

$config_hardware
END

    target_cmd_build($ho, 1000, $builddir, <<END);
        cp xen-unstable/buildconfigs/enable-xen-config .
        ed <$edscript enable-xen-config
        chmod +x enable-xen-config
        cd linux
        make defconfig
        ../enable-xen-config .config
        yes '' | make oldconfig
END
    # /;
}

sub config_intree_buildconfigs () {
    my $edscript= stash_config_edscript($config_hardware);
    
    target_cmd_build($ho, 1000, $builddir, <<END);
        sed 's/setopt CONFIG/true &/' xen-unstable/buildconfigs/enable-xen-config >enable-device-configs
        ed <$edscript enable-device-configs
        chmod +x enable-device-configs
	cd linux
	make -f buildconfigs/Rules.mk defconfig </dev/null
        ../enable-device-configs .config
        yes '' | make oldconfig
END
}

sub config () {
    my $confighow= $r{kconfighow};
    $confighow =~ s/\W/_/g;
    &{ "config_$confighow" }();
}

sub build () {
    target_cmd_build($ho, 9000, $builddir, <<END);
	cd linux
        (make $makeflags all modules 2>&1 && touch ../build-ok-stamp) |tee ../log
        test -f ../build-ok-stamp
        echo ok.
END
}

sub kinstall () {
    my $kernfile= $r{kimagefile};
    $kernfile= 'arch/x86/boot/bzImage' if !defined $kernfile;

    target_cmd_build($ho, 300, $builddir, <<END);
	mkdir -p dist/boot dist/lib/modules
	cd linux
	make $makeflags INSTALL_MOD_PATH=$builddir/dist modules_install
	cp System.map $builddir/dist/boot/
	cp $kernfile $builddir/dist/boot/vmlinuz
	cp .config $builddir/dist/boot/config
END
    my $kernver= target_cmd_output($ho, <<END);
	cd $builddir/dist/lib/modules
	echo *
END
    die "$kernver ?" unless $kernver =~ m/^\d\S+$/;
    logm("built $kernver");

    target_cmd_build($ho, 100, $builddir, <<END);
	cd dist/boot
	for f in vmlinuz System.map config; do
		mv \$f \$f-$kernver
	done
END
}

checkout();
config();
build();
kinstall();
built_stash($ho, $builddir, 'dist', 'kerndist');
